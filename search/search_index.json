{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#athena","title":"Athena","text":"<p>Athena is a collection of general-purpose, robust, independent, and reusable components with the goal of powering a software ecosystem. These components may be used on their own to aid in existing projects or integrated into existing (or new) frameworks. In either case, this enables a feedback loop that ultimately benefits both the project using the component(s), and the ecosystem as a whole. The projects themselves get access to quality, well tested code to reduce the maintenance overhead of their application while any issues they do uncover, or additional features that are implemented, benefit not only that project, but every project using that component. However, while using them separately is part of their design, they are best used together.</p>"},{"location":"#athena-framework","title":"Athena Framework","text":"<p>Athena Framework integrates each component into a single cohesive, flexible, and modular framework. It is designed in such a way that allows for it to accommodate the majority of use cases in a way that can be as simple or as complex as required. Not every component needs to be used or understood to start using the framework, only those which are required for the task at hand. However, of course the components work best when used together within the framework.</p>"},{"location":"#feature-highlights","title":"Feature Highlights","text":"<ul> <li>Follows the SOLID principles to encourage good software design</li> <li>Architected in such a way to allow maximum flexibility without needing to fight against the framework</li> <li>Uses annotations as a means of extension/customization</li> </ul>"},{"location":"#documentation-conventions","title":"Documentation Conventions","text":"<p>The Athena website integrates general textual documentation with the API docs of each component. This allows for easy linking between the two when applicable. It does however leverage some conventions that are helpful to understand when reading the documentation.</p> <p>When scrolled to the top of the page, the navigation bar includes a tab for each component representing that component's API documentation. The <code>Manual</code> tab is the contextual documentation for the framework. This includes higher level framework level information, such as its architecture, guides, tutorials, and how each component is integrated if applicable.</p>"},{"location":"#resources","title":"Resources","text":"<ul> <li>Discord Server</li> <li>API Docs</li> <li>GitHub Repository</li> </ul>"},{"location":"why_athena/","title":"Why Athena","text":""},{"location":"why_athena/#creating-good-software","title":"Creating \"good\" Software","text":"<p>When creating an application, actually writing the code is often the easiest part. Designing a system that will be readable, maintainable, testable, and extensible on the other hand is a much more challenging task. The features of the Athena Framework encourage creating such software. However it does not do much good without also understanding the why behind the way it is designed the way it is. Let's take a moment to explore how the features mentioned in the introduction can lead to \"good\" software design.</p> <p>Warning</p> <p>As with anything in the software world, \"good\" software is subjective. The design decision/suggestions on this page are intended to be educational and provide \"best practices\" guidelines. They are NOT the only way to use the framework nor prescriptive. Do whatever makes the most sense for your project.</p>"},{"location":"why_athena/#solid-principles","title":"SOLID Principles","text":"<p>The SOLID principles are applicable to any Object Oriented Programming (OOP) language. They play a big part in the underlying architecture of the Athena Framework, and the overall ecosystem of Athena itself. There are plenty of resources online to learn more about all of the principles, but this section will focus on that of the Dependency Inversion and Single Responsibility principles and how an Inversion of Control (IoC) service container orchestrates it all via dependency injection.</p>"},{"location":"why_athena/#single-responsibility","title":"Single Responsibility","text":"<p>Just as the name implies, this principle suggests that each type should have only a single primary purpose. Having types with specialized focuses has various benefits including:</p> <ul> <li>Easier to test</li> <li>Less coupling due to lower amount of dependencies it requires</li> <li>Easier to read and search for</li> </ul> <p>A more concrete example of this could be say there is a class representing an article:</p> <pre><code>class Article\n  property title : String\n  property author : String\n  property body : String\n\n  def initialize(@title : String, @author : String, @body : String); end\n\n  def includes_word?(word : String) : Bool\n    @body.includes? word\n  end\n\n  # ...\nend\n</code></pre> <p>This type currently only has a single purpose which is representing an article. It also exposes some helper methods related to querying information about each article which are also valid under this principle. However, if a new method was added to persist the article to some location, the class would now no longer have just one purpose, thus violating the single responsibility principle.</p> <p>In this example, it would be better to add another type, say <code>ArticlePersister</code> to handle this functionality:</p> <pre><code>@[ADI::Register]\nclass ArticlePersister\n  def persist(article : Article) : Nil\n    # ...\n  end\nend\n</code></pre>"},{"location":"why_athena/#services","title":"Services","text":"<p>A sharp eye will notice this type was created with the ADI::Register annotation applied to it. This registers the type as a service, which is essentially just a useful object that could be used by other services. Not all types are services though, such as the <code>Article</code> type. This is because it only stores data within the domain of the application and does not provide any useful functionality on its own. More on this topic in the dependency injection section.</p>"},{"location":"why_athena/#dependency-inversion","title":"Dependency Inversion","text":"<p>This principle states that code should \"Depend upon abstractions, [not] concretions.\" In other words, services should depend upon interfaces instead of concrete types. This not only makes the depending services more flexible since different implementations of the interface could be used, but also makes testing easier since mock implementations could also be used. In Crystal, an interface is nothing more than a module with abstract defs that can be included within another type in order to force the including type to define its methods.The example from the previous principle can be used to demonstrate.</p> <p>The <code>ArticlePersister</code> can be used to persist an article. For example say there is another service in which an article should be persisted. This could be a controller action, a console command, some sort of async consumer, etc. The easiest way to handle persisting of the article would be to do something like:</p> <pre><code>@[ADI::Register]\nclass MyService\n  def execute\n    article = # ...\n    persister = ArticlePersister.new\n\n    persister.persist article    \n  end\nend\n</code></pre> <p>However this has some problems since it tightly couples <code>MyService</code> to the <code>ArticlePersister</code> service. Not super ideal.</p> <pre><code>def initialize\n  @persister = ArticlePersister.new\nend\n</code></pre> <p>Moving the persister into an instance variable created within the constructor is a bit better but also suffers from the same issue. The ideal solution here would be to provide an <code>ArticlePersister</code> instance to <code>MyService</code> when it is instantiated:</p> <pre><code>def initialize(\n  @persister : ArticlePersister\n); end\n</code></pre> <p>The same behavior as before can also be retained, even when using this new pattern. This will use the provided instance, or fall back on a default implementation if no custom instance is provided:</p> <pre><code>def initialize(\n  persister : ArticlePersister? = nil\n)\n  @persister = persister || ArticlePersister.new\nend\n</code></pre> <p>Both of these latter two examples remove the tight coupling between the two services. However there is still one thing that is less than ideal. It should be possible to persist an article in multiple places. Meaning it needs to allow for more than one implementation of <code>ArticlePersister</code> that handles different locations, such as one for a database and another for the local filesystem. The best way to handle this would be to create an interface module for this type:</p> <pre><code>module ArticlePersisterInterface\n  abstract def persist(article : Article) : Nil\nend\n</code></pre> <p>From here the constructor of <code>MyService</code> should be updated to use it:</p> <pre><code>def initialize(\n  @persister : ArticlePersisterInterface\n); end\n</code></pre> <p>Also being sure to include the interface in our service:</p> <pre><code>@[ADI::Register]\nclass ArticlePersister\n  include ArticlePersisterInterface\n\n  def persist(article : Article) : Nil\n    # ...\n  end\nend\n</code></pre> <p>While this is a bit of extra boilerplate, it is an incredibly powerful pattern. It enables <code>MyService</code> to persist an article to anywhere, depending on what implementation instance it is instantiated with. The same pattern can be extended to make testing the service much easier. A mock implementation of <code>ArticlePersisterInterface</code> can be used to assert <code>MyService</code> calls with the proper arguments without testing more than is required.</p>"},{"location":"why_athena/#flexibility","title":"Flexibility","text":"<p>Athena Framework is very flexible in that it is able to support both simple and complex use cases by adapting to the needs of the application without getting in the way of customizations the user wants to make. This is accomplished by providing all the components to the user, but not requiring they be used. If an application does not need to validate anything, the Athena::Validator component can just be ignored. But if the need ever arises it is there and well integrated into the framework.</p>"},{"location":"why_athena/#dependency-injection","title":"Dependency Injection","text":"<p>Athena Framework includes an IoC Service Container that manages services automatically. Any service, or a useful type, annotated with ADI::Register, can be used in another service by defining a constructor typed to the desired service. For example:</p> <pre><code>require \"athena\"\n\n# Register an example service that provides a name string.\n@[ADI::Register]\nclass NameProvider\n  def name : String\n    \"World\"\n  end\nend\n\n# Register another service that depends on the previous service and provides a value.\n@[ADI::Register]\nclass ValueProvider\n  def initialize(@name_provider : NameProvider); end\n\n  def value : String\n    \"Hello \" + @name_provider.name\n  end\nend\n\n# Register a service controller that depends upon the ValueProvider.\n@[ADI::Register]\nclass ExampleController &lt; ATH::Controller\n  def initialize(@value_provider : ValueProvider); end\n\n  @[ARTA::Get(\"/\")]\n  def get_value : String\n    @value_provider.value\n  end\nend\n\nATH.run\n\n# GET / # =&gt; \"Hello World\"\n</code></pre> <p>It is worth noting again that while dependency injection is a big part of the framework, it is not necessarily required to fully understand it in order to use the framework, but like the other components, it is there if needed. Checkout ADI::Register, especially the aliasing services section, as well as the Dependency Injection component for more information related to this feature.</p> <p>Athena Framework is almost fully overridable/customizable in part since it embraces dependency injection. Want to globally customize how errors are rendered? Create a service implementing ATH::ErrorRendererInterface and make it an alias of the interface:</p> <pre><code>@[ADI::Register(alias: ATH::ErrorRendererInterface)]\nclass MyCustomErrorRenderer\n  include Athena::Framework::ErrorRendererInterface\n\n  # :inherit:\n  def render(exception : ::Exception) : ATH::Response\n    ATH::Response.new ...\n  end\nend\n</code></pre> <p>Athena Framework will pick this up and use it instead of the built in version without any other required configuration changes. The same concept applies to many different features within the framework that have their own interface/default implementation.</p>"},{"location":"why_athena/#middleware","title":"Middleware","text":"<p>Unlike other frameworks, Athena Framework leverages event based middleware instead of a pipeline based approach. This enables a lot of flexibility in that there is nothing extra that needs to be done to register the listener other than creating a service for it:</p> <pre><code>@[ADI::Register]\nclass CustomListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def on_response(event : ATH::Events::Response) : Nil\n    event.response.headers[\"FOO\"] = \"BAR\"\n  end\nend\n</code></pre> <p>Similarly, the framework itself is implemented using the same features available to the users. Thus it is very easy to run specific listeners before/after the built-in ones if so desired.</p> <p>Tip</p> <p>Check out the <code>debug:event-dispatcher</code> command for an easy way to see all the listeners and the order in which they are executed.</p>"},{"location":"why_athena/#annotations","title":"Annotations","text":"<p>One of the more unique aspects of Athena Framework, and the Athena ecosystem, is its use of annotations as a means of configuring the framework. While not everyone may like their syntax, the benefits they provide are undeniable. The main benefit being they keep the code close to where it is used. The route of a controller action is declared directly above the method that handles it and not in some other file. Metadata associated with a specific service/route is also right there with the type itself.</p>"},{"location":"why_athena/#point-of-extension","title":"Point of Extension","text":"<p>A common way to do certain things in other frameworks is the use of macro DSLs specific to each framework. While it can work well, it makes it harder to expand upon/customize. Given annotations are a core Crystal language construct, there nothing special needed to access the annotations themselves. This can be especially useful for third party code to have a tighter integration while also being totally agnostic of what framework the code is even used in.</p>"},{"location":"why_athena/#user-defined-annotations","title":"User Defined Annotations","text":"<p>One of the most powerful features Athena Framework offers is that of custom user defined annotations which provide almost an infinite amount of use cases. These annotations could be applied to controller classes and/or controller actions to expose additional information to other services, such as event listeners or ATHR::Interfaces to customize their behavior on a case by case basis.</p> <pre><code>require \"athena\"\n\n# Define our configuration annotation with an optional `name` argument.\n# A default value can also be provided, or made not nilable to be considered required.\nACF.configuration_annotation MyAnnotation, name : String? = nil\n\n# Define and register our listener that will do something based on our annotation.\n@[ADI::Register]\nclass MyAnnotationListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def on_view(event : ATH::Events::View) : Nil\n    # Represents all custom annotations applied to the current ATH::Action.\n    ann_configs = event.request.action.annotation_configurations\n\n    # Check if this action has the annotation\n    unless ann_configs.has? MyAnnotation\n      # Do something based on presence/absence of it.\n      # Would be executed for `ExampleController#one` since it does not have the annotation applied.\n    end\n\n    my_ann = ann_configs[MyAnnotation]\n\n    # Access data off the annotation.\n    if my_ann.name == \"Fred\"\n      # Do something if the provided name is/is not some value.\n      # Would be executed for `ExampleController#two` since it has the annotation applied, and name value equal to \"Fred\".\n    end\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"one\")]\n  def one : Int32\n    1\n  end\n\n  @[ARTA::Get(\"two\")]\n  @[MyAnnotation(name: \"Fred\")]\n  def two : Int32\n    2\n  end\nend\n\nATH.run\n</code></pre>"},{"location":"why_athena/#primary-use-cases","title":"Primary Use Cases","text":"<p>While the components that make up Athena Framework can be used within a wide range of applications, the framework itself is best suited for a few main types, including HTTP REST APIs, CLI Applications, or a combination of both. Since both types of entry points leverage dependency injection, services can be used in both contexts, allowing the majority of code to be reused.</p>"},{"location":"why_athena/#http-rest-api","title":"HTTP REST API","text":"<p>At its core, Athena Framework is a MVC web application framework. It can be used to serve any kind of content, but best lends itself to creating RESTful JSON APIs due to the features explained in the previous section, as well as due its native JSON support:</p> <ul> <li>Objects returned from the controller are JSON serialized by default</li> <li>Native support for both ASR::Serializable and JSON::Serializable</li> <li>Native support for DTOs to deserialize and validate, see ATHR::RequestBody.</li> </ul> <pre><code>require \"athena\"\n\nstruct UserCreate\n  include AVD::Validatable\n  include JSON::Serializable\n\n  @[Assert::NotBlank]\n  @[Assert::Email(:html5)]\n  getter email : String\n\n  # ...\nend\n\nclass UserController &lt; ATH::Controller\n  @[ARTA::Post(\"/user\")]\n  @[ATHA::View(status: :created)]\n  def new_user(\n    @[ATHR::RequestBody::Extract]\n    user_create : UserCreate\n  ) : UserCreate\n    # Use the provided UserCreate instance to create an actual User DB record.\n    # For purposes of this example, just return the instance.\n\n    user_create\n  end\nend\n\nATH.run\n\n# POST /user body: {\"email\":\"dietrich.app\"} # =&gt; \n# {\n#   \"code\": 422,\n#   \"message\": \"Validation failed\",\n#   \"errors\": [\n#     {\n#       \"property\": \"email\",\n#       \"message\": \"This value is not a valid email address.\",\n#       \"code\": \"ad9d877d-9ad1-4dd7-b77b-e419934e5910\"\n#     }\n#   ]\n# }\n\n# POST /user body: {\"email\":\"george@dietrich.app\"} # =&gt; {\"email\":\"george@dietrich.app\"}\n</code></pre>"},{"location":"why_athena/#cli-applications","title":"CLI Applications","text":"<p>Athena Framework can also be used to build CLI based applications. These could either be used directly by the end user, used for internal administrative tasks, or invoked on a schedule via <code>cron</code> or something similar.</p> <pre><code>@[ACONA::AsCommand(\"app:create-user\")]\n@[ADI::Register]\nclass CreateUserCommand &lt; ACON::Command\n  protected def configure : Nil\n    # ...\n  end\n\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    # Implement all the business logic here.\n\n    # Indicates the command executed successfully.\n    Status::SUCCESS\n  end\nend\n</code></pre> <pre><code>$ ./bin/console\nAthena 0.18.0\n\nUsage:\n  command [options] [arguments]\n\nOptions:\n  -h, --help            Display help for the given command. When no command is given display help for the list command\n  -q, --quiet           Do not output any message\n  -V, --version         Display this application version\n      --ansi|--no-ansi  Force (or disable --no-ansi) ANSI output\n  -n, --no-interaction  Do not ask any interactive question\n  -v|vv|vvv, --verbose  Increase the verbosity of messages: 1 for normal output, 2 for more verbose output and 3 for debug\n\nAvailable commands:\n  help                    Display help for a command\n  list                    List commands\n app\n  app:create-user         \n debug\n  debug:event-dispatcher  Display configured listeners for an application\n  debug:router            Display current routes for an application\n  debug:router:match      Simulate a path match to see which route, if any, would handle it\n</code></pre> <p>Checkout the console component for more information.</p>"},{"location":"Clock/","title":"Clock","text":""},{"location":"Clock/#Athena::Clock","title":"class <code>Athena::Clock</code> inherits <code>Reference</code>","text":"<p>The <code>Athena::Clock</code> component allows decoupling an application from the system clock. This allows time to be fixed, aiding in testability of time-sensitive logic.</p> <p>The component provides <code>Athena::Clock::Interface</code> with the following built-in implementations:</p> <ul> <li><code>ACLK::Native</code> - Interacts with the system clock; same as doing <code>Time.local</code></li> <li><code>ACLK::Monotonic</code> - Based on a high resolution monotonic clock, perfect for measuring time; similar to <code>Time.monotonic</code></li> <li><code>ACLK::Spec::MockClock</code> - Can be used in specs to able to freeze and change the current time using either <code>#sleep</code> or <code>#shift</code></li> </ul>"},{"location":"Clock/#Athena::Clock--usage","title":"Usage","text":"<p>The core <code>Athena::Clock</code> type can be used to return the current time via a global clock.</p> <pre><code># By default, `Athena::Clock` uses the native clock implementation,\n# but it can be changed to any other implementation\nAthena::Clock.clock = ACLK::Monotonic.new\n\n# Then, obtain a clock instance\nclock = ACLK.clock\n\n# Optionally, with in a specific location\nberlin_clock = clock.in_location Time::Location.load \"Europe/Berlin\"\n\n# From here, get the current time as a `Time` instance\nnow = clock.now # : ::Time\n\n# and sleep for any period of time\nclock.sleep 2\n</code></pre> Included modules <code>Athena::Clock::Interface</code>"},{"location":"Clock/#Athena::Clock-constants","title":"Constants","text":""},{"location":"Clock/#Athena::Clock::VERSION","title":"<code>VERSION = \"0.1.1\"</code>","text":""},{"location":"Clock/#Athena::Clock-constructors","title":"Constructors","text":""},{"location":"Clock/#Athena::Clock.new(clock,location)","title":"<code>.new(clock : ACLK::Interface | Nil = nil, location : Time::Location | Nil = nil)</code>","text":"View source"},{"location":"Clock/#Athena::Clock-class-methods","title":"Class methods","text":""},{"location":"Clock/#Athena::Clock.clock","title":"<code>.clock : ACLK::Interface</code>","text":"<p>Represents the global clock used by all <code>Athena::Clock</code> instances.</p> <p>Note</p> <p>It is preferable injecting an <code>Athena::Clock::Interface</code> when possible versus using the global clock getter.</p> View source"},{"location":"Clock/#Athena::Clock.clock=(clock)","title":"<code>.clock=(clock : ACLK::Interface)</code>","text":"<p>Represents the global clock used by all <code>Athena::Clock</code> instances.</p> <p>Note</p> <p>It is preferable injecting an <code>Athena::Clock::Interface</code> when possible versus using the global clock getter.</p> View source"},{"location":"Clock/#Athena::Clock-methods","title":"Methods","text":""},{"location":"Clock/#Athena::Clock#in_location(location)","title":"<code>#in_location(location : Time::Location) : self</code>","text":"<p>Returns a new clock instance set to the provided location.</p> View source"},{"location":"Clock/#Athena::Clock#now","title":"<code>#now : Time</code>","text":"<p>Returns the current time as determined by the clock.</p> View source"},{"location":"Clock/#Athena::Clock#sleep(span)","title":"<code>#sleep(span : Time::Span) : Nil</code>","text":"<p>Sleeps for the provided span of time.</p> View source"},{"location":"Clock/#Athena::Clock#sleep(seconds)","title":"<code>#sleep(seconds : Number) : Nil</code>","text":"<p>Sleeps for the provided amount of seconds.</p> View source"},{"location":"Clock/aliases/","title":"Aliases","text":""},{"location":"Clock/aliases/#ACLK","title":"alias <code>ACLK</code>","text":"<p>Convenience alias to make referencing <code>Athena::Clock</code> types easier.</p> Alias definition <code>Athena::Clock</code>"},{"location":"Clock/Interface/","title":"Interface","text":""},{"location":"Clock/Interface/#Athena::Clock::Interface","title":"module <code>Athena::Clock::Interface</code>","text":"<p>Represents a clock that returns a <code>Time</code> instance, possibly in a specific location.</p> Direct including types <code>Athena::Clock</code> <code>Athena::Clock::Monotonic</code> <code>Athena::Clock::Native</code> <code>Athena::Clock::Spec::MockClock</code>"},{"location":"Clock/Interface/#Athena::Clock::Interface-methods","title":"Methods","text":""},{"location":"Clock/Interface/#Athena::Clock::Interface#in_location(location)","title":"abstract <code>#in_location(location : Time::Location) : self</code>","text":"<p>Returns a new clock instance set to the provided location.</p> View source"},{"location":"Clock/Interface/#Athena::Clock::Interface#now","title":"abstract <code>#now : Time</code>","text":"<p>Returns the current time as determined by the clock.</p> View source"},{"location":"Clock/Interface/#Athena::Clock::Interface#sleep(span)","title":"abstract <code>#sleep(span : Time::Span) : Nil</code>","text":"<p>Sleeps for the provided span of time.</p> View source"},{"location":"Clock/Interface/#Athena::Clock::Interface#sleep(seconds)","title":"abstract <code>#sleep(seconds : Number) : Nil</code>","text":"<p>Sleeps for the provided amount of seconds.</p> View source"},{"location":"Clock/Monotonic/","title":"Monotonic","text":""},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic","title":"class <code>Athena::Clock::Monotonic</code> inherits <code>Reference</code>","text":"<p>The monotonic clock is primarily intended to be use to measure time, such as for a stopwatch. It's measurements are unaffected by inconsistencies sometimes introduced by the system clock. See Measuring Time for more information.</p> Included modules <code>Athena::Clock::Interface</code>"},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic-constructors","title":"Constructors","text":""},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic.new(location)","title":"<code>.new(location : Time::Location | Nil = nil)</code>","text":"View source"},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic-methods","title":"Methods","text":""},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic#in_location(location)","title":"<code>#in_location(location : Time::Location) : self</code>","text":"<p>Returns a new clock instance set to the provided location.</p> View source"},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic#now","title":"<code>#now : Time</code>","text":"<p>Returns the current time as determined by the clock.</p> View source"},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic#sleep(span)","title":"<code>#sleep(span : Time::Span) : Nil</code>","text":"<p>Sleeps for the provided span of time.</p> View source"},{"location":"Clock/Monotonic/#Athena::Clock::Monotonic#sleep(seconds)","title":"<code>#sleep(seconds : Number) : Nil</code>","text":"<p>Sleeps for the provided amount of seconds.</p> View source"},{"location":"Clock/Native/","title":"Native","text":""},{"location":"Clock/Native/#Athena::Clock::Native","title":"struct <code>Athena::Clock::Native</code> inherits <code>Struct</code>","text":"<p>The default clock for most use cases which returns the current system time. For example:</p> <pre><code>class ExpirationChecker\n  def initialize(@clock : Athena::Clock::Interface); end\n\n  def expired?(valid_until : Time) : Bool\n    @clock.now &gt; valid_until\n  end\nend\n</code></pre> Included modules <code>Athena::Clock::Interface</code>"},{"location":"Clock/Native/#Athena::Clock::Native-constructors","title":"Constructors","text":""},{"location":"Clock/Native/#Athena::Clock::Native.new(location)","title":"<code>.new(location : Time::Location | Nil = nil)</code>","text":"View source"},{"location":"Clock/Native/#Athena::Clock::Native-methods","title":"Methods","text":""},{"location":"Clock/Native/#Athena::Clock::Native#in_location(location)","title":"<code>#in_location(location : Time::Location) : self</code>","text":"<p>Returns a new clock instance set to the provided location.</p> View source"},{"location":"Clock/Native/#Athena::Clock::Native#now","title":"<code>#now : Time</code>","text":"<p>Returns the current time as determined by the clock.</p> View source"},{"location":"Clock/Native/#Athena::Clock::Native#sleep(span)","title":"<code>#sleep(span : Time::Span) : Nil</code>","text":"<p>Sleeps for the provided span of time.</p> View source"},{"location":"Clock/Native/#Athena::Clock::Native#sleep(seconds)","title":"<code>#sleep(seconds : Number) : Nil</code>","text":"<p>Sleeps for the provided amount of seconds.</p> View source"},{"location":"Clock/Spec/","title":"Spec","text":""},{"location":"Clock/Spec/#Athena::Clock::Spec","title":"module <code>Athena::Clock::Spec</code>","text":"<p>A set of testing utilities/types to aid in testing <code>Athena::Clock</code> related types.</p>"},{"location":"Clock/Spec/#Athena::Clock::Spec--getting-started","title":"Getting Started","text":"<p>Require this module in your <code>spec_helper.cr</code> file:</p> <pre><code>require \"athena-clock/spec\"\n</code></pre>"},{"location":"Clock/Spec/ClockSensitive/","title":"ClockSensitive","text":""},{"location":"Clock/Spec/ClockSensitive/#Athena::Clock::Spec::ClockSensitive","title":"module <code>Athena::Clock::Spec::ClockSensitive</code>","text":"<p>An <code>Athena::Spec::TestCase</code> mix-in that allows freezing time and restoring the global clock after each test.</p> <pre><code>struct MonthSensitiveTest &lt; ASPEC::TestCase\n  include ACLK::Spec::ClockSensitive\n\n  def test_winter_month : Nil\n    clock = self.mock_time Time.utc 2023, 12, 10\n\n    month_sensitive = MonthSensitive.new\n    month_sensitive.clock = clock\n\n    month_sensitive.winter_month?.should be_true\n  end\n\n  def test_non_winter_month : Nil\n    clock = self.mock_time Time.utc 2023, 7, 10\n\n    month_sensitive = MonthSensitive.new\n    month_sensitive.clock = clock\n\n    month_sensitive.winter_month?.should be_false\n  end\nend\n</code></pre>"},{"location":"Clock/Spec/ClockSensitive/#Athena::Clock::Spec::ClockSensitive-methods","title":"Methods","text":""},{"location":"Clock/Spec/ClockSensitive/#Athena::Clock::Spec::ClockSensitive#mock_time(now)","title":"<code>#mock_time(now : Time | Bool = true) : ACLK::Interface</code>","text":"<p>Returns clock instance based on the provided now value.</p> <p>If a <code>Time</code> instance is passed, that value is used. If <code>true</code>, freezes the global clock to the current time. If <code>false</code>, restores the previous global clock.</p> View source"},{"location":"Clock/Spec/ClockSensitive/#Athena::Clock::Spec::ClockSensitive#shift(*,years,months,weeks,days,hours,minutes,seconds)","title":"<code>#shift(*, years : Int = 0, months : Int = 0, weeks : Int = 0, days : Int = 0, hours : Int = 0, minutes : Int = 0, seconds : Int = 0) : ACLK::Interface</code>","text":"<p>Returns a new clock instanced with the global clock value shifted by the provided amount of time. Positive values shift into the future, while negative values shift into the past.</p> View source"},{"location":"Clock/Spec/MockClock/","title":"MockClock","text":""},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock","title":"class <code>Athena::Clock::Spec::MockClock</code> inherits <code>Reference</code>","text":"<p>The mock clock is instantiated with a time and does not move forward on its own. The time is fixed until <code>#sleep</code> or <code>#shift</code> is called. This provides full control over what time the code assumes it's running with, ultimately making testing time-sensitive types much easier.</p> <pre><code>class ExpirationChecker\n  def initialize(@clock : Athena::Clock::Interface); end\n\n  def expired?(valid_until : Time) : Bool\n    @clock.now &gt; valid_until\n  end\nend\n\nclock = ACLK::Spec::MockClock.new Time.utc 2023, 9, 16, 15, 20\nexpiration_checker = ExpirationChecker.new clock\nvalid_until = Time.utc 2023, 9, 16, 15, 25\n\n# valid_until is in the future, so not expired\nexpiration_checker.expired?(valid_until).should be_false\n\n# Sleep for 10 minutes, so time is now 2023-09-16 15:30:00,\n# time is instantly changes as if 10 minutes really passed\nclock.sleep 10.minutes\n\nexpiration_checker.expired?(valid_until).should be_true\n\n# Time can also be shifted, either into the future or past\nclock.shift minutes: -20\n\n# valid_until is in the future again, so not expired\nexpiration_checker.expired?(valid_until).should be_false\n</code></pre> Included modules <code>Athena::Clock::Interface</code>"},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock-constructors","title":"Constructors","text":""},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock.new(now,location)","title":"<code>.new(now : Time = Time.local, location : Time::Location | Nil = nil)</code>","text":"View source"},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock-methods","title":"Methods","text":""},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock#in_location(location)","title":"<code>#in_location(location : Time::Location) : self</code>","text":"<p>Returns a new clock instance set to the provided location.</p> View source"},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock#now","title":"<code>#now : Time</code>","text":"<p>Returns the current time as determined by the clock.</p> View source"},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock#shift(*,years,months,weeks,days,hours,minutes,seconds)","title":"<code>#shift(*, years : Int = 0, months : Int = 0, weeks : Int = 0, days : Int = 0, hours : Int = 0, minutes : Int = 0, seconds : Int = 0) : Nil</code>","text":"<p>Shifts the mocked time instance by the provided amount of time. Positive values shift into the future, while negative values shift into the past.</p> <p>This method is essentially equivalent to calling <code>#sleep</code> with the same amount of time, but this method provides a better API in some cases.</p> View source"},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock#sleep(span)","title":"<code>#sleep(span : Time::Span) : Nil</code>","text":"<p>Sleeps for the provided span of time.</p> View source"},{"location":"Clock/Spec/MockClock/#Athena::Clock::Spec::MockClock#sleep(seconds)","title":"<code>#sleep(seconds : Number) : Nil</code>","text":"<p>Sleeps for the provided amount of seconds.</p> View source"},{"location":"Config/","title":"Config","text":""},{"location":"Config/#Athena::Config","title":"module <code>Athena::Config</code>","text":"<p>Athena's Config component contains common types for configuring components/features, and managing <code>ACF::Parameters</code>.</p>"},{"location":"Config/#Athena::Config--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Otherwise, if using it outside of the framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-config:\n    github: athena-framework/config\n    version: ~&gt; 0.3.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-config\"</code>.</p> <p>From here, checkout the manual for some additional information on how to use it both within and outside of the framework.</p> <p>Info</p> <p>DI parameter injection requires the Athena::DependencyInjection component as well.</p>"},{"location":"Config/#Athena::Config-constants","title":"Constants","text":""},{"location":"Config/#Athena::Config::VERSION","title":"<code>VERSION = \"0.3.3\"</code>","text":""},{"location":"Config/#Athena::Config-class-methods","title":"Class methods","text":""},{"location":"Config/#Athena::Config.config","title":"<code>.config : ACF::Base</code>","text":"<p>Returns the configured <code>ACF::Base</code> instance. The instance is a lazily initialized singleton.</p> <p><code>ACF.load_configuration</code> may be redefined to change how the configuration object is provided; e.g. create it from a <code>YAML</code> or <code>JSON</code> configuration file. See the external documentation for more information.</p> View source"},{"location":"Config/#Athena::Config.parameters","title":"<code>.parameters : ACF::Parameters</code>","text":"<p>Returns the configured <code>ACF::Parameters</code> instance. The instance is a lazily initialized singleton.</p> <p><code>ACF.load_parameters</code> may be redefined to change how the parameters object is provided; e.g. create it from a <code>YAML</code> or <code>JSON</code> configuration file. See the external documentation for more information.</p> View source"},{"location":"Config/#Athena::Config-macros","title":"Macros","text":""},{"location":"Config/#Athena::Config:configuration_annotation(name,*,&)","title":"<code>configuration_annotation</code>","text":"<p>Registers a configuration annotation with the provided name. Defines a configuration record with the provided args, if any, that represents the possible arguments that the annotation accepts. May also be used with a block to add custom methods to the configuration record.</p> View source"},{"location":"Config/#Athena::Config:configuration_annotation(name,*,&)--example","title":"Example","text":"<pre><code># Defines an annotation without any arguments.\nACF.configuration_annotation Secure\n\n# Defines annotation with a required and optional argument.\n# The default value will be used if that key isn't supplied in the annotation.\nACF.configuration_annotation SomeAnn, id : Int32, debug : Bool = true\n\n# A block can be used to define custom methods on the configuration object.\nACF.configuration_annotation CustomAnn, first_name : String, last_name : String do\n  def name : String\n    \"#{@first_name} #{@last_name}\"\n  end\nend\n</code></pre> <p>Note</p> <p>The logic to actually do the resolution of the annotations must be handled in the owning shard. <code>Athena::Config</code> only defines the common logic that each implementation can use. See <code>ACF::AnnotationConfigurations</code> for more information.</p>"},{"location":"Config/aliases/","title":"Aliases","text":""},{"location":"Config/aliases/#ACF","title":"alias <code>ACF</code>","text":"<p>Convenience alias to make referencing <code>Athena::Config</code> types easier.</p> Alias definition <code>Athena::Config</code>"},{"location":"Config/aliases/#ACFA","title":"alias <code>ACFA</code>","text":"<p>Convenience alias to make referencing <code>ACF::Annotations</code> types easier.</p> Alias definition <code>Athena::Config::Annotations</code>"},{"location":"Config/environment/","title":"Environment","text":""},{"location":"Config/environment/#Athena","title":"module <code>Athena</code>","text":"<p>A web framework comprised of reusable, independent components.</p> <p>See Athena Framework on Github.</p>"},{"location":"Config/environment/#Athena-constants","title":"Constants","text":""},{"location":"Config/environment/#Athena::ENV_NAME","title":"<code>ENV_NAME = \"ATHENA_ENV\"</code>","text":"<p>The name of the environment variable used to determine Athena's current environment.</p>"},{"location":"Config/environment/#Athena-class-methods","title":"Class methods","text":""},{"location":"Config/environment/#Athena.environment","title":"<code>.environment : String</code>","text":"<p>Returns the current environment Athena is in based on <code>ENV_NAME</code>.  Defaults to <code>development</code> if not defined.</p> View source"},{"location":"Config/AnnotationConfigurations/","title":"AnnotationConfigurations","text":""},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations","title":"struct <code>Athena::Config::AnnotationConfigurations</code> inherits <code>Struct</code>","text":"<p>Wraps a hash of configuration annotations applied to a given type, method, or instance variable. Provides the logic to access each annotation's configuration in a type safe manner.</p> <p>Implementations using this type must define the logic to provide the annotation hash manually; this would most likely just be something like:</p> <pre><code># Define a hash to store the configurations.\n{% custom_configurations = {} of Nil =&gt; Nil %}\n\n# Iterate over the stored annotation classes.\n{% for ann_class in ACF::CUSTOM_ANNOTATIONS %}\n   {% ann_class = ann_class.resolve %}\n\n   # Define an array to store the annotation configurations of this type.\n   {% annotations = [] of Nil %}\n\n   # Iterate over each annotation of this type on the given type, method, or instance variable.\n   {% for ann in type_method_instance_variable.annotations ann_class %}\n     # Add a new instance of the annotations configuration to the array.\n     # Add the annotation's positional arguments first, if any, then named arguments.\n     {% annotations &lt;&lt; \"#{ann_class}Configuration.new(#{ann.args.empty? ? \"\".id : \"#{ann.args.splat},\".id}#{ann.named_args.double_splat})\".id %}\n   {% end %}\n\n   # Update the configuration hash with the annotation class and configuration objects, but only if there was at least one.\n   {% custom_configurations[ann_class] = \"(#{annotations} of ACF::AnnotationConfigurations::ConfigurationBase)\".id unless annotations.empty? %}\n {% end %}\n\n# ...\n\n# Use the built hash to instantiate a new `ACF::AnnotationConfigurations` instance.\nACF::AnnotationConfigurations.new({{custom_configurations}} of ACF::AnnotationConfigurations::Classes =&gt; Array(ACF::AnnotationConfigurations::ConfigurationBase)),\n</code></pre> <p>Todo</p> <p>Centralize the hash resolution logic once this issue is resolved.</p>"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations-constructors","title":"Constructors","text":""},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations.new(annotation_hash)","title":"<code>.new(annotation_hash : AnnotationHash = AnnotationHash.new)</code>","text":"View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations-methods","title":"Methods","text":""},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#[](ann_class,index)","title":"<code>#[](ann_class : Athena::Framework::Annotations::View.class, index : Int32 = -1) : Athena::Framework::Annotations::ViewConfiguration</code>","text":"<p>Returns the <code>Athena::Framework::Annotations::View</code> configuration instance for the provided ann_class at the provided index.</p> <p>Returns the last configuration instance by default.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#[](ann_class,index)","title":"<code>#[](ann_class : ::Athena::Framework::Controller::ValueResolvers::RequestBody::Extract.class, index : Int32 = -1) : Athena::Framework::Controller::ValueResolvers::RequestBody::ExtractConfiguration</code>","text":"<p>Returns the <code>::Athena::Framework::Controller::ValueResolvers::RequestBody::Extract</code> configuration instance for the provided ann_class at the provided index.</p> <p>Returns the last configuration instance by default.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#[](ann_class,index)","title":"<code>#[](ann_class : ::Athena::Framework::Controller::ValueResolvers::Time::Format.class, index : Int32 = -1) : Athena::Framework::Controller::ValueResolvers::Time::FormatConfiguration</code>","text":"<p>Returns the <code>::Athena::Framework::Controller::ValueResolvers::Time::Format</code> configuration instance for the provided ann_class at the provided index.</p> <p>Returns the last configuration instance by default.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#[]?(ann_class,index)","title":"<code>#[]?(ann_class : Athena::Framework::Annotations::View.class, index : Int32 = -1) : Athena::Framework::Annotations::ViewConfiguration | Nil</code>","text":"<p>Returns the <code>Athena::Framework::Annotations::View</code> configuration instance for the provided ann_class at the provided index, or <code>nil</code> if no annotations of that type were found.</p> <p>Returns the last configuration instance by default.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#[]?(ann_class,index)","title":"<code>#[]?(ann_class : ::Athena::Framework::Controller::ValueResolvers::RequestBody::Extract.class, index : Int32 = -1) : Athena::Framework::Controller::ValueResolvers::RequestBody::ExtractConfiguration | Nil</code>","text":"<p>Returns the <code>::Athena::Framework::Controller::ValueResolvers::RequestBody::Extract</code> configuration instance for the provided ann_class at the provided index, or <code>nil</code> if no annotations of that type were found.</p> <p>Returns the last configuration instance by default.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#[]?(ann_class,index)","title":"<code>#[]?(ann_class : ::Athena::Framework::Controller::ValueResolvers::Time::Format.class, index : Int32 = -1) : Athena::Framework::Controller::ValueResolvers::Time::FormatConfiguration | Nil</code>","text":"<p>Returns the <code>::Athena::Framework::Controller::ValueResolvers::Time::Format</code> configuration instance for the provided ann_class at the provided index, or <code>nil</code> if no annotations of that type were found.</p> <p>Returns the last configuration instance by default.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#fetch_all(ann_class)","title":"<code>#fetch_all(ann_class : Athena::Framework::Annotations::View.class) : Array(ACF::AnnotationConfigurations::ConfigurationBase)</code>","text":"<p>Returns an array of <code>Athena::Framework::Annotations::View</code> configuration instances for the provided ann_class.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#fetch_all(ann_class)","title":"<code>#fetch_all(ann_class : ::Athena::Framework::Controller::ValueResolvers::RequestBody::Extract.class) : Array(ACF::AnnotationConfigurations::ConfigurationBase)</code>","text":"<p>Returns an array of <code>::Athena::Framework::Controller::ValueResolvers::RequestBody::Extract</code> configuration instances for the provided ann_class.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#fetch_all(ann_class)","title":"<code>#fetch_all(ann_class : ::Athena::Framework::Controller::ValueResolvers::Time::Format.class) : Array(ACF::AnnotationConfigurations::ConfigurationBase)</code>","text":"<p>Returns an array of <code>::Athena::Framework::Controller::ValueResolvers::Time::Format</code> configuration instances for the provided ann_class.</p> View source"},{"location":"Config/AnnotationConfigurations/#Athena::Config::AnnotationConfigurations#has?(ann_class)","title":"<code>#has?(ann_class : ACF::AnnotationConfigurations::Classes) : Bool</code>","text":"<p>Returns <code>true</code> if there are annotations of the provided ann_class, otherwise <code>false</code>.</p> View source"},{"location":"Config/AnnotationConfigurations/AnnotationHash/","title":"AnnotationHash","text":""},{"location":"Config/AnnotationConfigurations/AnnotationHash/#Athena::Config::AnnotationConfigurations::AnnotationHash","title":"alias <code>Athena::Config::AnnotationConfigurations::AnnotationHash</code>","text":"<p>The Hash type that will store the annotation configurations.</p> Alias definition <code>Hash(Athena::Framework::Annotations::View.class | Athena::Framework::Controller::ValueResolvers::RequestBody::Extract.class | Athena::Framework::Controller::ValueResolvers::Time::Format.class, Array(Athena::Config::AnnotationConfigurations::ConfigurationBase))</code>"},{"location":"Config/AnnotationConfigurations/Classes/","title":"Classes","text":""},{"location":"Config/AnnotationConfigurations/Classes/#Athena::Config::AnnotationConfigurations::Classes","title":"alias <code>Athena::Config::AnnotationConfigurations::Classes</code>","text":"<p>A union representing the possible annotation classes that could be applied to a type, method, or instance variable.</p> Alias definition <code>Athena::Framework::Annotations::View.class | Athena::Framework::Controller::ValueResolvers::RequestBody::Extract.class | Athena::Framework::Controller::ValueResolvers::Time::Format.class</code>"},{"location":"Config/AnnotationConfigurations/ConfigurationBase/","title":"ConfigurationBase","text":""},{"location":"Config/AnnotationConfigurations/ConfigurationBase/#Athena::Config::AnnotationConfigurations::ConfigurationBase","title":"abstract struct <code>Athena::Config::AnnotationConfigurations::ConfigurationBase</code> inherits <code>Struct</code>","text":"<p>Base type of annotation configuration objects registered via <code>Athena::Config.configuration_annotation</code>.</p>"},{"location":"Config/AnnotationConfigurations/ConfigurationBase/#Athena::Config::AnnotationConfigurations::ConfigurationBase-constructors","title":"Constructors","text":""},{"location":"Config/AnnotationConfigurations/ConfigurationBase/#Athena::Config::AnnotationConfigurations::ConfigurationBase.new","title":"<code>.new</code>","text":"View source"},{"location":"Config/AnnotationConfigurations/ConfigurationBase/#Athena::Config::AnnotationConfigurations::ConfigurationBase-methods","title":"Methods","text":""},{"location":"Config/AnnotationConfigurations/ConfigurationBase/#Athena::Config::AnnotationConfigurations::ConfigurationBase#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Config/Annotations/","title":"Annotations","text":""},{"location":"Config/Annotations/#Athena::Config::Annotations","title":"module <code>Athena::Config::Annotations</code>","text":""},{"location":"Config/Annotations/Resolvable/","title":"Resolvable","text":""},{"location":"Config/Annotations/Resolvable/#Athena::Config::Annotations::Resolvable","title":"annotation <code>Athena::Config::Annotations::Resolvable</code>","text":"<p>Used as a sorts of \"interface\" that other libraries can use to provide configuration type instances automatically. The Dependency Injection component is an example of this.</p> <p>The annotation should be provided a \"path\", either as the first positional argument, or via the <code>path</code> field, to the object from the <code>ACF::Base</code> instance.</p>"},{"location":"Config/Base/","title":"Base","text":""},{"location":"Config/Base/#Athena::Config::Base","title":"class <code>Athena::Config::Base</code> inherits <code>Reference</code>","text":"<p>The base type representing how various Athena components/features are configured.</p> <p>See <code>Athena::Config.config</code>.</p>"},{"location":"Config/Base/#Athena::Config::Base-methods","title":"Methods","text":""},{"location":"Config/Base/#Athena::Config::Base#routing","title":"<code>#routing : Athena::Framework::Config</code>","text":"<p>All configuration related to the <code>ART</code> component.</p> View source"},{"location":"Config/Parameters/","title":"Parameters","text":""},{"location":"Config/Parameters/#Athena::Config::Parameters","title":"class <code>Athena::Config::Parameters</code> inherits <code>Reference</code>","text":"<p>The base type containing various reusable configuration values, i.e. parameters.</p> <p>See <code>Athena::Config.parameters</code>.</p>"},{"location":"Config/Parameters/#Athena::Config::Parameters-methods","title":"Methods","text":""},{"location":"Config/Parameters/#Athena::Config::Parameters#framework","title":"<code>#framework : ATH::Parameters::Framework</code>","text":"View source"},{"location":"Config/Parameters/#Athena::Config::Parameters#routing","title":"<code>#routing : ATH::Parameters</code>","text":"View source"},{"location":"Console/","title":"Console","text":""},{"location":"Console/#Athena::Console","title":"module <code>Athena::Console</code>","text":"<p>Athena's Console component, <code>ACON</code> for short, allows for the creation of command-line based <code>ACON::Command</code>s. These commands could be used for any reoccurring task such as cron jobs, imports, etc. All commands belong to an <code>ACON::Application</code>, that can be extended to better fit a specific project's needs.</p> <p><code>Athena::Console</code> also provides various utility/helper features, including:</p> <ul> <li>Asking <code>ACON::Question</code>s</li> <li>Reusable output styles</li> <li>High level reusable formatting styles</li> <li>Testing abstractions</li> <li>Tab Completion</li> <li>Rendering <code>ACON::Helper::Table</code>s, <code>ACON::Helper::ProgressBar</code>s, or <code>ACON::Helper::ProgressIndicator</code>s.</li> </ul> <p>The console component best works in conjunction with a dedicated Crystal file that'll be used as the entry point. Ideally this file is compiled into a dedicated binary for use in production, but is invoked directly while developing. Otherwise, any changes made to the files it requires would not be represented. The most basic example would be:</p> <pre><code>#!/usr/bin/env crystal\n\n# Require the component and anything extra needed based on your business logic.\nrequire \"athena-console\"\n\n# Create an ACON::Application, passing it the name of your CLI.\n# Optionally accepts a second argument representing the version of the CLI.\napplication = ACON::Application.new \"My CLI\"\n\n# Add any commands defined externally,\n# or configure/customize the application as needed.\n\n# Run the application.\n# By default this uses STDIN and STDOUT for its input and output.\napplication.run\n</code></pre> <p>The shebang allows executing the file as a command without needing the <code>crystal</code> prefix. For example <code>./console list</code> would list all commands.</p> <p>External commands can be registered via <code>ACON::Application#add</code>:</p> <pre><code>application.add MyCommand.new\n</code></pre> <p>The <code>ACON::Application#register</code> method may also be used to define simpler/generic commands:</p> <pre><code>application.register \"foo\" do |input, output|\n  # Do stuff here.\n\n  # Denote that this command has finished successfully.\n  ACON::Command::Status::SUCCESS\nend\n</code></pre>"},{"location":"Console/#Athena::Console--getting-started","title":"Getting Started","text":"<p>If using this component outside of the Athena Framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-console:\n    github: athena-framework/console\n    version: ~&gt; 0.3.0\n</code></pre> <p>Then run <code>shards install</code>.</p> <p>From here you can then setup your entry point file talked about earlier, being sure to require the component via <code>require \"athena-console\"</code>. Finally, create/require your <code>ACON::Command</code>s, and customize the <code>ACON::Application</code> as needed.</p> <p>Tip</p> <p>If using this component with the <code>Athena::DependencyInjection</code> component, <code>ACON::Command</code> that have the <code>ADI::Register</code> annotation will automatically be registered as commands when using the <code>ADI::Console::Application</code> type.</p>"},{"location":"Console/#Athena::Console--console-completion","title":"Console Completion","text":"<p>Athena's completion script can be installed to provide auto tab completion out of the box for command and option names, and values in some cases. The script currently supports the shells: <code>bash</code> (also requires the <code>bash-completion</code> package). Run <code>./console completion --help</code> for installation instructions based on your shell.</p> <p>Note</p> <p>The completion script only needs to be installed once, but is specific to the binary used to generate it. E.g. <code>./console completion</code> would be scoped to the <code>console</code> binary, while <code>./myapp completion</code> would be scoped to <code>myapp</code>.</p> <p>Once installed, restart your terminal, and you should be good to go!</p> <p>Warning</p> <p>The completion script may only be used with real built binaries, not temporary ones such as <code>crystal run src/console.cr -- completion</code>. This is to ensure the performance of the script is sufficient, and to avoid any issues with the naming of the temporary binary.</p>"},{"location":"Console/#Athena::Console-constants","title":"Constants","text":""},{"location":"Console/#Athena::Console::VERSION","title":"<code>VERSION = \"0.3.4\"</code>","text":""},{"location":"Console/aliases/","title":"Aliases","text":""},{"location":"Console/aliases/#ACON","title":"alias <code>ACON</code>","text":"<p>Convenience alias to make referencing <code>Athena::Console</code> types easier.</p> Alias definition <code>Athena::Console</code>"},{"location":"Console/aliases/#ACONA","title":"alias <code>ACONA</code>","text":"<p>Convenience alias to make referencing <code>ACON::Annotations</code> types easier.</p> Alias definition <code>Athena::Console::Annotations</code>"},{"location":"Console/Annotations/","title":"Annotations","text":""},{"location":"Console/Annotations/#Athena::Console::Annotations","title":"module <code>Athena::Console::Annotations</code>","text":"<p>Contains all the <code>Athena::Console</code> based annotations.</p>"},{"location":"Console/Annotations/AsCommand/","title":"AsCommand","text":""},{"location":"Console/Annotations/AsCommand/#Athena::Console::Annotations::AsCommand","title":"annotation <code>Athena::Console::Annotations::AsCommand</code>","text":"<p>Annotation containing metadata related to an <code>ACON::Command</code>. This is the preferred way of configuring a command as it enables lazy command instantiation when used within the Athena framework. Checkout the external documentation for more information.</p> <pre><code>@[ACONA::AsCommand(\"add\", description: \"Sums two numbers, optionally making making the sum negative\")]\nclass AddCommand &lt; ACON::Command\n  # ...\nend\n</code></pre>"},{"location":"Console/Annotations/AsCommand/#Athena::Console::Annotations::AsCommand--configuration","title":"Configuration","text":"<p>Various fields can be used within this annotation to control various aspects of the command. All fields are optional unless otherwise noted.</p>"},{"location":"Console/Annotations/AsCommand/#Athena::Console::Annotations::AsCommand--name","title":"name","text":"<p>Type: <code>String</code> - required</p> <p>The name of the command. May be provided as either an explicit named argument, or the first positional argument. See <code>ACON::Command#name</code>.</p>"},{"location":"Console/Annotations/AsCommand/#Athena::Console::Annotations::AsCommand--description","title":"description","text":"<p>Type: <code>String</code></p> <p>A short sentence describing the function of the command. See <code>ACON::Command#description</code>.</p>"},{"location":"Console/Annotations/AsCommand/#Athena::Console::Annotations::AsCommand--hidden","title":"hidden","text":"<p>Type: <code>Bool</code></p> <p>If this command should be hidden from the command list. See <code>ACON::Command#hidden?</code>.</p>"},{"location":"Console/Annotations/AsCommand/#Athena::Console::Annotations::AsCommand--aliases","title":"aliases","text":"<p>Type: <code>Enumerable(String)</code></p> <p>Alternate names this command may be invoked by. See <code>ACON::Command#aliases</code>.</p>"},{"location":"Console/Application/","title":"Application","text":""},{"location":"Console/Application/#Athena::Console::Application","title":"class <code>Athena::Console::Application</code> inherits <code>Reference</code>","text":"<p>An <code>ACON::Application</code> is a container for a collection of multiple <code>ACON::Command</code>, and serves as the entry point of a CLI application.</p> <p>This class is optimized for a standard CLI environment; but it may be subclassed to provide a more specialized/customized entry point.</p>"},{"location":"Console/Application/#Athena::Console::Application--basic-usage","title":"Basic Usage","text":"<p>The console component best works in conjunction with a dedicated Crystal file that'll be used as the entry point. Ideally this file is compiled into a dedicated binary for use in production, but is invoked directly while developing. Otherwise, any changes made to the files it requires would not be represented. The most basic example would be:</p> <pre><code>#!/usr/bin/env crystal\n\n# Require the component and anything extra needed based on your business logic.\nrequire \"athena-console\"\n\n# Create an ACON::Application, passing it the name of your CLI.\n# Optionally accepts a second argument representing the version of the CLI.\napplication = ACON::Application.new \"My CLI\"\n\n# Add any commands defined externally,\n# or configure/customize the application as needed.\n\n# Run the application.\n# By default this uses STDIN and STDOUT for its input and output.\napplication.run\n</code></pre> <p>The shebang allows executing the file as a command without needing the <code>crystal</code> prefix. For example <code>./console list</code> would list all commands.</p> <p>External commands can be registered via <code>#add</code>:</p> <pre><code>application.add MyCommand.new\n</code></pre> <p>The <code>#register</code> method may also be used to define simpler/generic commands:</p> <pre><code>application.register \"foo\" do |input, output|\n  # Do stuff here.\n\n  # Denote that this command has finished successfully.\n  ACON::Command::Status::SUCCESS\nend\n</code></pre>"},{"location":"Console/Application/#Athena::Console::Application--default-command","title":"Default Command","text":"<p>The default command represents which command should be executed when no command name is provided; by default this is <code>ACON::Commands::List</code>. For example, running <code>./console</code> would result in all the available commands being listed. The default command can be customized via <code>#default_command</code>.</p>"},{"location":"Console/Application/#Athena::Console::Application--single-command-applications","title":"Single Command Applications","text":"<p>In some cases a CLI may only have one supported command in which passing the command's name each time is tedious. In such a case an application may be declared as a single command application via the optional second argument to <code>#default_command</code>. Passing <code>true</code> makes it so that any supplied arguments or options are passed to the default command.</p> <p>Warning</p> <p>Arguments and options passed to the default command are ignored when <code>#single_command?</code> is <code>false</code>.</p>"},{"location":"Console/Application/#Athena::Console::Application--custom-applications","title":"Custom Applications","text":"<p><code>ACON::Application</code> may also be extended in order to better fit a given application. For example, it could define some global custom styles, override the array of default commands, or customize the default input options, etc.</p> Direct known subclasses <code>Athena::DependencyInjection::Console::Application</code>"},{"location":"Console/Application/#Athena::Console::Application-constructors","title":"Constructors","text":""},{"location":"Console/Application/#Athena::Console::Application.new(name,version)","title":"<code>.new(name : String, version : String = \"0.1.0\") : self</code>","text":"View source"},{"location":"Console/Application/#Athena::Console::Application.new(name,version)","title":"<code>.new(name : String, version : SemanticVersion = SemanticVersion.new(0, 1, 0))</code>","text":"View source"},{"location":"Console/Application/#Athena::Console::Application-methods","title":"Methods","text":""},{"location":"Console/Application/#Athena::Console::Application#add(command)","title":"<code>#add(command : ACON::Command) : ACON::Command | Nil</code>","text":"<p>Adds the provided command instance to <code>self</code>, allowing it be executed.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#auto_exit=(auto_exit)","title":"<code>#auto_exit=(auto_exit : Bool)</code>","text":"<p>By default, the application will auto exit after executing a command. This method can be used to disable that functionality.</p> <p>If set to <code>false</code>, the <code>ACON::Command::Status</code> of the executed command is returned from <code>#run</code>. Otherwise the <code>#run</code> method never returns.</p> <pre><code>application = ACON::Application.new \"My CLI\"\napplication.auto_exit = false\nexit_status = application.run\nexit_status # =&gt; ACON::Command::Status::SUCCESS\n\napplication.auto_exit = true\nexit_status = application.run\n\n# This line is never reached.\nexit_status\n</code></pre> View source"},{"location":"Console/Application/#Athena::Console::Application#auto_exit?","title":"<code>#auto_exit? : Bool</code>","text":"<p>Returns if application should exit automatically after executing a command. See <code>#auto_exit=</code>.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#catch_exceptions=(catch_exceptions)","title":"<code>#catch_exceptions=(catch_exceptions : Bool)</code>","text":"<p>By default, the application will gracefully handle exceptions raised as part of the execution of a command by formatting and outputting it; including varying levels of information depending on the <code>ACON::Output::Verbosity</code> level used.</p> <p>If set to <code>false</code>, that logic is bypassed and the exception is bubbled up to where <code>#run</code> was invoked from.</p> <pre><code>application = ACON::Application.new \"My CLI\"\n\napplication.register \"foo\" do |input, output, command|\n  output.puts %(Hello #{input.argument \"name\"}!)\n\n  # Denote that this command has finished successfully.\n  ACON::Command::Status::SUCCESS\nend.argument(\"name\", :required)\n\napplication.default_command \"foo\", true\napplication.catch_exceptions = false\n\napplication.run # =&gt; Not enough arguments (missing: 'name'). (Athena::Console::Exceptions::ValidationFailed)\n</code></pre> View source"},{"location":"Console/Application/#Athena::Console::Application#catch_exceptions?","title":"<code>#catch_exceptions? : Bool</code>","text":"<p>Returns if the application should handle exceptions raised within the execution of a command. See <code>#catch_exceptions=</code>.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#command_loader=(command_loader)","title":"<code>#command_loader=(command_loader : ACON::Loader::Interface | Nil)</code>","text":"<p>Allows setting the <code>ACON::Loader::Interface</code> that should be used by <code>self</code>. See the related interface for more information.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#commands(namespace)","title":"<code>#commands(namespace : String | Nil = nil) : Hash(String, ACON::Command)</code>","text":"<p>Returns all commands within <code>self</code>, optionally only including the ones within the provided namespace. The keys of the returned hash represent the full command names, while the values are the command instances.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#complete(input,suggestions)","title":"<code>#complete(input : ACON::Completion::Input, suggestions : ACON::Completion::Suggestions) : Nil</code>","text":"<p>Determines what values should be added to the possible suggestions based on the provided input.</p> <p>By default this handles completing commands and options, but can be overridden if needed.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#default_command(name,single_command)","title":"<code>#default_command(name : String, single_command : Bool = false) : self</code>","text":"<p>Sets the default command to the command with the provided name.</p> <p>For example, executing the following console script via <code>./console</code> would result in <code>Hello world!</code> being printed instead of the default list output.</p> <pre><code>application = ACON::Application.new \"My CLI\"\n\napplication.register \"foo\" do |_, output|\n  output.puts \"Hello world!\"\n  ACON::Command::Status::SUCCESS\nend\n\napplication.default_command \"foo\"\n\napplication.run\n\n./console # =&gt; Hello world!\n</code></pre> <p>For example, executing the following console script via <code>./console George</code> would result in <code>Hello George!</code> being printed. If we tried this again without setting single_command to <code>true</code>, it would error saying `Command 'George' is not defined.</p> <pre><code>application = ACON::Application.new \"My CLI\"\n\napplication.register \"foo\" do |input, output, command|\n  output.puts %(Hello #{input.argument \"name\"}!)\n  ACON::Command::Status::SUCCESS\nend.argument(\"name\", :required)\n\napplication.default_command \"foo\", true\n\napplication.run\n</code></pre> View source"},{"location":"Console/Application/#Athena::Console::Application#definition","title":"<code>#definition : ACON::Input::Definition</code>","text":"<p>Returns the <code>ACON::Input::Definition</code> associated with <code>self</code>. See the related type for more information.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#definition=(definition)","title":"<code>#definition=(definition : ACON::Input::Definition)</code>","text":"<p>Sets the definition that should be used by <code>self</code>. See the related type for more information.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#each_command(namespace,&)","title":"<code>#each_command(namespace : String | Nil = nil, &amp; : ACON::Command -&gt; Nil) : Nil</code>","text":"<p>Yields each command within <code>self</code>, optionally only yields those within the provided namespace.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#find(name)","title":"<code>#find(name : String) : ACON::Command</code>","text":"<p>Returns the <code>ACON::Command</code> with the provided name, which can either be the full name, an abbreviation, or an alias. This method will attempt to find the best match given an abbreviation of a name or alias.</p> <p>Raises an <code>ACON::Exceptions::CommandNotFound</code> exception when the provided name is incorrect or ambiguous.</p> <p>ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Console/Application/#Athena::Console::Application#find_namespace(name)","title":"<code>#find_namespace(name : String) : String</code>","text":"<p>Returns the full name of a registered namespace with the provided name, which can either be the full name or an abbreviation.</p> <p>Raises an <code>ACON::Exceptions::NamespaceNotFound</code> exception when the provided name is incorrect or ambiguous.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#get(name)","title":"<code>#get(name : String) : ACON::Command</code>","text":"<p>Returns the <code>ACON::Command</code> with the provided name.</p> <p>Raises an <code>ACON::Exceptions::CommandNotFound</code> exception when a command with the provided name does not exist.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#has?(name)","title":"<code>#has?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if a command with the provided name exists, otherwise <code>false</code>.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#help","title":"<code>#help : String</code>","text":"<p>By default this is the same as <code>#long_version</code>, but can be overridden to provide more in-depth help/usage instructions for <code>self</code>.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#helper_set","title":"<code>#helper_set : ACON::Helper::HelperSet</code>","text":"<p>Returns/sets the <code>ACON::Helper::HelperSet</code> associated with <code>self</code>.</p> <p>The default helper set includes:</p> <ul> <li><code>ACON::Helper::Formatter</code></li> <li><code>ACON::Helper::Question</code></li> </ul> View source"},{"location":"Console/Application/#Athena::Console::Application#helper_set=(helper_set)","title":"<code>#helper_set=(helper_set : ACON::Helper::HelperSet)</code>","text":"<p>Returns/sets the <code>ACON::Helper::HelperSet</code> associated with <code>self</code>.</p> <p>The default helper set includes:</p> <ul> <li><code>ACON::Helper::Formatter</code></li> <li><code>ACON::Helper::Question</code></li> </ul> View source"},{"location":"Console/Application/#Athena::Console::Application#long_version","title":"<code>#long_version : String</code>","text":"<p>Returns the <code>#name</code> and <code>#version</code> of the application. Used when the <code>-V</code> or <code>--version</code> option is passed.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#name","title":"<code>#name : String</code>","text":"<p>Returns the name of this CLI application.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#namespaces","title":"<code>#namespaces : Array(String)</code>","text":"<p>Returns all unique namespaces used by currently registered commands, excluding the global namespace.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#register(name,&)","title":"<code>#register(name : String, &amp;block : ACON::Input::Interface, ACON::Output::Interface, ACON::Command -&gt; ACON::Command::Status) : ACON::Command</code>","text":"<p>Creates and <code>#add</code>s an <code>ACON::Command</code> with the provided name; executing the block when the command is invoked.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#run(input,output)","title":"<code>#run(input : ACON::Input::Interface = ACON::Input::ARGV.new, output : ACON::Output::Interface = ACON::Output::ConsoleOutput.new) : ACON::Command::Status | NoReturn</code>","text":"<p>Runs the current application, optionally with the provided input and output.</p> <p>Returns the <code>ACON::Command::Status</code> of the related command execution if <code>#auto_exit?</code> is <code>false</code>. Will gracefully handle exceptions raised within the command execution unless <code>#catch_exceptions?</code> is <code>false</code>.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#single_command?","title":"<code>#single_command? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> only supports a single command. See Single Command Applications for more information.</p> View source"},{"location":"Console/Application/#Athena::Console::Application#version","title":"<code>#version : SemanticVersion</code>","text":"<p>Returns the version of this CLI application.</p> View source"},{"location":"Console/Command/","title":"Command","text":""},{"location":"Console/Command/#Athena::Console::Command","title":"abstract class <code>Athena::Console::Command</code> inherits <code>Reference</code>","text":"<p>An <code>ACON::Command</code> represents a concrete command that can be invoked via the CLI. All commands should inherit from this base type, but additional abstract subclasses can be used to share common logic for related command classes.</p>"},{"location":"Console/Command/#Athena::Console::Command--creating-a-command","title":"Creating a Command","text":"<p>A command is defined by extending <code>ACON::Command</code> and implementing the <code>#execute</code> method. For example:</p> <pre><code>@[ACONA::AsCommand(\"app:create-user\")]\nclass CreateUserCommand &lt; ACON::Command\n  protected def configure : Nil\n    # ...\n  end\n\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    # Implement all the business logic here.\n\n    # Indicates the command executed successfully.\n    ACON::Command::Status::SUCCESS\n  end\nend\n</code></pre>"},{"location":"Console/Command/#Athena::Console::Command--command-lifecycle","title":"Command Lifecycle","text":"<p>Commands have three lifecycle methods that are invoked when running the command:</p> <ol> <li><code>setup</code> (optional) - Executed before <code>#interact</code> and <code>#execute</code>. Can be used to setup state based on input data.</li> <li><code>interact</code> (optional) - Executed after <code>#setup</code> but before <code>#execute</code>. Can be used to check if any arguments/options are missing and interactively ask the user for those values. After this method, missing arguments/options will result in an error.</li> <li><code>execute</code> (required) - Contains the business logic for the command, returning the status of the invocation via <code>ACON::Command::Status</code>.</li> </ol> <pre><code>@[ACONA::AsCommand(\"app:create-user\")]\nclass CreateUserCommand &lt; ACON::Command\n  protected def configure : Nil\n    # ...\n  end\n\n  protected def setup(input : ACON::Input::Interface, output : ACON::Output::Interface) : Nil\n    # ...\n  end\n\n  protected def interact(input : ACON::Input::Interface, output : ACON::Output::Interface) : Nil\n    # ...\n  end\n\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    # Indicates the command executed successfully.\n    ACON::Command::Status::SUCCESS\n  end\nend\n</code></pre>"},{"location":"Console/Command/#Athena::Console::Command--configuring-the-command","title":"Configuring the Command","text":"<p>In most cases, a command is going to need to be configured to better fit its purpose. The <code>#configure</code> method can be used configure various aspects of the command, such as its name, description, <code>ACON::Input</code>s, help message, aliases, etc.</p> <pre><code>protected def configure : Nil\n  self\n    .help(\"Creates a user...\") # Shown when running the command with the `--help` option\n    .aliases(\"new-user\")       # Alternate names for the command\n    .hidden                    # Hide the command from the list\n  # ...\nend\n</code></pre> <p>Tip</p> <p>The suggested way of setting the name and description of the command is via the <code>ACONA::AsCommand</code> annotation. This enables lazy command instantiation when used within the Athena framework. Checkout the external documentation for more information.</p> <p>The <code>#configure</code> command is called automatically at the end of the constructor method. If your command defines its own, be sure to call <code>super()</code> to also run the parent constructor. <code>super</code> may also be called after setting the properties if they should be used to determine how to configure the command.</p> <pre><code>class CreateUserCommand &lt; ACON::Command\n  def initialize(@require_password : Bool = false)\n    super()\n  end\n\n  protected def configure : Nil\n    self\n      .argument(\"password\", @require_password ? ACON::Input::Argument::Mode::REQUIRED : ACON::Input::Argument::Mode::OPTIONAL)\n  end\nend\n</code></pre>"},{"location":"Console/Command/#Athena::Console::Command--output","title":"Output","text":"<p>The <code>#execute</code> method has access to an <code>ACON::Output::Interface</code> instance that can be used to write messages to display. The <code>output</code> parameter should be used instead of <code>#puts</code> or <code>#print</code> to decouple the command from <code>STDOUT</code>.</p> <pre><code>protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n  # outputs multiple lines to the console (adding \"\\n\" at the end of each line)\n  output.puts([\n    \"User Creator\",\n    \"============\",\n    \"\",\n  ])\n\n  # outputs a message followed by a \"\\n\"\n  output.puts \"Whoa!\"\n\n  # outputs a message without adding a \"\\n\" at the end of the line\n  output.print \"You are about to \"\n  output.print \"create a user.\"\n\n  ACON::Command::Status::SUCCESS\nend\n</code></pre> <p>See <code>ACON::Output::Interface</code> for more information.</p>"},{"location":"Console/Command/#Athena::Console::Command--input","title":"Input","text":"<p>In most cases, a command is going to have some sort of input arguments/options. These inputs can be setup in the <code>#configure</code> method, and accessed via the input parameter within <code>#execute</code>.</p> <pre><code>protected def configure : Nil\n  self\n    .argument(\"username\", :required, \"The username of the user\")\nend\n\nprotected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n  # Retrieve the username as a String?\n  output.puts %(Hello #{input.argument \"username\"}!)\n\n  ACON::Command::Status::SUCCESS\nend\n</code></pre> <p>See <code>ACON::Input::Interface</code> for more information.</p>"},{"location":"Console/Command/#Athena::Console::Command--testing-the-command","title":"Testing the Command","text":"<p><code>Athena::Console</code> also includes a way to test your console commands without needing to build and run a binary. A single command can be tested via an <code>ACON::Spec::CommandTester</code> and a whole application can be tested via an <code>ACON::Spec::ApplicationTester</code>.</p> <p>See <code>ACON::Spec</code> for more information.</p> Direct known subclasses <code>Athena::Console::Commands::DumpCompletion</code> <code>Athena::Console::Commands::Generic</code> <code>Athena::Console::Commands::Help</code> <code>Athena::Console::Commands::List</code> <code>Athena::Framework::Commands::DebugEventDispatcher</code> <code>Athena::Framework::Commands::DebugRouter</code> <code>Athena::Framework::Commands::DebugRouterMatch</code>"},{"location":"Console/Command/#Athena::Console::Command-constructors","title":"Constructors","text":""},{"location":"Console/Command/#Athena::Console::Command.new(name)","title":"<code>.new(name : String | Nil = nil)</code>","text":"View source"},{"location":"Console/Command/#Athena::Console::Command-class-methods","title":"Class methods","text":""},{"location":"Console/Command/#Athena::Console::Command.default_description","title":"<code>.default_description : String | ::Nil</code>","text":"<p>Returns the default description of <code>self</code>, or <code>nil</code> if it was not set.</p> View source"},{"location":"Console/Command/#Athena::Console::Command.default_name","title":"<code>.default_name : String | ::Nil</code>","text":"<p>Returns the default name of <code>self</code>, or <code>nil</code> if it was not set.</p> View source"},{"location":"Console/Command/#Athena::Console::Command-methods","title":"Methods","text":""},{"location":"Console/Command/#Athena::Console::Command#aliases(aliases)","title":"<code>#aliases(aliases : Enumerable(String)) : self</code>","text":"<p>Sets the aliases of <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#aliases","title":"<code>#aliases : Array(String)</code>","text":"<p>Returns/sets the list of aliases that may also be used to execute <code>self</code> in addition to its <code>#name</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#aliases(*)","title":"<code>#aliases(*aliases : String) : self</code>","text":"<p>Sets the aliases of <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#aliases=(aliases)","title":"<code>#aliases=(aliases : Array(String))</code>","text":"<p>Returns/sets the list of aliases that may also be used to execute <code>self</code> in addition to its <code>#name</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#application","title":"<code>#application : ACON::Application</code>","text":"<p>Returns the <code>ACON::Application</code> associated with <code>self</code>, otherwise <code>nil</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#application=(application)","title":"<code>#application=(application : ACON::Application | Nil) : Nil</code>","text":"View source"},{"location":"Console/Command/#Athena::Console::Command#application?","title":"<code>#application? : ACON::Application | ::Nil</code>","text":"<p>Returns the <code>ACON::Application</code> associated with <code>self</code>, otherwise <code>nil</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#argument(name,mode,description,default,suggested_values)","title":"<code>#argument(name : String, mode : ACON::Input::Argument::Mode = :optional, description : String = \"\", default = nil, suggested_values : Enumerable(String) | Nil = nil) : self</code>","text":"<p>Adds an <code>ACON::Input::Argument</code> to <code>self</code> with the provided name. Optionally supports setting its mode, description, default value, and suggested_values.</p> <p>Also checkout the value completion for how argument values can be auto completed.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#argument(name,mode,description,default,&)","title":"<code>#argument(name : String, mode : ACON::Input::Argument::Mode = :optional, description : String = \"\", default = nil, &amp;suggested_values : ACON::Completion::Input -&gt; Array(String)) : self</code>","text":"<p>Adds an <code>ACON::Input::Argument</code> to this command with the provided name. Optionally supports setting its mode, description, default value.</p> <p>Accepts a block to use to determine this argument's suggested values. Also checkout the value completion for how argument values can be auto completed.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#complete(input,suggestions)","title":"<code>#complete(input : ACON::Completion::Input, suggestions : ACON::Completion::Suggestions) : Nil</code>","text":"<p>Determines what values should be added to the possible suggestions based on the provided input.</p> <p>By default this will fall back on completion of the related input argument/option, but can be overridden if needed.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#definition(definition)","title":"<code>#definition(definition : Array(ACON::Input::Argument | ACON::Input::Option)) : self</code>","text":"<p>Sets the <code>ACON::Input::Definition</code> on self.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#definition(definition)","title":"<code>#definition(definition : ACON::Input::Definition) : self</code>","text":"<p>Sets the <code>ACON::Input::Definition</code> on self.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#definition","title":"<code>#definition : ACON::Input::Definition</code>","text":"View source"},{"location":"Console/Command/#Athena::Console::Command#definition(*)","title":"<code>#definition(*definitions : ACON::Input::Argument | ACON::Input::Option) : self</code>","text":"<p>Sets the <code>ACON::Input::Definition</code> on self.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#description(description)","title":"<code>#description(description : String) : self</code>","text":"<p>Sets the <code>#description</code> of <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#description","title":"<code>#description : String</code>","text":"<p>Returns the <code>description of</code>self`.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#enabled?","title":"<code>#enabled? : Bool</code>","text":"<p>Returns if <code>self</code> is enabled in the current environment.</p> <p>Can be overridden to return <code>false</code> if it cannot run under the current conditions.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#help(help)","title":"<code>#help(help : String) : self</code>","text":"<p>Sets the <code>#help</code> of <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#help","title":"<code>#help : String</code>","text":"<p>Returns/sets the help template for <code>self</code>.</p> <p>See <code>#processed_help</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#help=(help)","title":"<code>#help=(help : String)</code>","text":"<p>Returns/sets the help template for <code>self</code>.</p> <p>See <code>#processed_help</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#helper(helper_class)","title":"<code>#helper(helper_class : T.class) : T forall T</code>","text":"<p>Returns an <code>ACON:Helper::Interface</code> of the provided helper_class.</p> <pre><code>formatter = self.helper ACON::Helper::Formatter\n# ...\n</code></pre> View source"},{"location":"Console/Command/#Athena::Console::Command#helper_set","title":"<code>#helper_set : ACON::Helper::HelperSet | ::Nil</code>","text":"<p>Returns/sets an <code>ACON::Helper::HelperSet</code> on <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#helper_set=(helper_set)","title":"<code>#helper_set=(helper_set : ACON::Helper::HelperSet | Nil)</code>","text":"<p>Returns/sets an <code>ACON::Helper::HelperSet</code> on <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#hidden(hidden)","title":"<code>#hidden(hidden : Bool = true) : self</code>","text":"<p>Hides <code>self</code> from the command list.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#hidden?","title":"<code>#hidden? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> is hidden from the command list, otherwise <code>false</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#ignore_validation_errors","title":"<code>#ignore_validation_errors : Nil</code>","text":"<p>Makes the command ignore any input validation errors.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#name(name)","title":"<code>#name(name : String) : self</code>","text":"View source"},{"location":"Console/Command/#Athena::Console::Command#name","title":"<code>#name : String</code>","text":"<p>Returns the name of <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#name?","title":"<code>#name? : String | ::Nil</code>","text":"<p>Returns the name of <code>self</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#option(name,shortcut,value_mode,description,default,suggested_values)","title":"<code>#option(name : String, shortcut : String | Nil = nil, value_mode : ACON::Input::Option::Value = :none, description : String = \"\", default = nil, suggested_values : Enumerable(String) | Nil = nil) : self</code>","text":"<p>Adds an <code>ACON::Input::Option</code> to <code>self</code> with the provided name. Optionally supports setting its shortcut, value_mode, description, and default value.</p> <p>Also checkout the value completion for how option values can be auto completed.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#option(name,shortcut,value_mode,description,default,&)","title":"<code>#option(name : String, shortcut : String | Nil = nil, value_mode : ACON::Input::Option::Value = :none, description : String = \"\", default = nil, &amp;suggested_values : ACON::Completion::Input -&gt; Array(String)) : self</code>","text":"<p>Adds an <code>ACON::Input::Option</code> to <code>self</code> with the provided name. Optionally supports setting its shortcut, value_mode, description, and default value.</p> <p>Accepts a block to use to determine this argument's suggested values. Also checkout the value completion for how option values can be auto completed.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#process_title(title)","title":"<code>#process_title(title : String) : self</code>","text":"<p>Sets the process title of <code>self</code>.</p> <p>Todo</p> <p>Implement this.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#processed_help","title":"<code>#processed_help : String</code>","text":"<p>The <code>#help</code> message can include some template variables for the command:</p> <ul> <li><code>%command.name%</code> - Returns the <code>#name</code> of <code>self</code>. E.g. <code>app:create-user</code></li> </ul> <p>This method returns the <code>#help</code> message with these variables replaced.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#run(input,output)","title":"<code>#run(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status</code>","text":"<p>Runs the command with the provided input and output, returning the status of the invocation as an <code>ACON::Command::Status</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#synopsis(short)","title":"<code>#synopsis(short : Bool = false) : String</code>","text":"<p>Returns a short synopsis of <code>self</code>, including its <code>#name</code> and expected arguments/options. For example <code>app:user-create [--dry-run] [--] &lt;username&gt;</code>.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#usage(usage)","title":"<code>#usage(usage : String) : self</code>","text":"<p>Adds a usage string that will displayed within the <code>Usage</code> section after the auto generated entry.</p> View source"},{"location":"Console/Command/#Athena::Console::Command#usages","title":"<code>#usages : Array(String)</code>","text":"<p>Returns the list of usages for <code>self</code>.</p> <p>See <code>#usage</code>.</p> View source"},{"location":"Console/Command/Status/","title":"Status","text":""},{"location":"Console/Command/Status/#Athena::Console::Command::Status","title":"enum <code>Athena::Console::Command::Status</code>","text":"<p>Represents the execution status of an <code>ACON::Command</code>.</p> <p>The value of each member is used as the exit code of the invocation.</p>"},{"location":"Console/Command/Status/#Athena::Console::Command::Status-members","title":"Members","text":""},{"location":"Console/Command/Status/#Athena::Console::Command::Status::SUCCESS","title":"<code>SUCCESS = 0</code>","text":"<p>Represents a successful invocation with no errors.</p>"},{"location":"Console/Command/Status/#Athena::Console::Command::Status::FAILURE","title":"<code>FAILURE = 1</code>","text":"<p>Represents that some error happened during invocation.</p>"},{"location":"Console/Command/Status/#Athena::Console::Command::Status::INVALID","title":"<code>INVALID = 2</code>","text":"<p>Represents the command was not used correctly, such as invalid options or missing arguments.</p>"},{"location":"Console/Command/Status/#Athena::Console::Command::Status-methods","title":"Methods","text":""},{"location":"Console/Command/Status/#Athena::Console::Command::Status#failure?","title":"<code>#failure?</code>","text":"View source"},{"location":"Console/Command/Status/#Athena::Console::Command::Status#invalid?","title":"<code>#invalid?</code>","text":"View source"},{"location":"Console/Command/Status/#Athena::Console::Command::Status#success?","title":"<code>#success?</code>","text":"View source"},{"location":"Console/Commands/","title":"Commands","text":""},{"location":"Console/Commands/#Athena::Console::Commands","title":"module <code>Athena::Console::Commands</code>","text":"<p>Includes the commands that come bundled with <code>Athena::Console</code>.</p>"},{"location":"Console/Commands/DumpCompletion/","title":"DumpCompletion","text":""},{"location":"Console/Commands/DumpCompletion/#Athena::Console::Commands::DumpCompletion","title":"class <code>Athena::Console::Commands::DumpCompletion</code> inherits <code>Athena::Console::Command</code>","text":"<p>Can be used to generate the completion script to enable argument/option value completion.</p> <p>See the related docs for more information.</p>"},{"location":"Console/Commands/Generic/","title":"Generic","text":""},{"location":"Console/Commands/Generic/#Athena::Console::Commands::Generic","title":"class <code>Athena::Console::Commands::Generic</code> inherits <code>Athena::Console::Command</code>","text":"<p>A generic implementation of <code>ACON::Command</code> that is instantiated with a block that will be executed as part of the <code>#execute</code> method.</p> <p>This is the command class used as part of <code>ACON::Application#register</code>.</p>"},{"location":"Console/Commands/Generic/#Athena::Console::Commands::Generic-constructors","title":"Constructors","text":""},{"location":"Console/Commands/Generic/#Athena::Console::Commands::Generic.new(name,&)","title":"<code>.new(name : String, &amp;callback : ACON::Commands::Generic::Proc)</code>","text":"View source"},{"location":"Console/Commands/Generic/Proc/","title":"Proc","text":""},{"location":"Console/Commands/Generic/Proc/#Athena::Console::Commands::Generic::Proc","title":"alias <code>Athena::Console::Commands::Generic::Proc</code>","text":"Alias definition <code>Athena::Console::Input::Interface, Athena::Console::Output::Interface, Athena::Console::Command -&gt; Athena::Console::Command::Status</code>"},{"location":"Console/Commands/Help/","title":"Help","text":""},{"location":"Console/Commands/Help/#Athena::Console::Commands::Help","title":"class <code>Athena::Console::Commands::Help</code> inherits <code>Athena::Console::Command</code>","text":"<p>Displays information for a given command.</p>"},{"location":"Console/Commands/List/","title":"List","text":""},{"location":"Console/Commands/List/#Athena::Console::Commands::List","title":"class <code>Athena::Console::Commands::List</code> inherits <code>Athena::Console::Command</code>","text":"<p>Lists the available commands, optionally only including those in a specific namespace.</p>"},{"location":"Console/Completion/","title":"Completion","text":""},{"location":"Console/Completion/#Athena::Console::Completion","title":"module <code>Athena::Console::Completion</code>","text":"<p>Includes types related to Athena's tab completion features.</p>"},{"location":"Console/Completion/Input/","title":"Input","text":""},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input","title":"class <code>Athena::Console::Completion::Input</code> inherits <code>Athena::Console::Input::ARGV</code>","text":"<p>A specialization of <code>ACON::Input::ARGV</code> that allows for unfinished name/values. Exposes information about the name, type, and value of the value/name being completed.</p>"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input-constructors","title":"Constructors","text":""},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input.from_string(input,current_index)","title":"<code>.from_string(input : String, current_index : Int32) : self</code>","text":"View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input.from_tokens(tokens,current_index)","title":"<code>.from_tokens(tokens : Array(String), current_index : Int32) : self</code>","text":"View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input-methods","title":"Methods","text":""},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input#bind(definition)","title":"<code>#bind(definition : ACON::Input::Definition) : Nil</code>","text":"<p>:inherit:</p> <p>ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input#completion_name","title":"<code>#completion_name : String | ::Nil</code>","text":"<p>Returns the name of the argument/option when completing a value.</p> View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input#completion_type","title":"<code>#completion_type : ACON::Completion::Input::Type</code>","text":"<p>Returns which type of completion is required.</p> View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input#completion_value","title":"<code>#completion_value : String</code>","text":"<p>Returns the value typed by the user, or empty string.</p> View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input#must_suggest_argument_values_for?(argument_name)","title":"<code>#must_suggest_argument_values_for?(argument_name : String) : Bool</code>","text":"<p>Returns <code>true</code> if this input is able to suggest values for the provided argument_name.</p> View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input#must_suggest_values_for?(option_name)","title":"<code>#must_suggest_values_for?(option_name : String) : Bool</code>","text":"<p>Returns <code>true</code> if this input is able to suggest values for the provided option_name.</p> View source"},{"location":"Console/Completion/Input/#Athena::Console::Completion::Input#relevant_token","title":"<code>#relevant_token : String</code>","text":"<p>Returns the current token of the cursor, or last token if the cursor is at the end of the input.</p> View source"},{"location":"Console/Completion/Input/Type/","title":"Type","text":""},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type","title":"enum <code>Athena::Console::Completion::Input::Type</code>","text":""},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type-members","title":"Members","text":""},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type::NONE","title":"<code>NONE = 0</code>","text":"<p>Nothing should be completed.</p>"},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type::ARGUMENT_VALUE","title":"<code>ARGUMENT_VALUE = 1</code>","text":"<p>Completing the value of an argument.</p>"},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type::OPTION_VALUE","title":"<code>OPTION_VALUE = 2</code>","text":"<p>Completing the value of an option.</p>"},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type::OPTION_NAME","title":"<code>OPTION_NAME = 3</code>","text":"<p>Completing the name of an option.</p>"},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type-methods","title":"Methods","text":""},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type#argument_value?","title":"<code>#argument_value?</code>","text":"View source"},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type#none?","title":"<code>#none?</code>","text":"View source"},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type#option_name?","title":"<code>#option_name?</code>","text":"View source"},{"location":"Console/Completion/Input/Type/#Athena::Console::Completion::Input::Type#option_value?","title":"<code>#option_value?</code>","text":"View source"},{"location":"Console/Completion/Suggestions/","title":"Suggestions","text":""},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions","title":"class <code>Athena::Console::Completion::Suggestions</code> inherits <code>Reference</code>","text":"<p>Stores all the suggested values/options for the current <code>ACON::Completion::Input</code>.</p>"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions-methods","title":"Methods","text":""},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggest_option(option)","title":"<code>#suggest_option(option : ACON::Input::Option) : self</code>","text":"<p>Adds the provided option to <code>#suggested_options</code>.</p> View source"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggest_options(options)","title":"<code>#suggest_options(options : Enumerable(ACON::Input::Option)) : self</code>","text":"<p>Adds each of the provided options to <code>#suggested_options</code>.</p> View source"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggest_value(value,description)","title":"<code>#suggest_value(value : String, description : String = \"\") : self</code>","text":"<p>Adds the provided value, and optional description to <code>#suggested_values</code>.</p> View source"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggest_value(value)","title":"<code>#suggest_value(value : ACON::Completion::Suggestions::SuggestedValue) : self</code>","text":"<p>Adds the provided value to <code>#suggested_values</code>.</p> View source"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggest_values(values)","title":"<code>#suggest_values(values : Enumerable(String)) : self</code>","text":"<p>Adds each of the provided values to <code>#suggested_values</code>.</p> View source"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggest_values(*)","title":"<code>#suggest_values(*values : String) : self</code>","text":"<p>Adds each of the provided values to <code>#suggested_values</code>.</p> View source"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggested_options","title":"<code>#suggested_options</code>","text":"<p>Returns an array of the suggested <code>ACON::Input::Option</code>s.</p> View source"},{"location":"Console/Completion/Suggestions/#Athena::Console::Completion::Suggestions#suggested_values","title":"<code>#suggested_values</code>","text":"<p>Returns an array of the <code>ACON::Completion::Suggestions::SuggestedValue</code>s.</p> View source"},{"location":"Console/Completion/Suggestions/SuggestedValue/","title":"SuggestedValue","text":""},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue","title":"struct <code>Athena::Console::Completion::Suggestions::SuggestedValue</code> inherits <code>Struct</code>","text":"<p>Represents a single suggested values, plus optional description.</p>"},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue-constructors","title":"Constructors","text":""},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue.new(value,description)","title":"<code>.new(value : String, description : String = \"\")</code>","text":"View source"},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue-methods","title":"Methods","text":""},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue#clone","title":"<code>#clone</code>","text":"View source"},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue#copy_with(value,description)","title":"<code>#copy_with(value _value = @value, description _description = @description)</code>","text":"View source"},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue#description","title":"<code>#description : String</code>","text":""},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue#to_s(io)","title":"<code>#to_s(io : IO) : Nil</code>","text":"<p>Same as <code>#inspect(io)</code>.</p> View source"},{"location":"Console/Completion/Suggestions/SuggestedValue/#Athena::Console::Completion::Suggestions::SuggestedValue#value","title":"<code>#value : String</code>","text":""},{"location":"Console/Cursor/","title":"Cursor","text":""},{"location":"Console/Cursor/#Athena::Console::Cursor","title":"struct <code>Athena::Console::Cursor</code> inherits <code>Struct</code>","text":"<p>Provides an OO way to interact with the console window, allows writing on any position of the output.</p> <pre><code>@[ACONA::AsCommand(\"cursor\")]\nclass CursorCommand &lt; ACON::Command\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    cursor = ACON::Cursor.new output\n\n    # Move the cursor to a specific column, row position.\n    cursor.move_to_position 50, 3\n\n    # Write text at that location.\n    output.puts \"Hello!\"\n\n    # Clear the current line.\n    cursor.clear_line\n\n    ACON::Command::Status::SUCCESS\n  end\nend\n</code></pre>"},{"location":"Console/Cursor/#Athena::Console::Cursor-constructors","title":"Constructors","text":""},{"location":"Console/Cursor/#Athena::Console::Cursor.new(output,input)","title":"<code>.new(output : ACON::Output::Interface, input : IO | Nil = nil)</code>","text":"View source"},{"location":"Console/Cursor/#Athena::Console::Cursor-methods","title":"Methods","text":""},{"location":"Console/Cursor/#Athena::Console::Cursor#clear_line","title":"<code>#clear_line : self</code>","text":"<p>Clears the current line.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#clear_line_after","title":"<code>#clear_line_after : self</code>","text":"<p>Clears the current line after the cursor's current position.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#clear_output","title":"<code>#clear_output : self</code>","text":"<p>Clears the output from the cursors' current position to the end of the screen.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#clear_screen","title":"<code>#clear_screen : self</code>","text":"<p>Clears the entire screen.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#current_position","title":"<code>#current_position : ::Tuple(Int32, Int32)</code>","text":"<p>Returns the current column, row position of the cursor.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#hide","title":"<code>#hide : self</code>","text":"<p>Hides the cursor.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#move_down(lines)","title":"<code>#move_down(lines : Int32 = 1) : self</code>","text":"<p>Moves the cursor down lines lines.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#move_left(lines)","title":"<code>#move_left(lines : Int32 = 1) : self</code>","text":"<p>Moves the cursor left lines lines.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#move_right(lines)","title":"<code>#move_right(lines : Int32 = 1) : self</code>","text":"<p>Moves the cursor right lines lines.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#move_to_column(column)","title":"<code>#move_to_column(column : Int32) : self</code>","text":"<p>Moves the cursor to the provided column.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#move_to_position(column,row)","title":"<code>#move_to_position(column : Int32, row : Int32) : self</code>","text":"<p>Moves the cursor to the provided column, row position.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#move_up(lines)","title":"<code>#move_up(lines : Int32 = 1) : self</code>","text":"<p>Moves the cursor up lines lines.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#restore_position","title":"<code>#restore_position : self</code>","text":"<p>Restores the position set via <code>#save_position</code>.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#save_position","title":"<code>#save_position : self</code>","text":"<p>Saves the current position such that it could be restored via <code>#restore_position</code>.</p> View source"},{"location":"Console/Cursor/#Athena::Console::Cursor#show","title":"<code>#show : self</code>","text":"<p>Shows the cursor.</p> View source"},{"location":"Console/Exceptions/","title":"Exceptions","text":""},{"location":"Console/Exceptions/#Athena::Console::Exceptions","title":"module <code>Athena::Console::Exceptions</code>","text":"<p>Contains all custom exceptions defined within <code>Athena::Console</code>.</p>"},{"location":"Console/Exceptions/CommandNotFound/","title":"CommandNotFound","text":""},{"location":"Console/Exceptions/CommandNotFound/#Athena::Console::Exceptions::CommandNotFound","title":"class <code>Athena::Console::Exceptions::CommandNotFound</code> inherits <code>Athena::Console::Exceptions::ConsoleException</code>","text":"Direct known subclasses <code>Athena::Console::Exceptions::NamespaceNotFound</code>"},{"location":"Console/Exceptions/CommandNotFound/#Athena::Console::Exceptions::CommandNotFound-constructors","title":"Constructors","text":""},{"location":"Console/Exceptions/CommandNotFound/#Athena::Console::Exceptions::CommandNotFound.new(message,alternatives,code,cause)","title":"<code>.new(message : String, alternatives : Array(String) = [] of String, code : Int32 = 0, cause : Exception | Nil = nil)</code>","text":"View source"},{"location":"Console/Exceptions/CommandNotFound/#Athena::Console::Exceptions::CommandNotFound-methods","title":"Methods","text":""},{"location":"Console/Exceptions/CommandNotFound/#Athena::Console::Exceptions::CommandNotFound#alternatives","title":"<code>#alternatives : Array(String)</code>","text":"View source"},{"location":"Console/Exceptions/ConsoleException/","title":"ConsoleException","text":""},{"location":"Console/Exceptions/ConsoleException/#Athena::Console::Exceptions::ConsoleException","title":"abstract class <code>Athena::Console::Exceptions::ConsoleException</code> inherits <code>Exception</code>","text":"<p>Base class of all <code>ACON::Exceptions</code>.</p> <p>Exposes a <code>#code</code> method that represents the exit code of a command invocation.</p> Direct known subclasses <code>Athena::Console::Exceptions::CommandNotFound</code> <code>Athena::Console::Exceptions::InvalidArgument</code> <code>Athena::Console::Exceptions::Logic</code> <code>Athena::Console::Exceptions::RuntimeError</code>"},{"location":"Console/Exceptions/ConsoleException/#Athena::Console::Exceptions::ConsoleException-constructors","title":"Constructors","text":""},{"location":"Console/Exceptions/ConsoleException/#Athena::Console::Exceptions::ConsoleException.new(message,code,cause)","title":"<code>.new(message : String, code : Int32 = 1, cause : Exception | Nil = nil)</code>","text":"View source"},{"location":"Console/Exceptions/ConsoleException/#Athena::Console::Exceptions::ConsoleException-methods","title":"Methods","text":""},{"location":"Console/Exceptions/ConsoleException/#Athena::Console::Exceptions::ConsoleException#code","title":"<code>#code : Int32</code>","text":"<p>Returns the code to use as the exit status of a command invocation.</p> View source"},{"location":"Console/Exceptions/InvalidArgument/","title":"InvalidArgument","text":""},{"location":"Console/Exceptions/InvalidArgument/#Athena::Console::Exceptions::InvalidArgument","title":"class <code>Athena::Console::Exceptions::InvalidArgument</code> inherits <code>Athena::Console::Exceptions::ConsoleException</code>","text":"Direct known subclasses <code>Athena::Console::Exceptions::InvalidOption</code>"},{"location":"Console/Exceptions/InvalidOption/","title":"InvalidOption","text":""},{"location":"Console/Exceptions/InvalidOption/#Athena::Console::Exceptions::InvalidOption","title":"class <code>Athena::Console::Exceptions::InvalidOption</code> inherits <code>Athena::Console::Exceptions::InvalidArgument</code>","text":""},{"location":"Console/Exceptions/Logic/","title":"Logic","text":""},{"location":"Console/Exceptions/Logic/#Athena::Console::Exceptions::Logic","title":"class <code>Athena::Console::Exceptions::Logic</code> inherits <code>Athena::Console::Exceptions::ConsoleException</code>","text":"<p>Represents a code logic error that should lead directly to a fix in your code.</p>"},{"location":"Console/Exceptions/MissingInput/","title":"MissingInput","text":""},{"location":"Console/Exceptions/MissingInput/#Athena::Console::Exceptions::MissingInput","title":"class <code>Athena::Console::Exceptions::MissingInput</code> inherits <code>Athena::Console::Exceptions::RuntimeError</code>","text":""},{"location":"Console/Exceptions/NamespaceNotFound/","title":"NamespaceNotFound","text":""},{"location":"Console/Exceptions/NamespaceNotFound/#Athena::Console::Exceptions::NamespaceNotFound","title":"class <code>Athena::Console::Exceptions::NamespaceNotFound</code> inherits <code>Athena::Console::Exceptions::CommandNotFound</code>","text":""},{"location":"Console/Exceptions/RuntimeError/","title":"RuntimeError","text":""},{"location":"Console/Exceptions/RuntimeError/#Athena::Console::Exceptions::RuntimeError","title":"class <code>Athena::Console::Exceptions::RuntimeError</code> inherits <code>Athena::Console::Exceptions::ConsoleException</code>","text":"Direct known subclasses <code>Athena::Console::Exceptions::MissingInput</code> <code>Athena::Console::Exceptions::ValidationFailed</code>"},{"location":"Console/Exceptions/ValidationFailed/","title":"ValidationFailed","text":""},{"location":"Console/Exceptions/ValidationFailed/#Athena::Console::Exceptions::ValidationFailed","title":"class <code>Athena::Console::Exceptions::ValidationFailed</code> inherits <code>Athena::Console::Exceptions::RuntimeError</code>","text":""},{"location":"Console/Formatter/","title":"Formatter","text":""},{"location":"Console/Formatter/#Athena::Console::Formatter","title":"module <code>Athena::Console::Formatter</code>","text":""},{"location":"Console/Formatter/Interface/","title":"Interface","text":""},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface","title":"module <code>Athena::Console::Formatter::Interface</code>","text":"<p>A container that stores and applies <code>ACON::Formatter::OutputStyleInterface</code>. Is responsible for formatting outputted messages as per their styles.</p> Direct including types <code>Athena::Console::Formatter::WrappableInterface</code>"},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface-methods","title":"Methods","text":""},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface#decorated=(decorated)","title":"abstract <code>#decorated=(decorated : Bool)</code>","text":"<p>Sets if output messages should be decorated.</p> View source"},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface#decorated?","title":"abstract <code>#decorated? : Bool</code>","text":"<p>Returns <code>true</code> if output messages will be decorated, otherwise <code>false</code>.</p> View source"},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface#format(message)","title":"abstract <code>#format(message : String | Nil) : String</code>","text":"<p>Formats the provided message according to the stored styles.</p> View source"},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface#has_style?(name)","title":"abstract <code>#has_style?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has a style with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface#set_style(name,style)","title":"abstract <code>#set_style(name : String, style : ACON::Formatter::OutputStyleInterface) : Nil</code>","text":"<p>Assigns the provided style to the provided name.</p> View source"},{"location":"Console/Formatter/Interface/#Athena::Console::Formatter::Interface#style(name)","title":"abstract <code>#style(name : String) : ACON::Formatter::OutputStyleInterface</code>","text":"<p>Returns an <code>ACON::Formatter::OutputStyleInterface</code> with the provided name.</p> View source"},{"location":"Console/Formatter/Output/","title":"Output","text":""},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output","title":"class <code>Athena::Console::Formatter::Output</code> inherits <code>Reference</code>","text":"<p>Default implementation of <code>ACON::Formatter::WrappableInterface</code>.</p> Included modules <code>Athena::Console::Formatter::WrappableInterface</code>"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output-constructors","title":"Constructors","text":""},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output.new(decorated,styles)","title":"<code>.new(decorated : Bool = false, styles : Colorize::Mode | Nil = nil)</code>","text":"View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output-class-methods","title":"Class methods","text":""},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output.escape(text)","title":"<code>.escape(text : String) : String</code>","text":"<p>Returns a new string where the special <code>&lt;</code> characters in the provided text are escaped.</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output.escape_trailing_backslash(text)","title":"<code>.escape_trailing_backslash(text : String) : String</code>","text":"<p>Returns a new string where trailing <code>\\</code> in the provided text is escaped.</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output-methods","title":"Methods","text":""},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output#decorated=(decorated)","title":"<code>#decorated=(decorated : Bool)</code>","text":"<p>Sets if output messages should be decorated.</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output#decorated?","title":"<code>#decorated? : Bool</code>","text":"<p>Returns <code>true</code> if output messages will be decorated, otherwise <code>false</code>.</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output#format(message)","title":"<code>#format(message : String | Nil) : String</code>","text":"<p>Formats the provided message according to the stored styles.</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output#format_and_wrap(message,width)","title":"<code>#format_and_wrap(message : String | Nil, width : Int32) : String</code>","text":"<p>Formats the provided message according to the defined styles, wrapping it at the provided width. A width of <code>0</code> means no wrapping. ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output#has_style?(name)","title":"<code>#has_style?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has a style with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output#set_style(name,style)","title":"<code>#set_style(name : String, style : ACON::Formatter::OutputStyleInterface) : Nil</code>","text":"<p>Assigns the provided style to the provided name.</p> View source"},{"location":"Console/Formatter/Output/#Athena::Console::Formatter::Output#style(name)","title":"<code>#style(name : String) : ACON::Formatter::OutputStyleInterface</code>","text":"<p>Returns an <code>ACON::Formatter::OutputStyleInterface</code> with the provided name.</p> View source"},{"location":"Console/Formatter/OutputStyle/","title":"OutputStyle","text":""},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle","title":"struct <code>Athena::Console::Formatter::OutputStyle</code> inherits <code>Struct</code>","text":"<p>Default implementation of <code>ACON::Formatter::OutputStyleInterface</code>.</p> Included modules <code>Athena::Console::Formatter::OutputStyleInterface</code>"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle-constructors","title":"Constructors","text":""},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle.new(foreground,background,options)","title":"<code>.new(foreground : Colorize::Color | String = :default, background : Colorize::Color | String = :default, options : Colorize::Mode = :none)</code>","text":"View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle-methods","title":"Methods","text":""},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#add_option(option)","title":"<code>#add_option(option : Colorize::Mode) : Nil</code>","text":"<p>Adds a text mode to <code>self</code>.</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#add_option(option)","title":"<code>#add_option(option : String) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#apply(text)","title":"<code>#apply(text : String) : String</code>","text":"<p>Applies <code>self</code> to the provided text.</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#background=(background)","title":"<code>#background=(background : Colorize::Color)</code>","text":"<p>Sets the background color of <code>self</code>.</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#background=(color)","title":"<code>#background=(color : String)</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#foreground=(foreground)","title":"<code>#foreground=(foreground : Colorize::Color)</code>","text":"<p>Sets the foreground color of <code>self</code>.</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#foreground=(foreground)","title":"<code>#foreground=(foreground : String)</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#href=(href)","title":"<code>#href=(href : String | Nil)</code>","text":"<p>Sets the <code>href</code> that <code>self</code> should link to.</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#options=(options)","title":"<code>#options=(options : Colorize::Mode)</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#remove_option(option)","title":"<code>#remove_option(option : Colorize::Mode) : Nil</code>","text":"<p>Removes a text mode to <code>self</code>.</p> View source"},{"location":"Console/Formatter/OutputStyle/#Athena::Console::Formatter::OutputStyle#remove_option(option)","title":"<code>#remove_option(option : String) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Formatter/OutputStyleInterface/","title":"OutputStyleInterface","text":""},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface","title":"module <code>Athena::Console::Formatter::OutputStyleInterface</code>","text":"<p>Output styles represent reusable formatting information that can be used when formatting output messages. <code>Athena::Console</code> comes bundled with a few common styles including:</p> <ul> <li>error</li> <li>info</li> <li>comment</li> <li>question</li> </ul> <p>Whenever you output text via an <code>ACON::Output::Interface</code>, you can surround the text with tags to color its output. For example:</p> <pre><code># Green text\noutput.puts \"&lt;info&gt;foo&lt;/info&gt;\"\n\n# Yellow text\noutput.puts \"&lt;comment&gt;foo&lt;/comment&gt;\"\n\n# Black text on a cyan background\noutput.puts \"&lt;question&gt;foo&lt;/question&gt;\"\n\n# White text on a red background\noutput.puts \"&lt;error&gt;foo&lt;/error&gt;\"\n</code></pre>"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface--custom-styles","title":"Custom Styles","text":"<p>Custom styles can also be defined/used:</p> <pre><code>my_style = ACON::Formatter::OutputStyle.new :red, \"#f87b05\", Colorize::Mode[:bold, :underline]\noutput.formatter.set_style \"fire\", my_style\n\noutput.puts \"&lt;fire&gt;foo&lt;/&gt;\"\n</code></pre>"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface--global-custom-styles","title":"Global Custom Styles","text":"<p>You can also make your style global by extending <code>ACON::Application</code> and adding it within the <code>#configure_io</code> method:</p> <pre><code>class MyCustomApplication &lt; ACON::Application\n  protected def configure_io(input : ACON::Input::Interface, output : ACON::Output::Interface) : Nil\n    super\n\n    my_style = ACON::Formatter::OutputStyle.new :red, \"#f87b05\", Colorize::Mode[:bold, :underline]\n    output.formatter.set_style \"fire\", my_style\n  end\nend\n</code></pre>"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface--inline-styles","title":"Inline Styles","text":"<p>Styles can also be defined inline when printing a message:</p> <pre><code># Using named colors\noutput.puts \"&lt;fg=green&gt;foo&lt;/&gt;\"\n\n# Using hexadecimal colors\noutput.puts \"&lt;fg=#c0392b&gt;foo&lt;/&gt;\"\n\n# Black text on a cyan background\noutput.puts \"&lt;fg=black;bg=cyan&gt;foo&lt;/&gt;\"\n\n# Bold text on a yellow background\noutput.puts \"&lt;bg=yellow;options=bold&gt;foo&lt;/&gt;\"\n\n# Bold text with underline.\noutput.puts \"&lt;options=bold,underline&gt;foo&lt;/&gt;\"\n</code></pre>"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface--clickable-links","title":"Clickable Links","text":"<p>Commands can use the special <code>href</code> tag to display links within the console.</p> <pre><code>output.puts \"&lt;href=https://athenaframework.org&gt;Athena&lt;/&gt;\"\n</code></pre> <p>If your terminal supports it, you would be able to click the text and have it open in your default browser. Otherwise, you will see it as regular text.</p> Direct including types <code>Athena::Console::Formatter::OutputStyle</code>"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface-methods","title":"Methods","text":""},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface#add_option(option)","title":"abstract <code>#add_option(option : Colorize::Mode) : Nil</code>","text":"<p>Adds a text mode to <code>self</code>.</p> View source"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface#apply(text)","title":"abstract <code>#apply(text : String) : String</code>","text":"<p>Applies <code>self</code> to the provided text.</p> View source"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface#background=(background)","title":"abstract <code>#background=(background : Colorize::Color)</code>","text":"<p>Sets the background color of <code>self</code>.</p> View source"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface#foreground=(foreground)","title":"abstract <code>#foreground=(foreground : Colorize::Color)</code>","text":"<p>Sets the foreground color of <code>self</code>.</p> View source"},{"location":"Console/Formatter/OutputStyleInterface/#Athena::Console::Formatter::OutputStyleInterface#remove_option(option)","title":"abstract <code>#remove_option(option : Colorize::Mode) : Nil</code>","text":"<p>Removes a text mode to <code>self</code>.</p> View source"},{"location":"Console/Formatter/WrappableInterface/","title":"WrappableInterface","text":""},{"location":"Console/Formatter/WrappableInterface/#Athena::Console::Formatter::WrappableInterface","title":"module <code>Athena::Console::Formatter::WrappableInterface</code>","text":"<p>Extension of <code>ACON::Formatter::Interface</code> that supports word wrapping.</p> Included modules <code>Athena::Console::Formatter::Interface</code> Direct including types <code>Athena::Console::Formatter::Output</code>"},{"location":"Console/Formatter/WrappableInterface/#Athena::Console::Formatter::WrappableInterface-methods","title":"Methods","text":""},{"location":"Console/Formatter/WrappableInterface/#Athena::Console::Formatter::WrappableInterface#format_and_wrap(message,width)","title":"abstract <code>#format_and_wrap(message : String | Nil, width : Int32) : String</code>","text":"<p>Formats the provided message according to the defined styles, wrapping it at the provided width. A width of <code>0</code> means no wrapping.</p> View source"},{"location":"Console/Helper/","title":"Helper","text":""},{"location":"Console/Helper/#Athena::Console::Helper","title":"abstract class <code>Athena::Console::Helper</code> inherits <code>Reference</code>","text":"<p>Contains <code>ACON::Helper::Interface</code> implementations that can be used to help with various tasks. Such as asking questions, customizing the output format, or generating tables.</p> <p>This class also acts as a base type that implements common functionality between each helper.</p> Included modules <code>Athena::Console::Helper::Interface</code> Direct known subclasses <code>Athena::Console::Helper::Formatter</code> <code>Athena::Console::Helper::Question</code>"},{"location":"Console/Helper/#Athena::Console::Helper-class-methods","title":"Class methods","text":""},{"location":"Console/Helper/#Athena::Console::Helper.format_time(span)","title":"<code>.format_time(span : Time::Span) : String</code>","text":"<p>Formats the provided span of time as a human readable string.</p> <pre><code>ACON::Helper.format_time 10.seconds # =&gt; \"10 secs\"\nACON::Helper.format_time 4.minutes  # =&gt; \"4 mins\"\nACON::Helper.format_time 74.minutes # =&gt; \"1 hr\"\n</code></pre> View source"},{"location":"Console/Helper/#Athena::Console::Helper.format_time(seconds)","title":"<code>.format_time(seconds : Number) : String</code>","text":"<p>Formats the provided seconds as a human readable string.</p> <pre><code>ACON::Helper.format_time 10   # =&gt; \"10 secs\"\nACON::Helper.format_time 240  # =&gt; \"4 mins\"\nACON::Helper.format_time 4400 # =&gt; \"1 hr\"\n</code></pre> View source"},{"location":"Console/Helper/#Athena::Console::Helper.remove_decoration(formatter,string)","title":"<code>.remove_decoration(formatter : ACON::Formatter::Interface, string : String) : String</code>","text":"<p>Returns a new string with all of its ANSI formatting removed.</p> View source"},{"location":"Console/Helper/#Athena::Console::Helper.width(string)","title":"<code>.width(string : String) : Int32</code>","text":"<p>Returns the width of a string; where the width is how many character positions the string will use.</p> <p>Todo</p> <p>Support double width chars.</p> View source"},{"location":"Console/Helper/#Athena::Console::Helper-methods","title":"Methods","text":""},{"location":"Console/Helper/#Athena::Console::Helper#helper_set","title":"<code>#helper_set : ACON::Helper::HelperSet | ::Nil</code>","text":"<p>Returns the <code>ACON::Helper::HelperSet</code> related to <code>self</code>, if any.</p> View source"},{"location":"Console/Helper/#Athena::Console::Helper#helper_set=(helper_set)","title":"<code>#helper_set=(helper_set : ACON::Helper::HelperSet | Nil)</code>","text":"<p>Sets the <code>ACON::Helper::HelperSet</code> related to <code>self</code>.</p> View source"},{"location":"Console/Helper/AthenaQuestion/","title":"AthenaQuestion","text":""},{"location":"Console/Helper/AthenaQuestion/#Athena::Console::Helper::AthenaQuestion","title":"class <code>Athena::Console::Helper::AthenaQuestion</code> inherits <code>Athena::Console::Helper::Question</code>","text":"<p>Extension of <code>ACON::Helper::Question</code> that provides more structured output.</p> <p>See <code>ACON::Style::Athena</code>.</p>"},{"location":"Console/Helper/Formatter/","title":"Formatter","text":""},{"location":"Console/Helper/Formatter/#Athena::Console::Helper::Formatter","title":"class <code>Athena::Console::Helper::Formatter</code> inherits <code>Athena::Console::Helper</code>","text":"<p>Provides additional ways to format output messages than <code>ACON::Formatter::OutputStyle</code> can do alone, such as:</p> <ul> <li>Printing messages in a section</li> <li>Printing messages in a block</li> <li>Print truncated messages.</li> </ul> <p>The provided methods return a <code>String</code> which could then be passed to <code>ACON::Output::Interface#print</code> or <code>ACON::Output::Interface#puts</code>.</p>"},{"location":"Console/Helper/Formatter/#Athena::Console::Helper::Formatter-methods","title":"Methods","text":""},{"location":"Console/Helper/Formatter/#Athena::Console::Helper::Formatter#format_block(messages,style,large)","title":"<code>#format_block(messages : String | Enumerable(String), style : String, large : Bool = false)</code>","text":"<p>Prints the provided messages in a block formatted according to the provided style, with a total width a bit more than the longest line.</p> <p>The large options adds additional padding, one blank line above and below the messages, and 2 more spaces on the left and right.</p> <pre><code>output.puts formatter.format_block({\"Error!\", \"Something went wrong\"}, \"error\", true)\n</code></pre> View source"},{"location":"Console/Helper/Formatter/#Athena::Console::Helper::Formatter#format_section(section,message,style)","title":"<code>#format_section(section : String, message : String, style : String = \"info\") : String</code>","text":"<p>Prints the provided message in the provided section. Optionally allows setting the style of the section.</p> <pre><code>[SomeSection] Here is some message related to that section\n</code></pre> <pre><code>output.puts formatter.format_section \"SomeSection\", \"Here is some message related to that section\"\n</code></pre> View source"},{"location":"Console/Helper/Formatter/#Athena::Console::Helper::Formatter#truncate(message,length,suffix)","title":"<code>#truncate(message : String, length : Int, suffix : String = \"...\") : String</code>","text":"<p>Truncates the provided message to be at most length characters long, with the optional suffix appended to the end.</p> <pre><code>message = \"This is a very long message, which should be truncated\"\ntruncated_message = formatter.truncate message, 7\noutput.puts truncated_message # =&gt; This is...\n</code></pre> <p>If length is negative, it will start truncating from the end.</p> <pre><code>message = \"This is a very long message, which should be truncated\"\ntruncated_message = formatter.truncate message, -4\noutput.puts truncated_message # =&gt; This is a very long message, which should be trunc...\n</code></pre> View source"},{"location":"Console/Helper/HelperSet/","title":"HelperSet","text":""},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet","title":"class <code>Athena::Console::Helper::HelperSet</code> inherits <code>Reference</code>","text":"<p>The container that stores various <code>ACON::Helper::Interface</code> implementations, keyed by their class.</p> <p>Each application includes a default helper set, but additional ones may be added. See <code>ACON::Application#helper_set</code>.</p> <p>These helpers can be accessed from within a command via the <code>ACON::Command#helper</code> method.</p>"},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet-constructors","title":"Constructors","text":""},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet.new(helpers)","title":"<code>.new(helpers : Hash(ACON::Helper.class, ACON::Helper::Interface) = Hash(ACON::Helper.class, ACON::Helper::Interface).new)</code>","text":"View source"},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet.new(*)","title":"<code>.new(*helpers : ACON::Helper::Interface) : self</code>","text":"View source"},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet-methods","title":"Methods","text":""},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet#<<(helper)","title":"<code>#&lt;&lt;(helper : ACON::Helper::Interface) : Nil</code>","text":"<p>Adds the provided helper to <code>self</code>.</p> View source"},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet#[](helper_class)","title":"<code>#[](helper_class : T.class) : T forall T</code>","text":"<p>Returns the helper of the provided helper_class, or raises if it is not defined.</p> View source"},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet#[]?(helper_class)","title":"<code>#[]?(helper_class : T.class) : T | Nil forall T</code>","text":"<p>Returns the helper of the provided helper_class, or <code>nil</code> if it is not defined.</p> View source"},{"location":"Console/Helper/HelperSet/#Athena::Console::Helper::HelperSet#has?(helper_class)","title":"<code>#has?(helper_class : ACON::Helper.class) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has a helper for the provided helper_class, otherwise <code>false</code>.</p> View source"},{"location":"Console/Helper/Interface/","title":"Interface","text":""},{"location":"Console/Helper/Interface/#Athena::Console::Helper::Interface","title":"module <code>Athena::Console::Helper::Interface</code>","text":"Direct including types <code>Athena::Console::Helper</code>"},{"location":"Console/Helper/Interface/#Athena::Console::Helper::Interface-methods","title":"Methods","text":""},{"location":"Console/Helper/Interface/#Athena::Console::Helper::Interface#helper_set","title":"abstract <code>#helper_set : ACON::Helper::HelperSet | ::Nil</code>","text":"<p>Returns the <code>ACON::Helper::HelperSet</code> related to <code>self</code>, if any.</p> View source"},{"location":"Console/Helper/Interface/#Athena::Console::Helper::Interface#helper_set=(helper_set)","title":"abstract <code>#helper_set=(helper_set : ACON::Helper::HelperSet | Nil)</code>","text":"<p>Sets the <code>ACON::Helper::HelperSet</code> related to <code>self</code>.</p> View source"},{"location":"Console/Helper/ProgressBar/","title":"ProgressBar","text":""},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar","title":"class <code>Athena::Console::Helper::ProgressBar</code> inherits <code>Reference</code>","text":"<p>When executing longer-running commands, it can be helpful to show progress information that updates as the command runs:</p> <p></p> <p>Tip</p> <p>Consider using <code>ACON::Style::Athena</code> to display a progress bar.</p> <p>The ProgressBar helper can be used to progress information to any <code>ACON::Output::Interface</code>:</p> <pre><code># Create a new progress bar with 50 required units for completion.\nprogress_bar = ACON::Helper::ProgressBar.new output, 50\n\n# Start and display the progress bar.\nprogress_bar.start\n\n50.times do\n  # Do work\n\n  # Advance the progress bar by 1 unit.\n  progress_bar.advance\n\n  # Or advance by more than a single unit.\n  # progress_bar.advance 3\nend\n\n# Ensure progress bar is at 100%.\nprogress_bar.finish\n</code></pre> <p>A progress bar can also be created without a required number of units, in which case it will just act as a throbber. However, <code>#max_steps=</code> can be called at any point to either set, or increase the required number of units. E.g. if its only known after performing some calculations, or additional work is needed such that the original value is not invalid.</p> <p>Tip</p> <p>Consider using an <code>ACON::Helper::ProgressIndicator</code> instead of a progress bar for this use case.</p> <p>Be sure to call <code>#finish</code> when the task completes to ensure the progress bar is refreshed with a 100% completion.</p> <p>Note</p> <p>By default the progress bar will write its output to <code>STDERR</code>, however this can be customized by using an <code>ACON::Output::IO</code> explicitly.</p> <p>If the progress information is stored within an Enumerable type, the <code>#iterate</code> method can be used to start, advance, and finish the progress bar automatically, yielding each item in the collection:</p> <pre><code>bar = ACON::Helper::ProgressBar.new output\narr = [1, 2, 3]\n\nbar.iterate(arr) do |item|\n  # Do something\nend\n</code></pre> <p>Which would output: <pre><code>0/2 [&gt;---------------------------]   0%\n1/2 [==============&gt;-------------]  50%\n2/2 [============================] 100%\n</code></pre></p> <p>Note</p> <p><code>Iterator</code> types are also supported, but need the max value provided explicitly via the second argument to <code>#iterate</code> if known.</p>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--progressing","title":"Progressing","text":"<p>While the <code>#advance</code> method can be used to move the progress bar ahead by a specific number of steps, the current step can be set explicitly via <code>#progress=</code>.</p> <p>It is also possible to start the progress bar at a specific step, which is useful when resuming some long-standing task:</p> <pre><code># Create a 100 unit progress bar.\nprogress_bar = ACON::Helper::ProgressBar.new output, 100\n\n# Display the progress bar starting at already 25% complete.\nprogress_bar.start at: 25\n</code></pre> <p>Tip</p> <p>The progress can also be regressed (stepped backwards) by providing <code>#advance</code> a negative value.</p>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--controlling-rendering","title":"Controlling Rendering","text":"<p>If available, ANCI Escape Codes are used to handle the rendering of the progress bar, otherwise updates are added as new lines. <code>#minimum_seconds_between_redraws=</code> can be used to prevent the output being flooded. <code>#redraw_frequency=</code> can be used to to redraw every N iterations. By default, redraw frequency is 100ms or 10% of your <code>#max_steps</code>.</p>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--customizing","title":"Customizing","text":""},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--built-in-formats","title":"Built-in Formats","text":"<p>The progress bar comes with a few built-in formats based on the <code>ACON::Output::Verbosity</code> the command was executed with:</p> <pre><code># Verbosity::NORMAL (CLI with no verbosity flag)\n 0/3 [&gt;---------------------------]   0%\n 1/3 [=========&gt;------------------]  33%\n 3/3 [============================] 100%\n\n# Verbosity::VERBOSE (-v)\n 0/3 [&gt;---------------------------]   0%  1 sec\n 1/3 [=========&gt;------------------]  33%  1 sec\n 3/3 [============================] 100%  1 sec\n\n# Verbosity::VERY_VERBOSE (-vv)\n 0/3 [&gt;---------------------------]   0%  1 sec/1 sec\n 1/3 [=========&gt;------------------]  33%  1 sec/1 sec\n 3/3 [============================] 100%  1 sec/1 sec\n\n# Verbosity::DEBUG (-vvv)\n 0/3 [&gt;---------------------------]   0%  1 sec/1 sec  1kiB\n 1/3 [=========&gt;------------------]  33%  1 sec/1 sec  1kiB\n 3/3 [============================] 100%  1 sec/1 sec  1kiB\n</code></pre> <p>Note</p> <p>If a command called with <code>ACON::Output::Verbosity::QUIET</code>, the progress bar will not be displayed.</p> <p>The format may also be set explicitly in code via:</p> <pre><code># If the progress bar has a maximum number of steps.\nbar.format = :very_verbose\n\n# Without a maximum\nbar.format = :very_verbose_nomax\n</code></pre>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--custom-formats","title":"Custom Formats","text":"<p>While the built-in formats are sufficient for most use cases, custom ones may also be defined:</p> <pre><code>bar.format = \"%bar%\"\n</code></pre> <p>Which would set the format to only display the progress bar itself:</p> <pre><code>&gt;---------------------------\n=========&gt;------------------\n============================\n</code></pre> <p>A progress bar format is a string that contains specific placeholders (a name enclosed with the <code>%</code> character); the placeholders are replaced based on the current progress of the bar. The built-in placeholders include:</p> <ul> <li><code>%current%</code> - The current step</li> <li><code>%max%</code> - The maximum number of steps (or zero if there is not one)</li> <li><code>%bar%</code> - The progress bar itself</li> <li><code>%percent%</code> - The percentage of completion (not available if no max is defined)</li> <li><code>%elapsed%</code> - The time elapsed since the start of the progress bar</li> <li><code>%remaining%</code> - The remaining time to complete the task (not available if no max is defined)</li> <li><code>%estimated%</code> - The estimated time to complete the task (not available if no max is defined)</li> <li><code>%memory%</code> - The current memory usage</li> <li><code>%message%</code> - Used to display arbitrary messages, more on this later</li> </ul> <p>For example, the format string for <code>ACON::Helper::ProgressBar::Format::NORMAL</code> is <code>\" %current% [%bar%] %elapsed:6s%\"</code>. Individual placeholders can have their formatting tweaked by anything that sprintf supports by separating the name of the placeholder with a <code>:</code>. The part after the colon will be passed to <code>sprintf</code>.</p> <p>If a format should be used across an entire application, they can be registered globally via <code>.set_format_definition</code>:</p> <pre><code>ACON::Helper::ProgressBar.set_format_definition \"minimal\", \"Progress: %percent%%\"\n\nbar = ACON::Helper::ProgressBar.new output, 3\nbar.format = \"minimal\"\n</code></pre> <p>Which would output:</p> <pre><code>Progress: 0%\nProgress: 33%\nProgress: 100%\n</code></pre> <p>Tip</p> <p>It is almost always better to override the built-in formats in order to automatically vary the display based on the verbosity the command is being ran with.</p> <p>When creating a custom format, be sure to also define a <code>_nomax</code> variant if it is using a placeholder that is only available if <code>#max_steps</code> is defined.</p> <pre><code>ACON::Helper::ProgressBar.set_format_definition \"minimal\", \"%current%/%remaining%\"\nACON::Helper::ProgressBar.set_format_definition \"minimal_nomax\", \"%current%\"\n\nbar = ACON::Helper::ProgressBar.new output, 3\nbar.format = \"minimal\"\n</code></pre> <p>The format will automatically be set to <code>minimal_nomax</code> if the bar does not have a maximum number of steps.</p> <p>Tip</p> <p>A format can contain any valid ANSI codes, or any <code>ACON::Formatter::OutputStyleInterface</code> markup.</p> <p>Tip</p> <p>A format may also span multiple lines, which can be useful to also display contextual information (like the first example).</p>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--bar-settings","title":"Bar Settings","text":"<p>The <code>bar</code> placeholder is a bit special in that all of the characters used to display it can be customized:</p> <pre><code># The Finished part of the bar.\nbar.bar_character = \"&lt;comment&gt;=&lt;/comment&gt;\"\n\n# The unfinished part of the bar.\nbar.empty_bar_character = \" \"\n\n# The progress character.\nbar.progress_character = \"|\"\n\n# The width of the bar.\nbar.bar_width = 50\n</code></pre>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--custom-placeholders","title":"Custom Placeholders","text":"<p>Just like the format, custom placeholders may also be defined. This can be useful to have a common way of displaying some sort of application specific information between multiple progress bars:</p> <pre><code>ACON::Helper::ProgressBar.set_placeholder_formatter \"remaining_steps\" do |bar|\n  \"#{bar.max_steps - bar.progress}\"\nend\n</code></pre> <p>From here it could then be used in a format string as <code>%remaining_steps%</code> just like any other placeholder. <code>.set_placeholder_formatter</code> registers the format globally, while <code>#set_placeholder_formatter</code> would set it on a specific progress bar.</p>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--custom-messages","title":"Custom Messages","text":"<p>While there is a built-in <code>message</code> placeholder that can be set via <code>#set_message</code>, none of the built-in formats include it. As such, before displaying these messages, a custom format needs to be defined:</p> <pre><code>bar = ACON::Helper::ProgressBar.new output, 100\nbar.format = \" %current%/%max% -- %message%\"\n\nbar.set_message \"Start\"\nbar.start # 0/100 -- Start\n\nbar.set_message \"Task is in progress...\"\nbar.advance # 1/100 -- Task is in progress...\n</code></pre> <p><code>#set_message</code> also allows or an optional second argument, which can be used to have multiple independent messages within the same format string:</p> <pre><code>files.each do |file_name|\n  bar.set_message \"Importing files...\"\n  bar.set_message file_name, \"filename\"\n  bar.advance # =&gt; 2/100 -- Importing files... (foo/bar.txt)\nend\n</code></pre>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar--multiple-progress-bars","title":"Multiple Progress Bars","text":"<p>When using <code>ACON::Output::Section</code>s, multiple progress bars can be displayed at the same time and updated independently:</p> <pre><code>output = output.as ACON::Output::ConsoleOutputInterface\n\nsection1 = output.section\nsection2 = output.section\n\nbar1 = ACON::Helper::ProgressBar.new section1\nbar2 = ACON::Helper::ProgressBar.new section2\n\nbar1.start 100\nbar2.start 100\n\n100.times do |idx|\n  bar1.advance\n  bar2.advance(4) if idx.divisible_by? 2\n\n  sleep 0.05\nend\n</code></pre> <p>Which would ultimately look something like:</p> <pre><code>34/100 [=========&gt;------------------]  34%\n68/100 [===================&gt;--------]  68%\n</code></pre>"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar-constructors","title":"Constructors","text":""},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar.new(output,max,minimum_seconds_between_redraws,clock)","title":"<code>.new(output : ACON::Output::Interface, max : Int32 | Nil = nil, minimum_seconds_between_redraws : Float64 = 0.04, clock : ACLK::Interface = ACLK::Monotonic.new)</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar-class-methods","title":"Class methods","text":""},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar.format_definition(name)","title":"<code>.format_definition(name : String) : String | Nil</code>","text":"<p>Returns the global format string for the provided name if it exists, otherwise <code>nil</code>.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar.placeholder_formatter(name)","title":"<code>.placeholder_formatter(name : String) : ACON::Helper::ProgressBar::PlaceholderFormatter | Nil</code>","text":"<p>Returns the global formatter for the provided name if it exists, otherwise <code>nil</code>.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar.set_format_definition(name,format)","title":"<code>.set_format_definition(name : String, format : String) : Nil</code>","text":"<p>Registers the format globally with the provided name.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar.set_placeholder_formatter(name,&)","title":"<code>.set_placeholder_formatter(name : String, &amp;block : self, ACON::Output::Interface -&gt; String) : Nil</code>","text":"<p>Registers a custom placeholder with the provided name with the block being the formatter.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar.set_placeholder_formatter(name,callable)","title":"<code>.set_placeholder_formatter(name : String, callable : ACON::Helper::ProgressBar::PlaceholderFormatter) : Nil</code>","text":"<p>Registers a custom placeholder with the provided name, using the provided callable as the formatter.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar-methods","title":"Methods","text":""},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#advance(by)","title":"<code>#advance(by step : Int32 = 1) : Nil</code>","text":"<p>Advanced the progress bar by the provided number of steps.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#bar_character","title":"<code>#bar_character : String</code>","text":"<p>Returns the character to use for the finished part of the bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#bar_character=(bar_character)","title":"<code>#bar_character=(bar_character : String | Nil)</code>","text":"<p>Explicitly sets the character to use for the finished part of the bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#bar_offset","title":"<code>#bar_offset : Int32</code>","text":"<p>Returns the amount of <code>#bar_character</code> representing the current <code>#progress</code>.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#bar_width","title":"<code>#bar_width : Int32</code>","text":"<p>Returns the width of the progress bar in pixels.</p> <pre><code>bar1 = ...\nbar1.bar_width = 50\nbar1.start 10\n\nbar2 = ...\nbar2.bar_width = 10\nbar2.start 20\n\nbar1.finish\nbar2.finish\n</code></pre> <pre><code>10/10 [==================================================] 100%\n20/20 [==========] 100%\n</code></pre> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#bar_width=(size)","title":"<code>#bar_width=(size : Int32) : Nil</code>","text":"<p>Sets the width of the bar in pixels to the provided size. See <code>#bar_width</code>.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#clear","title":"<code>#clear : Nil</code>","text":"<p>Clears the progress bar from the output. Can be used in conjunction with <code>#display</code> to allow outputting something while a progress bar is running. Call <code>#clear</code>, write the content, then call <code>#display</code> to show the progress bar again.</p> <p>Note</p> <p>Requires that <code>#overwrite=</code> be set to <code>true</code>.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#display","title":"<code>#display : Nil</code>","text":"<p>Displays the progress bar's current state.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#empty_bar_character","title":"<code>#empty_bar_character : String</code>","text":"<p>Represents the character used for the unfinished part of the bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#empty_bar_character=(empty_bar_character)","title":"<code>#empty_bar_character=(empty_bar_character : String)</code>","text":"<p>Represents the character used for the unfinished part of the bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#estimated","title":"<code>#estimated : Float64</code>","text":"<p>Returns an estimated amount of time in seconds until the progress bar is completed.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#finish","title":"<code>#finish</code>","text":"<p>Finishes the progress output, making it 100% complete.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#format=(format)","title":"<code>#format=(format : String)</code>","text":"<p>Sets the format string used to determine how to display the progress bar. See Custom Formats for more information.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#format=(format)","title":"<code>#format=(format : ACON::Helper::ProgressBar::Format)</code>","text":"<p>Sets what built in format to use. See Built-in Formats for more information.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#iterate(enumerable,max,&)","title":"<code>#iterate(enumerable : Enumerable(T), max : Int32 | Nil = nil, &amp; : T -&gt; Nil) : Nil forall T</code>","text":"<p>Start, advance, and finish the progress bar automatically, yielding each item in the provided enumerable.</p> <pre><code>bar = ACON::Helper::ProgressBar.new output\narr = [1, 2, 3]\n\nbar.iterate(arr) do |item|\n  # Do something\nend\n</code></pre> <p>Which would output: <pre><code>0/2 [&gt;---------------------------]   0%\n1/2 [==============&gt;-------------]  50%\n2/2 [============================] 100%\n</code></pre></p> <p>Note</p> <p><code>Iterator</code> types are also supported, but need the max value provided explicitly via the second argument to <code>#iterate</code> if known.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#max_steps","title":"<code>#max_steps : Int32</code>","text":"<p>Returns the maximum number of possible steps, or <code>0</code> if it is unknown.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#max_steps=(max)","title":"<code>#max_steps=(max : Int32) : Nil</code>","text":"<p>Sets the maximum possible steps to the provided max.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#maximum_seconds_between_redraws=(maximum_seconds_between_redraws)","title":"<code>#maximum_seconds_between_redraws=(maximum_seconds_between_redraws : Float64)</code>","text":"<p>Sets the maximum amount of time between redraws.</p> <p>See Controlling Rendering for more information.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#message(name)","title":"<code>#message(name : String = \"message\") : String | Nil</code>","text":"<p>Returns the message associated with the provided name if defined, otherwise <code>nil</code>.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#minimum_seconds_between_redraws=(minimum_seconds_between_redraws)","title":"<code>#minimum_seconds_between_redraws=(minimum_seconds_between_redraws : Float64)</code>","text":"<p>Sets the minimum amount of time between redraws.</p> <p>See Controlling Rendering for more information.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#overwrite=(overwrite)","title":"<code>#overwrite=(overwrite : Bool)</code>","text":"<p>Sets if the progress bar should overwrite the progress bar. Set to <code>false</code> in order to print the progress bar on a new line for each update.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#placeholder_formatter(name)","title":"<code>#placeholder_formatter(name : String) : ACON::Helper::ProgressBar::PlaceholderFormatter | Nil</code>","text":"<p>Returns the amount of time in seconds until the progress bar is completed.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#progress","title":"<code>#progress : Int32</code>","text":"<p>Returns the current step of the progress bar</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#progress=(step)","title":"<code>#progress=(step : Int32) : Nil</code>","text":"<p>Explicitly sets the current step number of the progress bar.</p> <p>ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#progress_character","title":"<code>#progress_character : String</code>","text":"<p>Represents the character used for the current progress of the bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#progress_character=(progress_character)","title":"<code>#progress_character=(progress_character : String)</code>","text":"<p>Represents the character used for the current progress of the bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#progress_percent","title":"<code>#progress_percent : Float64</code>","text":"<p>Returns the a percent of progress of <code>#progress</code> versus <code>#max_steps</code>. Returns zero if there is no max defined.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#redraw_frequency=(steps)","title":"<code>#redraw_frequency=(steps : Int32 | Nil) : Nil</code>","text":"<p>Redraw the progress bar every after advancing the provided amount of steps.</p> <p>See Controlling Rendering for more information.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#remaining","title":"<code>#remaining : Float64</code>","text":"<p>Returns an estimated total amount of time in seconds needed for the progress bar to complete.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#set_message(message,name)","title":"<code>#set_message(message : String, name : String = \"message\") : Nil</code>","text":"<p>Sets the message with the provided name to that of the provided message.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#set_placeholder_formatter(name,&)","title":"<code>#set_placeholder_formatter(name : String, &amp;block : self, ACON::Output::Interface -&gt; String) : Nil</code>","text":"<p>Same as <code>.set_placeholder_formatter</code>, but scoped to this particular progress bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#set_placeholder_formatter(name,callable)","title":"<code>#set_placeholder_formatter(name : String, callable : ACON::Helper::ProgressBar::PlaceholderFormatter) : Nil</code>","text":"<p>Same as <code>.set_placeholder_formatter</code>, but scoped to this particular progress bar.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#start(max,at)","title":"<code>#start(max : Int32 | Nil = nil, at start_at : Int32 = 0) : Nil</code>","text":"<p>Starts the progress bar.</p> <p>Optionally sets the maximum number of steps to max, or <code>nil</code> to leave unchanged. Optionally starts the progress bar at the provided step.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#start_time","title":"<code>#start_time : Time</code>","text":"<p>Returns the time the progress bar was started as a Unix epoch.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#step_width","title":"<code>#step_width : Int32</code>","text":"<p>Returns the width in pixels that the current <code>#progress</code> takes up when displayed.</p> View source"},{"location":"Console/Helper/ProgressBar/#Athena::Console::Helper::ProgressBar#step_width?","title":"<code>#step_width? : Int32 | ::Nil</code>","text":"<p>Returns the width in pixels that the current <code>#progress</code> takes up when displayed.</p> View source"},{"location":"Console/Helper/ProgressBar/Format/","title":"Format","text":""},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format","title":"enum <code>Athena::Console::Helper::ProgressBar::Format</code>","text":"<p>Represents the built in progress bar formats.</p> <p>See Built-In Formats for more information.</p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format-members","title":"Members","text":""},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::DEBUG","title":"<code>DEBUG = 0</code>","text":"<p><code>\" %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s% %memory:6s%\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::VERY_VERBOSE","title":"<code>VERY_VERBOSE = 1</code>","text":"<p><code>\" %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%/%estimated:-6s%\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::VERBOSE","title":"<code>VERBOSE = 2</code>","text":"<p><code>\" %current%/%max% [%bar%] %percent:3s%% %elapsed:6s%\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::NORMAL","title":"<code>NORMAL = 3</code>","text":"<p><code>\" %current%/%max% [%bar%] %percent:3s%%\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::DEBUG_NOMAX","title":"<code>DEBUG_NOMAX = 4</code>","text":"<p><code>\" %current% [%bar%] %elapsed:6s% %memory:6s%\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::VERBOSE_NOMAX","title":"<code>VERBOSE_NOMAX = 5</code>","text":"<p><code>\" %current% [%bar%] %elapsed:6s%\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::VERY_VERBOSE_NOMAX","title":"<code>VERY_VERBOSE_NOMAX = 6</code>","text":"<p><code>\" %current% [%bar%] %elapsed:6s%\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format::NORMAL_NOMAX","title":"<code>NORMAL_NOMAX = 7</code>","text":"<p><code>\" %current% [%bar%]\"</code></p>"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format-methods","title":"Methods","text":""},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#debug?","title":"<code>#debug?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#debug_nomax?","title":"<code>#debug_nomax?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#normal?","title":"<code>#normal?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#normal_nomax?","title":"<code>#normal_nomax?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#verbose?","title":"<code>#verbose?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#verbose_nomax?","title":"<code>#verbose_nomax?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#very_verbose?","title":"<code>#very_verbose?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/Format/#Athena::Console::Helper::ProgressBar::Format#very_verbose_nomax?","title":"<code>#very_verbose_nomax?</code>","text":"View source"},{"location":"Console/Helper/ProgressBar/PlaceholderFormatter/","title":"PlaceholderFormatter","text":""},{"location":"Console/Helper/ProgressBar/PlaceholderFormatter/#Athena::Console::Helper::ProgressBar::PlaceholderFormatter","title":"alias <code>Athena::Console::Helper::ProgressBar::PlaceholderFormatter</code>","text":"<p>Represents the expected type of a Placeholder Formatter.</p> Alias definition <code>Athena::Console::Helper::ProgressBar, Athena::Console::Output::Interface -&gt; String</code>"},{"location":"Console/Helper/ProgressIndicator/","title":"ProgressIndicator","text":""},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator","title":"class <code>Athena::Console::Helper::ProgressIndicator</code> inherits <code>Reference</code>","text":"<p>Progress indicators are useful to let users know that a command isn't stalled. However, unlike <code>ACON::Helper::ProgressBar</code>s, these indicators are used when the command's duration is indeterminate, such as long-running commands or tasks that are quantifiable.</p> <p></p> <pre><code># Create a new progress indicator.\nindicator = ACON::Helper::ProgressIndicator.new output\n\n# Start and display the progress indicator with a custom message.\nindicator.start \"Processing...\"\n\n50.times do\n  # Do work\n\n  # Advance the progress indicator.\n  indicator.advance\nend\n\n# Ensure the progress indicator shows a final completion message\nindicator.finish \"Finished!\"\n</code></pre>"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator--customizing","title":"Customizing","text":""},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator--built-in-formats","title":"Built-in Formats","text":"<p>The progress indicator comes with a few built-in formats based on the <code>ACON::Output::Verbosity</code> the command was executed with:</p> <pre><code># Verbosity::NORMAL (CLI with no verbosity flag)\n \\ Processing...\n | Processing...\n / Processing...\n - Processing...\n\n# Verbosity::VERBOSE (-v)\n \\ Processing... (1 sec)\n | Processing... (1 sec)\n / Processing... (1 sec)\n - Processing... (1 sec)\n\n# Verbosity::VERY_VERBOSE (-vv) and Verbosity::DEBUG (-vvv)\n \\ Processing... (1 sec, 1kiB)\n | Processing... (1 sec, 1kiB)\n / Processing... (1 sec, 1kiB)\n - Processing... (1 sec, 1kiB)\n</code></pre> <p>Note</p> <p>If a command called with <code>ACON::Output::Verbosity::QUIET</code>, the progress bar will not be displayed.</p> <p>The format may also be set explicitly in code within the constructor:</p> <pre><code># If the progress bar has a maximum number of steps.\nACON::Helper::ProgressIndicator.new output, format: :very_verbose\n</code></pre>"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator--custom-indicator-values","title":"Custom Indicator Values","text":"<p>Custom indicator values may also be used:</p> <pre><code>indicator = ACON::Helper::ProgressIndicator.new output, indicator_values: %w(\u280f \u281b \u2839 \u28b8 \u28f0 \u28e4 \u28c6 \u2847)\n</code></pre> <p>The progress indicator would now look like:</p> <pre><code>\u280f Processing...\n\u281b Processing...\n\u2839 Processing...\n\u28b8 Processing...\n</code></pre>"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator--custom-placeholders","title":"Custom Placeholders","text":"<p>A progress indicator uses placeholders (a name enclosed with the <code>%</code> character) to determine the output format. The built-in placeholders include:</p> <ul> <li><code>%indicator%</code> - The current indicator</li> <li><code>%elapsed%</code> - The time elapsed since the start of the progress indicator</li> <li><code>%memory%</code> - The current memory usage</li> <li><code>%message%</code> - Used to display arbitrary messages</li> </ul> <p>These can be customized via <code>.set_placeholder_formatter</code>.</p> <pre><code>ACON::Helper::ProgressIndicator.set_placeholder_formatter \"message\" do\n  # Return any arbitrary string\n  \"My Custom Message\"\nend\n</code></pre> <p>Note</p> <p>Placeholder customization is global and would affect any indicator used after calling <code>.set_placeholder_formatter</code>.</p>"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator-constructors","title":"Constructors","text":""},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator.new(output,format,indicator_change_interval,indicator_values,clock)","title":"<code>.new(output : ACON::Output::Interface, format : ACON::Helper::ProgressIndicator::Format | Nil = nil, indicator_change_interval : Time::Span = 100.milliseconds, indicator_values : Indexable(String) | Nil = nil, clock : ACLK::Interface = ACLK::Monotonic.new)</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator-class-methods","title":"Class methods","text":""},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator.placeholder_formatter(name)","title":"<code>.placeholder_formatter(name : String) : ACON::Helper::ProgressIndicator::PlaceholderFormatter | Nil</code>","text":"<p>Returns the global formatter for the provided name if it exists, otherwise <code>nil</code>.</p> View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator.set_placeholder_formatter(name,&)","title":"<code>.set_placeholder_formatter(name : String, &amp;block : self -&gt; String) : Nil</code>","text":"<p>Registers a custom placeholder with the provided name with the block being the formatter.</p> View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator.set_placeholder_formatter(name,callable)","title":"<code>.set_placeholder_formatter(name : String, callable : ACON::Helper::ProgressIndicator::PlaceholderFormatter) : Nil</code>","text":"<p>Registers a custom placeholder with the provided name, using the provided callable as the formatter.</p> View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator-methods","title":"Methods","text":""},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator#advance","title":"<code>#advance : Nil</code>","text":"<p>Advance the indicator to display the next indicator character.</p> View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator#display","title":"<code>#display : Nil</code>","text":"<p>Display the current state of the indicator.</p> View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator#finish(message)","title":"<code>#finish(message : String) : Nil</code>","text":"<p>Completes the indicator with the provided message.</p> View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator#message=(message)","title":"<code>#message=(message : String | Nil) : Nil</code>","text":"<p>Sets the message to display alongside the indicator.</p> View source"},{"location":"Console/Helper/ProgressIndicator/#Athena::Console::Helper::ProgressIndicator#start(message)","title":"<code>#start(message : String) : Nil</code>","text":"<p>Starts and displays the indicator with the provided message.</p> View source"},{"location":"Console/Helper/ProgressIndicator/Format/","title":"Format","text":""},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format","title":"enum <code>Athena::Console::Helper::ProgressIndicator::Format</code>","text":"<p>Represents the built in progress indicator formats.</p> <p>See Built-In Formats for more information.</p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format-members","title":"Members","text":""},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::NORMAL","title":"<code>NORMAL = 0</code>","text":"<p><code>\" %indicator% %message%\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::NORMAL_NO_ANSI","title":"<code>NORMAL_NO_ANSI = 1</code>","text":"<p><code>\" %message%\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::VERBOSE","title":"<code>VERBOSE = 2</code>","text":"<p><code>\" %indicator% %message% (%elapsed:6s%)\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::VERBOSE_NO_ANSI","title":"<code>VERBOSE_NO_ANSI = 3</code>","text":"<p><code>\" %message% (%elapsed:6s%)\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::VERY_VERBOSE","title":"<code>VERY_VERBOSE = 4</code>","text":"<p><code>\" %indicator% %message% (%elapsed:6s%, %memory:6s%)\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::VERY_VERBOSE_NO_ANSI","title":"<code>VERY_VERBOSE_NO_ANSI = 5</code>","text":"<p><code>\" %message% (%elapsed:6s%, %memory:6s%)\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::DEBUG","title":"<code>DEBUG = 6</code>","text":"<p><code>\" %indicator% %message% (%elapsed:6s%, %memory:6s%)\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format::DEBUG_NO_ANSI","title":"<code>DEBUG_NO_ANSI = 7</code>","text":"<p><code>\" %message% (%elapsed:6s%, %memory:6s%)\"</code></p>"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format-methods","title":"Methods","text":""},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#debug?","title":"<code>#debug?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#debug_no_ansi?","title":"<code>#debug_no_ansi?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#format","title":"<code>#format : String</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#normal?","title":"<code>#normal?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#normal_no_ansi?","title":"<code>#normal_no_ansi?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#verbose?","title":"<code>#verbose?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#verbose_no_ansi?","title":"<code>#verbose_no_ansi?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#very_verbose?","title":"<code>#very_verbose?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/Format/#Athena::Console::Helper::ProgressIndicator::Format#very_verbose_no_ansi?","title":"<code>#very_verbose_no_ansi?</code>","text":"View source"},{"location":"Console/Helper/ProgressIndicator/PlaceholderFormatter/","title":"PlaceholderFormatter","text":""},{"location":"Console/Helper/ProgressIndicator/PlaceholderFormatter/#Athena::Console::Helper::ProgressIndicator::PlaceholderFormatter","title":"alias <code>Athena::Console::Helper::ProgressIndicator::PlaceholderFormatter</code>","text":"<p>Represents the expected type of a Placeholder Formatter.</p> Alias definition <code>Athena::Console::Helper::ProgressIndicator -&gt; String</code>"},{"location":"Console/Helper/Question/","title":"Question","text":""},{"location":"Console/Helper/Question/#Athena::Console::Helper::Question","title":"class <code>Athena::Console::Helper::Question</code> inherits <code>Athena::Console::Helper</code>","text":"<p>Provides a method to ask the user for more information; such as to confirm an action, or to provide additional values.</p> <p>See <code>ACON::Question</code> namespace for more information.</p> Direct known subclasses <code>Athena::Console::Helper::AthenaQuestion</code>"},{"location":"Console/Helper/Question/#Athena::Console::Helper::Question-class-methods","title":"Class methods","text":""},{"location":"Console/Helper/Question/#Athena::Console::Helper::Question.disable_stty","title":"<code>.disable_stty : Nil</code>","text":"View source"},{"location":"Console/Helper/Question/#Athena::Console::Helper::Question-methods","title":"Methods","text":""},{"location":"Console/Helper/Question/#Athena::Console::Helper::Question#ask(input,output,question)","title":"<code>#ask(input : ACON::Input::Interface, output : ACON::Output::Interface, question : ACON::Question::Base)</code>","text":"View source"},{"location":"Console/Helper/Table/","title":"Table","text":""},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table","title":"class <code>Athena::Console::Helper::Table</code> inherits <code>Reference</code>","text":"<p>The Table helper can be used to display tabular data rendered to any <code>ACON::Output::Interface</code>.</p> <pre><code>+---------------+--------------------------+------------------+\n| ISBN          | Title                    | Author           |\n+---------------+--------------------------+------------------+\n| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |\n| 9971-5-0210-0 | A Tale of Two Cities     | Charles Dickens  |\n| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |\n| 80-902734-1-6 | And Then There Were None | Agatha Christie  |\n+---------------+--------------------------+------------------+\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--usage","title":"Usage","text":"<p>Most commonly, a table will consist of a header row followed by one or more data rows: <pre><code>@[ACONA::AsCommand(\"table\")]\nclass TableCommand &lt; ACON::Command\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    ACON::Helper::Table.new(output)\n      .headers(\"ISBN\", \"Title\", \"Author\")\n      .rows([\n        [\"99921-58-10-7\", \"Divine Comedy\", \"Dante Alighieri\"],\n        [\"9971-5-0210-0\", \"A Tale of Two Cities\", \"Charles Dickens\"],\n        [\"960-425-059-0\", \"The Lord of the Rings\", \"J. R. R. Tolkien\"],\n        [\"80-902734-1-6\", \"And Then There Were None\", \"Agatha Christie\"],\n      ])\n      .render\n\n    ACON::Command::Status::SUCCESS\n  end\nend\n</code></pre></p>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--separating-rows","title":"Separating Rows","text":"<p>Row separators can be added anywhere in the output by passing an <code>ACON::Helper::Table::Separator</code> as a row.</p> <pre><code>table\n  .rows([\n    [\"99921-58-10-7\", \"Divine Comedy\", \"Dante Alighieri\"],\n    [\"9971-5-0210-0\", \"A Tale of Two Cities\", \"Charles Dickens\"],\n    ACON::Helper::Table::Separator.new,\n    [\"960-425-059-0\", \"The Lord of the Rings\", \"J. R. R. Tolkien\"],\n    [\"80-902734-1-6\", \"And Then There Were None\", \"Agatha Christie\"],\n  ])\n</code></pre> <pre><code>+---------------+--------------------------+------------------+\n| ISBN          | Title                    | Author           |\n+---------------+--------------------------+------------------+\n| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |\n| 9971-5-0210-0 | A Tale of Two Cities     | Charles Dickens  |\n+---------------+--------------------------+------------------+\n| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |\n| 80-902734-1-6 | And Then There Were None | Agatha Christie  |\n+---------------+--------------------------+------------------+\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--headerfooter-titles","title":"Header/Footer Titles","text":"<p>Header and/or footer titles can optionally be added via the <code>#header_title</code> and/or <code>#footer_title</code> methods.</p> <pre><code>table\n  .header_title(\"Books\")\n  .footer_title(\"Page 1/2\")\n</code></pre> <pre><code>+---------------+----------- Books --------+------------------+\n| ISBN          | Title                    | Author           |\n+---------------+--------------------------+------------------+\n| 99921-58-10-7 | Divine Comedy            | Dante Alighieri  |\n| 9971-5-0210-0 | A Tale of Two Cities     | Charles Dickens  |\n+---------------+--------------------------+------------------+\n| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien |\n| 80-902734-1-6 | And Then There Were None | Agatha Christie  |\n+---------------+--------- Page 1/2 -------+------------------+\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--column-sizing","title":"Column Sizing","text":"<p>By default, the width of each column is calculated automatically based on their contents. The <code>#column_widths</code> method can be used to set the column widths explicitly.</p> <pre><code>table\n  .column_widths(10, 0, 30)\n  .render\n</code></pre> <p>In this example, the first column's width will be <code>10</code>, the last column's width will be <code>30</code>, and the second column's width will be calculated automatically since it is zero. If you only want to set the width of a specific column, the <code>#column_width</code> method can be used.</p> <pre><code>table\n  .column_width(0, 10)\n  .column_width(2, 30)\n  .render\n</code></pre> <p>The resulting table would be:</p> <pre><code>+---------------+------------------ Books -+--------------------------------+\n| ISBN          | Title                    | Author                         |\n+---------------+--------------------------+--------------------------------+\n| 99921-58-10-7 | Divine Comedy            | Dante Alighieri                |\n| 9971-5-0210-0 | A Tale of Two Cities     | Charles Dickens                |\n+---------------+--------------------------+--------------------------------+\n| 960-425-059-0 | The Lord of the Rings    | J. R. R. Tolkien               |\n| 80-902734-1-6 | And Then There Were None | Agatha Christie                |\n+---------------+--------------------------+--------------------------------+\n</code></pre> <p>Notice that the width of the first column is greater than 10 characters wide. This is because column widths are always considered as the minimum width. If the content doesn't fit, it will be automatically increased to the longest content length.</p>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--max-width","title":"Max Width","text":"<p>If you would rather wrap the contents in multiple rows, the <code>#column_max_width</code> method can be used.</p> <pre><code>table\n  .column_max_width(0, 5)\n  .column_max_width(1, 10)\n  .render\n</code></pre> <p>This would cause the table to now be:</p> <pre><code>+-------+------------+-- Books -----------------------+\n| ISBN  | Title      | Author                         |\n+-------+------------+--------------------------------+\n| 99921 | Divine Com | Dante Alighieri                |\n| -58-1 | edy        |                                |\n| 0-7   |            |                                |\n|                (the rest of the rows...)            |\n+-------+------------+--------------------------------+\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--orientation","title":"Orientation","text":"<p>By default, the table contents are displayed as a normal table with the data being in rows, the first being the header row(s). The table can also be rendered vertically or horizontally via the <code>#vertical</code> and <code>#horizontal</code> methods respectively.</p> <p>For example, the same contents rendered vertically would be:</p> <pre><code>+----------------------------------+\n|   ISBN: 99921-58-10-7            |\n|  Title: Divine Comedy            |\n| Author: Dante Alighieri          |\n|----------------------------------|\n|   ISBN: 9971-5-0210-0            |\n|  Title: A Tale of Two Cities     |\n| Author: Charles Dickens          |\n|----------------------------------|\n|   ISBN: 960-425-059-0            |\n|  Title: The Lord of the Rings    |\n| Author: J. R. R. Tolkien         |\n|----------------------------------|\n|   ISBN: 80-902734-1-6            |\n|  Title: And Then There Were None |\n| Author: Agatha Christie          |\n+----------------------------------+\n</code></pre> <p>While horizontally, it would be:</p> <pre><code>+--------+-----------------+----------------------+-----------------------+--------------------------+\n| ISBN   | 99921-58-10-7   | 9971-5-0210-0        | 960-425-059-0         | 80-902734-1-6            |\n| Title  | Divine Comedy   | A Tale of Two Cities | The Lord of the Rings | And Then There Were None |\n| Author | Dante Alighieri | Charles Dickens      | J. R. R. Tolkien      | Agatha Christie          |\n+--------+-----------------+----------------------+-----------------------+--------------------------+\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--styles","title":"Styles","text":"<p>Up until now, all the tables have been rendered using the <code>default</code> style. The table helper comes with a few additional built in styles, including:</p> <ul> <li>borderless</li> <li>compact</li> <li>box</li> <li>double-box</li> </ul> <p>The desired can be set via the <code>#style</code> method.</p> <pre><code>table\n  .style(\"default\") # Same as not calling the method\n  .render\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--borderless","title":"borderless","text":"<pre><code>=============== ========================== ==================\n ISBN            Title                      Author\n=============== ========================== ==================\n 99921-58-10-7   Divine Comedy              Dante Alighieri\n 9971-5-0210-0   A Tale of Two Cities       Charles Dickens\n=============== ========================== ==================\n 960-425-059-0   The Lord of the Rings      J. R. R. Tolkien\n 80-902734-1-6   And Then There Were None   Agatha Christie\n=============== ========================== ==================\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--compact","title":"compact","text":"<pre><code>ISBN          Title                    Author\n99921-58-10-7 Divine Comedy            Dante Alighieri\n9971-5-0210-0 A Tale of Two Cities     Charles Dickens\n960-425-059-0 The Lord of the Rings    J. R. R. Tolkien\n80-902734-1-6 And Then There Were None Agatha Christie\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--box","title":"box","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 ISBN          \u2502 Title                    \u2502 Author           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2502\n\u2502 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2502\n\u2502 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--double-box","title":"double-box","text":"<pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n\u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n\u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--custom-styles","title":"Custom Styles","text":"<p>If you would rather something more personal, custom styles can also be defined by providing <code>#style</code> with an <code>ACON::Helper::Table::Style</code> instance.</p> <pre><code>table_style = ACON::Helper::Table::Style.new\n  .horizontal_border_chars(\"&lt;fg=magenta&gt;|&lt;/&gt;\")\n  .vertical_border_chars(\"&lt;info&gt;-&lt;/&gt;\")\n  .default_crossing_char(' ')\n\ntable\n  .style(table_style)\n  .render\n</code></pre> <p>Notice you can use the same style tags as you can with <code>ACON::Formatter::OutputStyleInterface</code>s. This is used by default to give some color to headers when allowed.</p> <p>Tip</p> <p>Custom styles can also be registered globally: <pre><code>ACON::Helper::Table.set_style_definition \"colorful\", table_style\n\n# ...\n\ntable.style(\"colorful\")\n</code></pre> This method can also be used to override the built-in styles.</p> <p>See <code>ACON::Helper::Table::Style</code> for more information.</p>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--table-cells","title":"Table Cells","text":"<p>The <code>ACON::Helper::Table::Cell</code> type can be used to style a specific cell. Such as customizing the fore/background color, the alignment of the text, or the overall format of the cell.</p> <p>See the related type for more information/examples.</p>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--spanning-multiple-columns-and-rows","title":"Spanning Multiple Columns and Rows","text":"<p>The <code>ACON::Helper::Table::Cell</code> type can also be used to add colspan and/or rowspan to a cell; which would make it span more than one column/row.</p> <pre><code>ACON::Helper::Table.new(output)\n  .headers(\"ISBN\", \"Title\", \"Author\")\n  .rows([\n    [\"99921-58-10-7\", \"Divine Comedy\", \"Dante Alighieri\"],\n    ACON::Helper::Table::Separator.new,\n    [ACON::Helper::Table::Cell.new(\"This value spans 3 columns.\", colspan: 3)],\n  ])\n  .render\n</code></pre> <p>This would result in:</p> <pre><code>+---------------+---------------+-----------------+\n| ISBN          | Title         | Author          |\n+---------------+---------------+-----------------+\n| 99921-58-10-7 | Divine Comedy | Dante Alighieri |\n+---------------+---------------+-----------------+\n| This value spans 3 columns.                     |\n+---------------+---------------+-----------------+\n</code></pre> <p>Tip</p> <p>This table cells with colspan and <code>center</code> alignment can be used to create header cells that span the entire table width: <pre><code>table\n  .headers([\n    [ACON::Helper::Table::Cell.new(\n      \"Main table title\",\n      colspan: 3,\n      style: ACON::Helper::Table::CellStyle.new(\n        align: :center\n      )\n    )],\n    %w(ISBN Title Author),\n  ])\n</code></pre> Would generate: <pre><code>+--------+--------+--------+\n|     Main table title     |\n+--------+--------+--------+\n| ISBN   | Title  | Author |\n+--------+--------+--------+\n</code></pre></p> <p>In a similar way, rowspan can be used to have a column span multiple rows. This is especially helpful for columns with line breaks.</p> <pre><code>ACON::Helper::Table.new(output)\n  .headers(\"ISBN\", \"Title\", \"Author\")\n  .rows([\n    [\n      \"978-0521567817\",\n      \"De Monarchia\",\n      ACON::Helper::Table::Cell.new(\"Dante Alighieri\\nspans multiple rows\", rowspan: 2),\n    ],\n    [\"978-0804169127\", \"Divine Comedy\"],\n  ])\n  .render\n</code></pre> <p>This would result in:</p> <pre><code>+----------------+---------------+---------------------+\n| ISBN           | Title         | Author              |\n+----------------+---------------+---------------------+\n| 978-0521567817 | De Monarchia  | Dante Alighieri     |\n| 978-0804169127 | Divine Comedy | spans multiple rows |\n+----------------+---------------+---------------------+\n</code></pre> <p>colspan and rowspan may also be used together to create any layout you can think of.</p>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table--modifying-rendered-tables","title":"Modifying Rendered Tables","text":"<p>The <code>#render</code> method requires providing the entire table's content in order to fully render the table. In some cases, that may not be possible if the data is generated dynamically. In such cases, the <code>#append_row</code> method can be used which functions similarly to <code>#add_row</code>, but will append the rows to an already rendered table.</p> <p>Info</p> <p>This feature is only available when the table is rendered in an <code>ACON::Output::Section</code>.</p> <pre><code>@[ACONA::AsCommand(\"table\")]\nclass TableCommand &lt; ACON::Command\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    section = output.section\n    table = ACON::Helper::Table.new(section)\n      .add_row(\"Foo\")\n\n    table.render\n\n    table.append_row \"Bar\"\n\n    ACON::Command::Status::SUCCESS\n  end\nend\n</code></pre> <p>This ultimately results in:</p> <pre><code>+-----+\n| Foo |\n| Bar |\n+-----+\n</code></pre>"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table-constructors","title":"Constructors","text":""},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table.new(output)","title":"<code>.new(output : ACON::Output::Interface)</code>","text":"View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table-class-methods","title":"Class methods","text":""},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table.set_style_definition(name,style)","title":"<code>.set_style_definition(name : String, style : ACON::Helper::Table::Style) : Nil</code>","text":"<p>Registers the provided style with the provided name.</p> <p>See custom styles.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table.style_definition(name)","title":"<code>.style_definition(name : String) : ACON::Helper::Table::Style</code>","text":"<p>Returns the <code>ACON::Helper::Table::Style</code> style with the provided name, raising an <code>ACON::Exceptions::InvalidArgument</code> if no style with that name is defined.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table-methods","title":"Methods","text":""},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#add_row(row)","title":"<code>#add_row(row : RowType) : self</code>","text":"<p>Adds a single new row to this table.</p> <pre><code># Existing rows are not removed.\ntable\n  .add_row(%w(One Two Three))\n  .add_row(%w(Foo Bar Baz))\n  .render\n</code></pre> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#add_row(*)","title":"<code>#add_row(*columns : CellType) : self</code>","text":"<p>Adds the provided columns as a single row to this table.</p> <pre><code># Existing rows are not removed.\ntable\n  .add_row(\"One\", \"Two\", \"Three\")\n  .add_row(\"Foo\", \"Bar\", \"Baz\")\n  .render\n</code></pre> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#add_rows(rows)","title":"<code>#add_rows(rows : Enumerable(RowType)) : self</code>","text":"<p>Similar to <code>#rows(rows : Enumerable(RowType))</code>, but appends the provided rows to this table.</p> <pre><code># Existing rows are not removed.\ntable\n  .add_rows([\n    %w(One Two Three),\n    %w(Foo Bar Baz),\n  ])\n  .render\n</code></pre> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#append_row(row)","title":"<code>#append_row(row : RowType) : self</code>","text":"<p>Appends row to an already rendered table.</p> <p>See modifying rendered tables</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#append_row(*)","title":"<code>#append_row(*columns : CellType) : self</code>","text":"<p>Appends the provided columns as a single row to an already rendered table.</p> <p>See modifying rendered tables</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#column_max_width(index,width)","title":"<code>#column_max_width(index : Int32, width : Int32) : self</code>","text":"<p>Sets the maximum width for the column at the provided index.</p> <p>See column sizing.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#column_style(index,style)","title":"<code>#column_style(index : Int32, style : ACON::Helper::Table::Style | String) : self</code>","text":"<p>Sets the style of the column at the provided index. style may either be an explicit <code>ACON::Helper::Table::Style</code>, or the name of the style to use if it is built-in, or was registered via <code>.set_style_definition</code>.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#column_style(index)","title":"<code>#column_style(index : Int32) : ACON::Helper::Table::Style</code>","text":"<p>Returns the <code>ACON::Helper::Table::Style</code> the column at the provided index is using, falling back on <code>#style</code>.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#column_width(index,width)","title":"<code>#column_width(index : Int32, width : Int32) : self</code>","text":"<p>Sets the minimum width for the column at the provided index.</p> <p>See column sizing.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#column_widths(widths)","title":"<code>#column_widths(widths : Enumerable(Int32)) : self</code>","text":"<p>Sets the minimum column widths to the provided widths.</p> <p>See column sizing.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#column_widths(*)","title":"<code>#column_widths(*widths : Int32) : self</code>","text":"<p>Sets the minimum column widths to the provided widths.</p> <p>See column sizing.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#footer_title(footer_title)","title":"<code>#footer_title(footer_title : String | Nil) : self</code>","text":"<p>Sets the table footer title.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#header_title(header_title)","title":"<code>#header_title(header_title : String | Nil) : self</code>","text":"<p>Sets the table header title.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#headers(headers)","title":"<code>#headers(headers : RowType) : self</code>","text":"View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#headers(headers)","title":"<code>#headers(headers : Enumerable(RowType)) : self</code>","text":"View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#headers(*)","title":"<code>#headers(*names : CellType) : self</code>","text":"View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#horizontal","title":"<code>#horizontal : self</code>","text":"<p>Changes this table's orientation to horizontal.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#render","title":"<code>#render</code>","text":"<p>Renders this table to the <code>ACON::Output::Interface</code> it was instantiated with.</p> <p>ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#row(index,row)","title":"<code>#row(index : Int32, row : RowType) : self</code>","text":"<p>Manually sets the provided row to the provided index.</p> <pre><code># Existing rows are not removed.\ntable\n  .add_row(%w(One Two Three))\n  .row(0, %w(Foo Bar Baz)) # Overrides row 0 to this row\n  .render\n</code></pre> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#rows(rows)","title":"<code>#rows(rows : RowType) : self</code>","text":"<p>Overrides the rows of this table to those provided in rows.</p> <pre><code>table\n  .rows(%w(Foo Bar Baz))\n  .render\n</code></pre> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#rows(rows)","title":"<code>#rows(rows : Enumerable(RowType)) : self</code>","text":"<p>Overrides the rows of this table to those provided in rows.</p> <pre><code>table\n  .rows([\n    %w(One Two Three),\n    %w(Foo Bar Baz),\n  ])\n  .render\n</code></pre> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#style(style)","title":"<code>#style(style : String | ACON::Helper::Table::Style) : self</code>","text":"<p>Sets the style of this table. style may either be an explicit <code>ACON::Helper::Table::Style</code>, or the name of the style to use if it is built-in, or was registered via <code>.set_style_definition</code>.</p> <p>See styles and custom styles.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#style","title":"<code>#style : ACON::Helper::Table::Style</code>","text":"<p>Returns the <code>ACON::Helper::Table::Style</code> used by this table.</p> View source"},{"location":"Console/Helper/Table/#Athena::Console::Helper::Table#vertical","title":"<code>#vertical : self</code>","text":"<p>Changes this table's orientation to vertical.</p> View source"},{"location":"Console/Helper/Table/Alignment/","title":"Alignment","text":""},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment","title":"enum <code>Athena::Console::Helper::Table::Alignment</code>","text":"<p>Represents how the text within a cell should be aligned.</p>"},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment-members","title":"Members","text":""},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment::LEFT","title":"<code>LEFT = 0</code>","text":"<p>Aligns the text to the left of the cell.</p> <pre><code>+-----------------+\n| Text            |\n+-----------------+\n</code></pre>"},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment::RIGHT","title":"<code>RIGHT = 1</code>","text":"<p>Aligns the text to the right of the cell.</p> <pre><code>+-----------------+\n|            Text |\n+-----------------+\n</code></pre>"},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment::CENTER","title":"<code>CENTER = 2</code>","text":"<p>Centers the text within the cell.</p> <pre><code>+-----------------+\n|      Text       |\n+-----------------+\n</code></pre>"},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment-methods","title":"Methods","text":""},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment#center?","title":"<code>#center?</code>","text":"View source"},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment#left?","title":"<code>#left?</code>","text":"View source"},{"location":"Console/Helper/Table/Alignment/#Athena::Console::Helper::Table::Alignment#right?","title":"<code>#right?</code>","text":"View source"},{"location":"Console/Helper/Table/Cell/","title":"Cell","text":""},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell","title":"class <code>Athena::Console::Helper::Table::Cell</code> inherits <code>Reference</code>","text":"<p>Represents a cell that can span more than one column/row and/or have a unique style. The cell may also have a value, which represents the value to display in the cell.</p> <p>For example:</p> <pre><code>table\n  .rows([\n    [\n      \"Foo\",\n      ACON::Helper::Table::Cell.new(\n        \"Bar\",\n        style: ACON::Helper::Table::CellStyle.new(\n          align: :center,\n          foreground: \"red\",\n          background: \"green\"\n        )\n      ),\n    ],\n  ])\n</code></pre> <p>See the table docs and <code>ACON::Helper::Table::CellStyle</code> for more information.</p> Direct known subclasses <code>Athena::Console::Helper::Table::Separator</code>"},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell-constructors","title":"Constructors","text":""},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell.new(value,rowspan,colspan,style)","title":"<code>.new(value : _ = \"\", rowspan : Int32 = 1, colspan : Int32 = 1, style : Table::CellStyle | Nil = nil)</code>","text":"View source"},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell-methods","title":"Methods","text":""},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell#colspan","title":"<code>#colspan : Int32</code>","text":"<p>Returns how many columns this cell should span.</p> View source"},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell#rowspan","title":"<code>#rowspan : Int32</code>","text":"<p>Returns how many rows this cell should span.</p> View source"},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell#style","title":"<code>#style : Table::CellStyle | ::Nil</code>","text":"<p>Returns the style representing how this cell should be styled.</p> View source"},{"location":"Console/Helper/Table/Cell/#Athena::Console::Helper::Table::Cell#to_s(io)","title":"<code>#to_s(io : IO) : Nil</code>","text":"<p>Appends a short String representation of this object which includes its class name and its object address.</p> <pre><code>class Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # =&gt; #&lt;Person:0x10a199f20&gt;\n</code></pre> View source"},{"location":"Console/Helper/Table/CellStyle/","title":"CellStyle","text":""},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle","title":"struct <code>Athena::Console::Helper::Table::CellStyle</code> inherits <code>Struct</code>","text":"<p>Represents the styling for a specific <code>ACON::Helper::Table::Cell</code>.</p>"},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle-constructors","title":"Constructors","text":""},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle.new(foreground,background,align,format)","title":"<code>.new(foreground : String = \"default\", background : String = \"default\", align : ACON::Helper::Table::Alignment = :left, format : String | Nil = nil)</code>","text":"View source"},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle-methods","title":"Methods","text":""},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle#align","title":"<code>#align : ACON::Helper::Table::Alignment</code>","text":"<p>How the text should be aligned in the cell.</p> <p>See <code>ACON::Helper::Table::Alignment</code>.</p> View source"},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle#background","title":"<code>#background : String</code>","text":"<p>Returns the background color for this cell.</p> <p>Can be any color string supported via ACON::Formatter::OutputStyleInterface, e.g. named (<code>\"red\"</code>) or hexadecimal (<code>\"#38bdc2\"</code>) colors.</p> View source"},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle#foreground","title":"<code>#foreground : String</code>","text":"<p>Returns the foreground color for this cell.</p> <p>Can be any color string supported via ACON::Formatter::OutputStyleInterface, e.g. named (<code>\"red\"</code>) or hexadecimal (<code>\"#38bdc2\"</code>) colors.</p> View source"},{"location":"Console/Helper/Table/CellStyle/#Athena::Console::Helper::Table::CellStyle#format","title":"<code>#format : String | ::Nil</code>","text":"<p>A <code>sprintf</code> format string representing the content of the cell. Should have a single <code>%s</code> representing the cell's value.</p> <p>Can be used to reuse custom style tags. E.g. <code>\"&lt;fire&gt;%s&lt;/&gt;\"</code>.</p> View source"},{"location":"Console/Helper/Table/CellType/","title":"CellType","text":""},{"location":"Console/Helper/Table/CellType/#Athena::Console::Helper::Table::CellType","title":"alias <code>Athena::Console::Helper::Table::CellType</code>","text":"<p>The possible types that are accepted as cell values. They are all eventually turned into strings.</p> Alias definition <code>Athena::Console::Helper::Table::Cell | Bool | Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | String | UInt128 | UInt16 | UInt32 | UInt64 | UInt8 | Nil</code>"},{"location":"Console/Helper/Table/RowType/","title":"RowType","text":""},{"location":"Console/Helper/Table/RowType/#Athena::Console::Helper::Table::RowType","title":"alias <code>Athena::Console::Helper::Table::RowType</code>","text":"<p>The possible types that represent a row.</p> Alias definition <code>Athena::Console::Helper::Table::Separator | Enumerable(Athena::Console::Helper::Table::Cell | Bool | Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | String | UInt128 | UInt16 | UInt32 | UInt64 | UInt8 | Nil)</code>"},{"location":"Console/Helper/Table/Separator/","title":"Separator","text":""},{"location":"Console/Helper/Table/Separator/#Athena::Console::Helper::Table::Separator","title":"class <code>Athena::Console::Helper::Table::Separator</code> inherits <code>Athena::Console::Helper::Table::Cell</code>","text":"<p>Represents a line that separates one or more rows.</p> <p>See the separating rows section for more information.</p>"},{"location":"Console/Helper/Table/Separator/#Athena::Console::Helper::Table::Separator-constructors","title":"Constructors","text":""},{"location":"Console/Helper/Table/Separator/#Athena::Console::Helper::Table::Separator.new(rowspan,colspan,style)","title":"<code>.new(rowspan : Int32 = 1, colspan : Int32 = 1, style : Table::CellStyle | Nil = nil)</code>","text":"View source"},{"location":"Console/Helper/Table/Style/","title":"Style","text":""},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style","title":"class <code>Athena::Console::Helper::Table::Style</code> inherits <code>Reference</code>","text":"<p>Represents the overall style for a table. Including the characters that make up the row/column separators, crosses, cell formats, and default alignment.</p> <p>This class provides a fluent interface for configuring each part of the style.</p>"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style-methods","title":"Methods","text":""},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#align(align)","title":"<code>#align(align : ACON::Helper::Table::Alignment) : self</code>","text":"<p>Sets the default cell alignment for the table.</p> <p>See <code>ACON::Helper::Table::Alignment</code>.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#border_format(format)","title":"<code>#border_format(format : String) : self</code>","text":"<p>Sets the <code>sprintf</code> format string for the border, defaulting to <code>\"%s\"</code>.</p> <p>For example, if set to <code>\"~%s~\"</code> with the cell's content being <code>text</code>:</p> <pre><code>~+------+~\n~|~ text ~|~\n~+------+~\n</code></pre> <p>Warning</p> <p>Customizing this format can mess with the formatting of the whole table.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#cell_header_format(format)","title":"<code>#cell_header_format(format : String) : self</code>","text":"<p>Sets the <code>sprintf</code> format string used for table headings, defaulting to <code>\"&lt;info&gt;%s&lt;/info&gt;\"</code>.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#cell_row_content_format(format)","title":"<code>#cell_row_content_format(format : String) : self</code>","text":"<p>Sets the <code>sprintf</code> format string used for cell contents, defaulting to <code>\" %s \"</code>.</p> <p>For example, if set to <code>\" =%s= \"</code> with the cell's content being <code>text</code>:</p> <pre><code>+--------+\n| =text= |\n+--------+\n</code></pre> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#cell_row_format(format)","title":"<code>#cell_row_format(format : String) : self</code>","text":"<p>Sets the <code>sprintf</code> format string used for cell contents, defaulting to <code>\"%s\"</code>.</p> <p>For example, if set to <code>\"~%s~\"</code> with the cell's content being <code>text</code>:</p> <pre><code>+------+\n|~ text ~|\n+------+\n</code></pre> <p>Warning</p> <p>Customizing this format can mess with the formatting of the whole table.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#clone","title":"<code>#clone</code>","text":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#crossing_chars(cross,top_left,top_middle,top_right,middle_right,bottom_right,bottom_middle,bottom_left,middle_left,top_left_bottom,top_middle_bottom,top_right_bottom)","title":"<code>#crossing_chars(cross : String | Char, top_left : String | Char, top_middle : String | Char, top_right : String | Char, middle_right : String | Char, bottom_right : String | Char, bottom_middle : String | Char, bottom_left : String | Char, middle_left : String | Char, top_left_bottom : String | Char | Nil = nil, top_middle_bottom : String | Char | Nil = nil, top_right_bottom : String | Char | Nil = nil) : self</code>","text":"<p>Sets the crossing characters individually, defaulting to <code>\"+\"</code>. See <code>#default_crossing_char(char)</code> to default them all to a single character.</p> <pre><code>1\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25502\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25503\n\u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n8\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25500\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25504\n\u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n\u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n8\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25000\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25004\n\u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n\u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n7\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25506\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u25505\n</code></pre> <p>Legend:</p> <ul> <li>#0 cross</li> <li>#1 top_left</li> <li>#2 top_middle</li> <li>#3 top_right</li> <li>#4 middle_right</li> <li>#5 bottom_right</li> <li>#6 bottom_middle</li> <li>#7 bottom_left</li> <li> <p>#8 middle_left</p> </li> <li> <p>#8 top_left_bottom - defaults to middle_left if <code>nil</code></p> </li> <li>#0 top_middle_bottom - defaults to cross if <code>nil</code></li> <li>#4 top_right_bottom - defaults to middle_right if <code>nil</code></li> </ul> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#default_crossing_char(char)","title":"<code>#default_crossing_char(char : String | Char) : self</code>","text":"<p>Sets the default character used for each cross type.</p> <p>See <code>#crossing_chars</code>.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#footer_title_format(format)","title":"<code>#footer_title_format(format : String) : self</code>","text":"<p>Sets the <code>sprintf</code> format string used for footer titles, defaulting to <code>\"&lt;fg=black;bg=white;options=bold&gt; %s &lt;/&gt;\"</code>.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#header_title_format(format)","title":"<code>#header_title_format(format : String) : self</code>","text":"<p>Sets the <code>sprintf</code> format string used for header titles, defaulting to <code>\"&lt;fg=black;bg=white;options=bold&gt; %s &lt;/&gt;\"</code>.</p> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#horizontal_border_chars(outside,inside)","title":"<code>#horizontal_border_chars(outside : String | Char, inside : String | Char | Nil = nil) : self</code>","text":"<p>Sets the horizontal border chars, defaulting to <code>\"-\"</code>.</p> <p>inside defaults to outside if not provided.</p> <p>For example:</p> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n1 ISBN          2 Title                    \u2502 Author           \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n\u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n\u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n\u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>Legend:</p> <ul> <li>#1 outside</li> <li>#2 inside</li> </ul> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#padding_char(char)","title":"<code>#padding_char(char : Char) : self</code>","text":"<p>Sets the the character that is added to the cell to ensure its content has the correct <code>ACON::Helper::Table::Alignment</code>, defaulting to <code>' '</code>.</p> <p>For example, if the padding character was <code>'_'</code> with a left alignment:</p> <pre><code>+-----+\n| 7 __|\n+-----+\n</code></pre> View source"},{"location":"Console/Helper/Table/Style/#Athena::Console::Helper::Table::Style#vertical_border_chars(outside,inside)","title":"<code>#vertical_border_chars(outside : String | Char, inside : String | Char | Nil = nil) : self</code>","text":"<p>Sets the vertical border chars, defaulting to <code>\"|\"</code>.</p> <p>inside defaults to outside if not provided.</p> <p>For example:</p> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2564\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 ISBN          \u2502 Title                    \u2502 Author           \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u25501\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 99921-58-10-7 \u2502 Divine Comedy            \u2502 Dante Alighieri  \u2551\n\u2551 9971-5-0210-0 \u2502 A Tale of Two Cities     \u2502 Charles Dickens  \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 960-425-059-0 \u2502 The Lord of the Rings    \u2502 J. R. R. Tolkien \u2551\n\u2551 80-902734-1-6 \u2502 And Then There Were None \u2502 Agatha Christie  \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2567\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre> <p>Legend:</p> <ul> <li>#1 outside</li> <li>#2 inside</li> </ul> View source"},{"location":"Console/Input/","title":"Input","text":""},{"location":"Console/Input/#Athena::Console::Input","title":"abstract class <code>Athena::Console::Input</code> inherits <code>Reference</code>","text":"<p>Common base implementation of <code>ACON::Input::Interface</code>.</p> Included modules <code>Athena::Console::Input::Streamable</code> Direct known subclasses <code>Athena::Console::Input::ARGV</code> <code>Athena::Console::Input::Hash</code>"},{"location":"Console/Input/#Athena::Console::Input-constructors","title":"Constructors","text":""},{"location":"Console/Input/#Athena::Console::Input.new(definition)","title":"<code>.new(definition : ACON::Input::Definition | Nil = nil)</code>","text":"View source"},{"location":"Console/Input/#Athena::Console::Input-methods","title":"Methods","text":""},{"location":"Console/Input/#Athena::Console::Input#argument(name,type)","title":"<code>#argument(name : String, type : T.class) : T forall T</code>","text":"<p>Returns the value of the argument with the provided name converted to the desired type. This method is preferred over <code>#argument</code> since it provides better typing.</p> <p>Raises an <code>ACON::Exceptions::Logic</code> if the actual argument value could not be converted to a type.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#argument(name)","title":"<code>#argument(name : String) : String | Nil</code>","text":"<p>Returns the raw string value of the argument with the provided name, or <code>nil</code> if is optional and was not provided.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#arguments","title":"<code>#arguments : ::Hash</code>","text":"<p>Returns a <code>::Hash</code> representing the keys and values of the parsed arguments of <code>self</code>.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#bind(definition)","title":"<code>#bind(definition : ACON::Input::Definition) : Nil</code>","text":"<p>Binds the provided definition to <code>self</code>. Essentially provides what should be parsed from <code>self</code>.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#escape_token(token)","title":"<code>#escape_token(token : String) : String</code>","text":"<p>Escapes a token via Process.quote if it contains unsafe characters.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#has_argument?(name)","title":"<code>#has_argument?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has an argument with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#has_option?(name)","title":"<code>#has_option?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has an option with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#interactive=(interactive)","title":"<code>#interactive=(interactive : Bool)</code>","text":"<p>Sets if <code>self</code> is <code>#interactive?</code>.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#interactive?","title":"<code>#interactive? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> represents an interactive input, such as a TTY.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#option(name,type)","title":"<code>#option(name : String, type : T.class) : T forall T</code>","text":"<p>Returns the value of the option with the provided name converted to the desired type. This method is preferred over <code>#option</code> since it provides better typing.</p> <p>Raises an <code>ACON::Exceptions::Logic</code> if the actual option value could not be converted to a type.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#option(name)","title":"<code>#option(name : String) : String | Nil</code>","text":"<p>Returns the raw string value of the option with the provided name, or <code>nil</code> if is optional and was not provided.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#options","title":"<code>#options : ::Hash</code>","text":"<p>Returns a <code>::Hash</code> representing the keys and values of the parsed options of <code>self</code>.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#set_argument(name,value)","title":"<code>#set_argument(name : String, value : _) : Nil</code>","text":"<p>Sets the value of the argument with the provided name.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#set_option(name,value)","title":"<code>#set_option(name : String, value : _) : Nil</code>","text":"<p>Sets the value of the option with the provided name.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#stream","title":"<code>#stream : IO | ::Nil</code>","text":"<p>Returns the input stream.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#stream=(stream)","title":"<code>#stream=(stream : IO | Nil)</code>","text":"<p>Sets the input stream.</p> View source"},{"location":"Console/Input/#Athena::Console::Input#validate","title":"<code>#validate : Nil</code>","text":"<p>Validates the input, asserting all of the required parameters are provided. Raises <code>ACON::Exceptions::ValidationFailed</code> if not valid.</p> View source"},{"location":"Console/Input/ARGV/","title":"ARGV","text":""},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV","title":"class <code>Athena::Console::Input::ARGV</code> inherits <code>Athena::Console::Input</code>","text":"<p>An <code>ACON::Input::Interface</code> based on ARGV.</p> Direct known subclasses <code>Athena::Console::Completion::Input</code> <code>Athena::Console::Input::StringLine</code>"},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV-constructors","title":"Constructors","text":""},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV.new(tokens,definition)","title":"<code>.new(tokens : Array(String) = ::ARGV, definition : ACON::Input::Definition | Nil = nil)</code>","text":"View source"},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV.new(*)","title":"<code>.new(*tokens : String)</code>","text":"View source"},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV-methods","title":"Methods","text":""},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV#first_argument","title":"<code>#first_argument : String | ::Nil</code>","text":"<p>Returns the first argument from the raw un-parsed input. Mainly used to get the command that should be executed. ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV#has_parameter?(*,only_params)","title":"<code>#has_parameter?(*values : String, only_params : Bool = false) : Bool</code>","text":"<p>Returns <code>true</code> if the raw un-parsed input contains one of the provided values.</p> <p>This method is to be used to introspect the input parameters before they have been validated. It must be used carefully. It does not necessarily return the correct result for short options when multiple flags are combined in the same option.</p> <p>If only_params is <code>true</code>, only real parameters are checked. I.e. skipping those that come after the <code>--</code> option.</p> View source"},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV#parameter(value,default,only_params)","title":"<code>#parameter(value : String, default : _ = false, only_params : Bool = false)</code>","text":"<p>Returns the value of a raw un-parsed parameter for the provided value..</p> <p>This method is to be used to introspect the input parameters before they have been validated. It must be used carefully. It does not necessarily return the correct result for short options when multiple flags are combined in the same option.</p> <p>If only_params is <code>true</code>, only real parameters are checked. I.e. skipping those that come after the <code>--</code> option.</p> View source"},{"location":"Console/Input/ARGV/#Athena::Console::Input::ARGV#to_s(io)","title":"<code>#to_s(io : IO) : Nil</code>","text":"<p>Returns a string representation of the args passed to the command.</p> View source"},{"location":"Console/Input/Argument/","title":"Argument","text":""},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument","title":"class <code>Athena::Console::Input::Argument</code> inherits <code>Reference</code>","text":"<p>Represents a value (or array of values) provided to a command as a ordered positional argument, that can either be required or optional, optionally with a default value and/or description.</p> <p>Arguments are strings separated by spaces that come after the command name. For example, <code>./console test arg1 \"Arg2 with spaces\"</code>.</p> <p>Arguments can be added via the <code>ACON::Command#argument</code> method, or by instantiating one manually as part of an <code>ACON::Input::Definition</code>. The value of the argument could then be accessed via one of the <code>ACON::Input::Interface#argument</code> overloads.</p> <p>See <code>ACON::Input::Interface</code> for more examples on how arguments/options are parsed, and how they can be accessed.</p>"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument-constructors","title":"Constructors","text":""},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument.new(name,mode,description,default,suggested_values)","title":"<code>.new(name : String, mode : ACON::Input::Argument::Mode = :optional, description : String = \"\", default = nil, suggested_values : Array(String) | Proc(ACON::Completion::Input, Array(String)) | Nil = nil)</code>","text":"View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument-methods","title":"Methods","text":""},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#complete(input,suggestions)","title":"<code>#complete(input : ACON::Completion::Input, suggestions : ACON::Completion::Suggestions) : Nil</code>","text":"<p>Determines what values should be added to the possible suggestions based on the provided input.</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#default(type)","title":"<code>#default(type : T.class) : T forall T</code>","text":"<p>Returns the default value of <code>self</code>, if any, converted to the provided type.</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#default","title":"<code>#default</code>","text":"<p>Returns the default value of <code>self</code>, if any.</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#default=(default)","title":"<code>#default=(default = nil)</code>","text":"<p>Sets the default value of <code>self</code>.</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#description","title":"<code>#description : String</code>","text":"<p>Returns the description of <code>self</code>.</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#has_completion?","title":"<code>#has_completion? : Bool</code>","text":"<p>Returns <code>true</code> if this argument is able to suggest values, otherwise <code>false</code></p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#is_array?","title":"<code>#is_array? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> expects an array of values, otherwise <code>false</code>. ameba:disable Naming/PredicateName</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#mode","title":"<code>#mode : ACON::Input::Argument::Mode</code>","text":"<p>Returns the <code>ACON::Input::Argument::Mode</code> of <code>self</code>.</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#name","title":"<code>#name : String</code>","text":"<p>Returns the name of the <code>self</code>.</p> View source"},{"location":"Console/Input/Argument/#Athena::Console::Input::Argument#required?","title":"<code>#required? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> is a required argument, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Argument/Mode/","title":"Mode","text":""},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode","title":"enum <code>Athena::Console::Input::Argument::Mode</code>","text":"<p>Represents the possible modes of an <code>ACON::Input::Argument</code>, that describe the \"type\" of the argument.</p> <p>Modes can also be combined using the Enum.[] macro. For example, <code>ACON::Input::Argument::Mode[:required, :is_array]</code> which defines a required array argument.</p>"},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode-members","title":"Members","text":""},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode::REQUIRED","title":"<code>REQUIRED = 1</code>","text":"<p>Represents a required argument that MUST be provided. Otherwise the command will not run.</p>"},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode::OPTIONAL","title":"<code>OPTIONAL = 2</code>","text":"<p>Represents an optional argument that could be omitted.</p>"},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode::IS_ARRAY","title":"<code>IS_ARRAY = 4</code>","text":"<p>Represents an argument that accepts a variable amount of values. Arguments of this type must be last.</p>"},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode::None","title":"<code>None = 0</code>","text":""},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode::All","title":"<code>All = 7</code>","text":""},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode-methods","title":"Methods","text":""},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode#is_array?","title":"<code>#is_array?</code>","text":"View source"},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode#none?","title":"<code>#none?</code>","text":"View source"},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode#optional?","title":"<code>#optional?</code>","text":"View source"},{"location":"Console/Input/Argument/Mode/#Athena::Console::Input::Argument::Mode#required?","title":"<code>#required?</code>","text":"View source"},{"location":"Console/Input/Definition/","title":"Definition","text":""},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition","title":"class <code>Athena::Console::Input::Definition</code> inherits <code>Reference</code>","text":"<p>Represents a collection of <code>ACON::Input::Argument</code>s and <code>ACON::Input::Option</code>s that are to be parsed from an <code>ACON::Input::Interface</code>.</p> <p>Can be used to set the inputs of an <code>ACON::Command</code> via the <code>ACON::Command#definition=</code> method if so desired, instead of using the dedicated methods.</p>"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition-constructors","title":"Constructors","text":""},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition.new(definition)","title":"<code>.new(definition : ::Hash(String, ACON::Input::Option) | ::Hash(String, ACON::Input::Argument)) : self</code>","text":"View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition.new(definition)","title":"<code>.new(definition : Array(ACON::Input::Argument | ACON::Input::Option) = Array(ACON::Input::Argument | ACON::Input::Option).new)</code>","text":"View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition.new(*)","title":"<code>.new(*definitions : ACON::Input::Argument | ACON::Input::Option) : self</code>","text":"View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition-methods","title":"Methods","text":""},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#<<(arguments)","title":"<code>#&lt;&lt;(arguments : Array(ACON::Input::Argument | ACON::Input::Option)) : Nil</code>","text":"<p>Adds the provided arguments to <code>self</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#<<(argument)","title":"<code>#&lt;&lt;(argument : ACON::Input::Argument) : Nil</code>","text":"<p>Adds the provided argument to <code>self</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#<<(option)","title":"<code>#&lt;&lt;(option : ACON::Input::Option) : Nil</code>","text":"<p>Adds the provided options to <code>self</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#argument(name_or_index)","title":"<code>#argument(name_or_index : String | Int32) : ACON::Input::Argument</code>","text":"<p>Returns the <code>ACON::Input::Argument</code> with the provided name_or_index, otherwise raises <code>ACON::Exceptions::InvalidArgument</code> if that argument is not defined.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#argument_count","title":"<code>#argument_count : Int32</code>","text":"<p>Returns the number of <code>ACON::Input::Argument</code>s defined within <code>self</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#argument_defaults","title":"<code>#argument_defaults : ::Hash</code>","text":"<p>Returns a <code>::Hash</code> whose keys/values represent the names and default values of the <code>ACON::Input::Argument</code>s defined within <code>self</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#arguments","title":"<code>#arguments : ::Hash(String, ACON::Input::Argument)</code>","text":"View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#arguments=(arguments)","title":"<code>#arguments=(arguments : Array(ACON::Input::Argument)) : Nil</code>","text":"<p>Overrides the arguments of <code>self</code> to those in the provided arguments array.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#definition=(definition)","title":"<code>#definition=(definition : Array(ACON::Input::Argument | ACON::Input::Option)) : Nil</code>","text":"<p>Overrides the arguments and options of <code>self</code> to those in the provided definition.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#has_argument?(name_or_index)","title":"<code>#has_argument?(name_or_index : String | Int32) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has an argument with the provided name_or_index.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#has_negation?(name)","title":"<code>#has_negation?(name : String | Char) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has a negation with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#has_option?(name_or_index)","title":"<code>#has_option?(name_or_index : String | Int32) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has an option with the provided name_or_index.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#has_shortcut?(name)","title":"<code>#has_shortcut?(name : String | Char) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has a shortcut with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#negation_to_name(negation)","title":"<code>#negation_to_name(negation : String) : String</code>","text":"<p>Returns the name of the <code>ACON::Input::Option</code> that maps to the provided negation.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#option(name_or_index)","title":"<code>#option(name_or_index : String | Int32) : ACON::Input::Option</code>","text":"<p>Returns the <code>ACON::Input::Option</code> with the provided name_or_index, otherwise raises <code>ACON::Exceptions::InvalidArgument</code> if that option is not defined.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#option_defaults","title":"<code>#option_defaults : ::Hash</code>","text":"<p>Returns a <code>::Hash</code> whose keys/values represent the names and default values of the <code>ACON::Input::Option</code>s defined within <code>self</code>.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#option_for_shortcut(shortcut)","title":"<code>#option_for_shortcut(shortcut : String | Char) : ACON::Input::Option</code>","text":"<p>Returns the name of the <code>ACON::Input::Option</code> with the provided shortcut.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#options","title":"<code>#options : ::Hash(String, ACON::Input::Option)</code>","text":"View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#options=(options)","title":"<code>#options=(options : Array(ACON::Input::Option)) : Nil</code>","text":"<p>Overrides the options of <code>self</code> to those in the provided options array.</p> View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#required_argument_count","title":"<code>#required_argument_count : Int32</code>","text":"View source"},{"location":"Console/Input/Definition/#Athena::Console::Input::Definition#synopsis(short)","title":"<code>#synopsis(short : Bool = false) : String</code>","text":"<p>Returns an optionally short synopsis based on the <code>ACON::Input::Argument</code>s and <code>ACON::Input::Option</code>s defined within <code>self</code>.</p> <p>The synopsis being the docopt string representing the expected options/arguments. E.g. <code>&lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]</code>. ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Console/Input/Hash/","title":"Hash","text":""},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash","title":"class <code>Athena::Console::Input::Hash</code> inherits <code>Athena::Console::Input</code>","text":"<p>An <code>ACON::Input::Interface</code> based on a Hash.</p> <p>Primarily useful for manually invoking commands, or as part of tests.</p> <pre><code>ACON::Input::Hash.new(name: \"George\", \"--foo\": \"bar\")\n</code></pre> <p>The keys of the input should be the name of the argument. Options should have <code>--</code> prefixed to their name.</p>"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash-constructors","title":"Constructors","text":""},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash.new(args,definition)","title":"<code>.new(args : ::Hash = ::Hash(NoReturn, NoReturn).new, definition : ACON::Input::Definition | Nil = nil)</code>","text":"View source"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash.new(args,definition)","title":"<code>.new(args : Enumerable, definition : ACON::Input::Definition | Nil = nil)</code>","text":"View source"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash.new(*)","title":"<code>.new(*args : _) : self</code>","text":"View source"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash.new(**)","title":"<code>.new : self</code>","text":"View source"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash-methods","title":"Methods","text":""},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash#first_argument","title":"<code>#first_argument : String | ::Nil</code>","text":"<p>Returns the first argument from the raw un-parsed input. Mainly used to get the command that should be executed.</p> View source"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash#has_parameter?(*,only_params)","title":"<code>#has_parameter?(*values : String, only_params : Bool = false) : Bool</code>","text":"<p>Returns <code>true</code> if the raw un-parsed input contains one of the provided values.</p> <p>This method is to be used to introspect the input parameters before they have been validated. It must be used carefully. It does not necessarily return the correct result for short options when multiple flags are combined in the same option.</p> <p>If only_params is <code>true</code>, only real parameters are checked. I.e. skipping those that come after the <code>--</code> option.</p> View source"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash#parameter(value,default,only_params)","title":"<code>#parameter(value : String, default : _ = false, only_params : Bool = false)</code>","text":"<p>Returns the value of a raw un-parsed parameter for the provided value..</p> <p>This method is to be used to introspect the input parameters before they have been validated. It must be used carefully. It does not necessarily return the correct result for short options when multiple flags are combined in the same option.</p> <p>If only_params is <code>true</code>, only real parameters are checked. I.e. skipping those that come after the <code>--</code> option.</p> View source"},{"location":"Console/Input/Hash/#Athena::Console::Input::Hash#to_s(io)","title":"<code>#to_s(io : IO) : Nil</code>","text":"<p>Returns a string representation of the args passed to the command.</p> View source"},{"location":"Console/Input/Interface/","title":"Interface","text":""},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface","title":"module <code>Athena::Console::Input::Interface</code>","text":"<p><code>Athena::Console</code> uses a dedicated interface for representing an input source. This allows it to have multiple more specialized implementations as opposed to being tightly coupled to <code>STDIN</code> or a raw IO. This interface represents the methods that must be implemented, however implementations can add additional functionality.</p> <p>All input sources follow the docopt standard, used by many CLI utility tools. Documentation on this type covers functionality/logic common to all inputs. See each type for more specific information.</p> <p>Option and argument values can be accessed via <code>ACON::Input::Interface#option</code> and <code>ACON::Input::Interface#argument</code> respectively. There are two overloads, the first accepting just the name of the option/argument as a <code>String</code>, returning the raw value as a <code>String?</code>, with arrays being represented as a comma separated list. The other two overloads accept a <code>T.class</code> representing the desired type the value should be parsed as. For example, given a command with two required and one array arguments:</p> <pre><code>protected def configure : Nil\n  self\n    .argument(\"bool\", :required)\n    .argument(\"int\", :required)\n    .argument(\"floats\", :is_array)\nend\n</code></pre> <p>Assuming the invocation is  <code>./console test false 10 3.14 172.0 123.7777</code>, the values could then be accessed like:</p> <pre><code>protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n  input.argument \"bool\"       # =&gt; \"false\" : String\n  input.argument \"bool\", Bool # =&gt; false : Bool\n  input.argument \"int\", Int8  # =&gt; 10 : Int8\n\n  input.argument \"floats\"                 # =&gt; \"3.14,172.0,123.7777\" : String\n  input.argument \"floats\", Array(Float64) # =&gt; [3.14, 172.0, 123.7777] : Array(Float64)\n\n  ACON::Command::Status::SUCCESS\nend\n</code></pre> <p>The latter syntax is preferred since it correctly types the value. If a provided value cannot be converted to the expected type, an <code>ACON::Exceptions::Logic</code> exception will be raised. E.g. <code>'123' is not a valid 'Bool'.</code>.</p> <p>Tip</p> <p>Argument/option modes can be combined. E.g.<code>ACON::Input::Argument::Mode[:required, :is_array]</code> for a required array argument.</p> <p>There are a lot of possible combinations in regards to what options are defined versus those are provided. To better illustrate how these cases are handled, let's look at an example of a command with three <code>ACON::Input::Option</code>s:</p> <pre><code>protected def configure : Nil\n  self\n    .option(\"foo\", \"f\")\n    .option(\"bar\", \"b\", :required)\n    .option(\"baz\", \"z\", :optional)\nend\n</code></pre> <p>The value of <code>foo</code> will either be <code>true</code> if provided, otherwise <code>false</code>; this is the default behavior of <code>ACON::Input::Option</code>s. The <code>bar</code> (<code>b</code>) option is required to have a value. A value can be separated from the option's long name by either a space or <code>=</code> or by its short name by an optional space. Finally, the <code>baz</code> (<code>z</code>) option's value is optional.</p> <p>This table shows how the value of each option based on the provided input:</p> Input foo bar baz <code>--bar=Hello</code> <code>false</code> <code>\"Hello\"</code> <code>nil</code> <code>--bar Hello</code> <code>false</code> <code>\"Hello\"</code> <code>nil</code> <code>-b=Hello</code> <code>false</code> <code>\"=Hello\"</code> <code>nil</code> <code>-b Hello</code> <code>false</code> <code>\"Hello\"</code> <code>nil</code> <code>-bHello</code> <code>false</code> <code>\"Hello\"</code> <code>nil</code> <code>-fzWorld -b Hello</code> <code>true</code> <code>\"Hello\"</code> <code>\"World\"</code> <code>-zfWorld -b Hello</code> <code>false</code> <code>\"Hello\"</code> <code>\"fWorld\"</code> <code>-zbWorld</code> <code>false</code> <code>nil</code> <code>\"bWorld\"</code> <p>Things get a bit trickier when an optional <code>ACON::Input::Argument</code>:</p> <pre><code>protected def configure : Nil\n  self\n    .option(\"foo\", \"f\")\n    .option(\"bar\", \"b\", :required)\n    .option(\"baz\", \"z\", :optional)\n    .argument(\"arg\", :optional)\nend\n</code></pre> <p>In some cases you may need to use the special <code>--</code> option in order to denote later values should be parsed as arguments, not as a value to an option:</p> Input bar baz arg <code>--bar Hello</code> <code>\"Hello\"</code> <code>nil</code> <code>nil</code> <code>--bar Hello World</code> <code>\"Hello\"</code> <code>nil</code> <code>\"World\"</code> <code>--bar \"Hello World\"</code> <code>\"Hello World\"</code> <code>nil</code> <code>nil</code> <code>--bar Hello --baz World</code> <code>\"Hello\"</code> <code>\"World\"</code> <code>nil</code> <code>--bar Hello --baz -- World</code> <code>\"Hello\"</code> <code>nil</code> <code>\"World\"</code> <code>-b Hello -z World</code> <code>\"Hello\"</code> <code>\"World\"</code> <code>nil</code>"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface--argumentoption-value-completion","title":"Argument/Option Value Completion","text":"<p>If the completion script is installed, command and option names will be auto completed by the shell. However, value completion may also be implemented in custom commands by providing the suggested values for a particular option/argument.</p> <pre><code>@[ACONA::AsCommand(\"greet\")]\nclass GreetCommand &lt; ACON::Command\n  protected def configure : Nil\n    # The suggested values do not need to be a static array,\n    # they could be sourced via a class/instance method, a constant, etc.\n    self\n      .argument(\"name\", suggested_values: [\"Jim\", \"Bob\", \"Sally\"])\n  end\n\n  # ...\nend\n</code></pre> <p>Additionally, a block version of <code>ACON::Command#argument(name,mode,description,default,&amp;)</code> and <code>ACON::Command#option(name,shortcut,value_mode,description,default,&amp;)</code> may be used if more complex logic is required.</p> <pre><code>@[ACONA::AsCommand(\"greet\")]\nclass GreetCommand &lt; ACON::Command\n  protected def configure : Nil\n    self\n      .argument(\"name\") do |input|\n        # The value the user already typed, e.g. the value the user already typed,\n        # e.g. when typing \"greet Ge\" before pressing Tab, this will contain \"Ge\".\n        current_value = input.completion_value\n\n        # Get the list of username names from somewhere (e.g. the database)\n        # you may use current_value to filter down the names\n        available_usernames = ...\n\n        # then suggested the usernames as values\n        return available_usernames\n      end\n  end\n\n  # ...\nend\n</code></pre> <p>Tip</p> <p>The shell completion script is able to handle huge amounts of suggestions and will automatically filter the values based on existing input from the user. You do not have to implement any filter logic in the command. <code>input.completion_value</code> can still be used to filter if it helps with performance, such as reducing amount of rows the DB returns.</p> Direct including types <code>Athena::Console::Input::Streamable</code>"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface-methods","title":"Methods","text":""},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#argument(name,type)","title":"abstract <code>#argument(name : String, type : T.class) forall T</code>","text":"<p>Returns the value of the argument with the provided name converted to the desired type. This method is preferred over <code>#argument</code> since it provides better typing.</p> <p>Raises an <code>ACON::Exceptions::Logic</code> if the actual argument value could not be converted to a type.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#argument(name)","title":"abstract <code>#argument(name : String) : String | Nil</code>","text":"<p>Returns the raw string value of the argument with the provided name, or <code>nil</code> if is optional and was not provided.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#arguments","title":"abstract <code>#arguments : ::Hash</code>","text":"<p>Returns a <code>::Hash</code> representing the keys and values of the parsed arguments of <code>self</code>.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#bind(definition)","title":"abstract <code>#bind(definition : ACON::Input::Definition) : Nil</code>","text":"<p>Binds the provided definition to <code>self</code>. Essentially provides what should be parsed from <code>self</code>.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#first_argument","title":"abstract <code>#first_argument : String | ::Nil</code>","text":"<p>Returns the first argument from the raw un-parsed input. Mainly used to get the command that should be executed.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#has_argument?(name)","title":"abstract <code>#has_argument?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has an argument with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#has_option?(name)","title":"abstract <code>#has_option?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has an option with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#has_parameter?(*,only_params)","title":"abstract <code>#has_parameter?(*values : String, only_params : Bool = false) : Bool</code>","text":"<p>Returns <code>true</code> if the raw un-parsed input contains one of the provided values.</p> <p>This method is to be used to introspect the input parameters before they have been validated. It must be used carefully. It does not necessarily return the correct result for short options when multiple flags are combined in the same option.</p> <p>If only_params is <code>true</code>, only real parameters are checked. I.e. skipping those that come after the <code>--</code> option.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#interactive=(interactive)","title":"abstract <code>#interactive=(interactive : Bool)</code>","text":"<p>Sets if <code>self</code> is <code>#interactive?</code>.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#interactive?","title":"abstract <code>#interactive? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> represents an interactive input, such as a TTY.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#option(name,type)","title":"abstract <code>#option(name : String, type : T.class) forall T</code>","text":"<p>Returns the value of the option with the provided name converted to the desired type. This method is preferred over <code>#option</code> since it provides better typing.</p> <p>Raises an <code>ACON::Exceptions::Logic</code> if the actual option value could not be converted to a type.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#option(name)","title":"abstract <code>#option(name : String) : String | Nil</code>","text":"<p>Returns the raw string value of the option with the provided name, or <code>nil</code> if is optional and was not provided.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#options","title":"abstract <code>#options : ::Hash</code>","text":"<p>Returns a <code>::Hash</code> representing the keys and values of the parsed options of <code>self</code>.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#parameter(value,default,only_params)","title":"abstract <code>#parameter(value : String, default : _ = false, only_params : Bool = false)</code>","text":"<p>Returns the value of a raw un-parsed parameter for the provided value..</p> <p>This method is to be used to introspect the input parameters before they have been validated. It must be used carefully. It does not necessarily return the correct result for short options when multiple flags are combined in the same option.</p> <p>If only_params is <code>true</code>, only real parameters are checked. I.e. skipping those that come after the <code>--</code> option.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#set_argument(name,value)","title":"abstract <code>#set_argument(name : String, value : _) : Nil</code>","text":"<p>Sets the value of the argument with the provided name.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#set_option(name,value)","title":"abstract <code>#set_option(name : String, value : _) : Nil</code>","text":"<p>Sets the value of the option with the provided name.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#to_s(io)","title":"abstract <code>#to_s(io : IO) : Nil</code>","text":"<p>Returns a string representation of the args passed to the command.</p> View source"},{"location":"Console/Input/Interface/#Athena::Console::Input::Interface#validate","title":"abstract <code>#validate : Nil</code>","text":"<p>Validates the input, asserting all of the required parameters are provided. Raises <code>ACON::Exceptions::ValidationFailed</code> if not valid.</p> View source"},{"location":"Console/Input/Option/","title":"Option","text":""},{"location":"Console/Input/Option/#Athena::Console::Input::Option","title":"class <code>Athena::Console::Input::Option</code> inherits <code>Reference</code>","text":"<p>Represents a value (or array of ) provided to a command as optional un-ordered flags that be setup to accept a value, or represent a boolean flag. Options can also have an optional shortcut, default value, and/or description.</p> <p>Options are specified with two dashes, or one dash when using the shortcut. For example, <code>./console test --yell --dir=src -v</code>. We have one option representing a boolean value, providing a value to another, and using the shortcut of another.</p> <p>Options can be added via the <code>ACON::Command#option</code> method, or by instantiating one manually as part of an <code>ACON::Input::Definition</code>. The value of the option could then be accessed via one of the <code>ACON::Input::Interface#option</code> overloads.</p> <p>See <code>ACON::Input::Interface</code> for more examples on how arguments/options are parsed, and how they can be accessed.</p>"},{"location":"Console/Input/Option/#Athena::Console::Input::Option-constructors","title":"Constructors","text":""},{"location":"Console/Input/Option/#Athena::Console::Input::Option.new(name,shortcut,value_mode,description,default,suggested_values)","title":"<code>.new(name : String, shortcut : String | Enumerable(String) | Nil = nil, value_mode : ACON::Input::Option::Value = :none, description : String = \"\", default = nil, suggested_values : Array(String) | Proc(ACON::Completion::Input, Array(String)) | Nil = nil)</code>","text":"View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option-methods","title":"Methods","text":""},{"location":"Console/Input/Option/#Athena::Console::Input::Option#==(other)","title":"<code>#==(other : self)</code>","text":"<p>Returns <code>true</code> if this reference is the same as other. Invokes <code>same?</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#accepts_value?","title":"<code>#accepts_value? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> is able to accept a value, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#complete(input,suggestions)","title":"<code>#complete(input : ACON::Completion::Input, suggestions : ACON::Completion::Suggestions) : Nil</code>","text":"<p>Determines what values should be added to the possible suggestions based on the provided input.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#default(type)","title":"<code>#default(type : T.class) : T forall T</code>","text":"<p>Returns the default value of <code>self</code>, if any, converted to the provided type.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#default","title":"<code>#default</code>","text":"<p>Returns the default value of <code>self</code>, if any.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#default=(default)","title":"<code>#default=(default = nil) : Nil</code>","text":"<p>Sets the default value of <code>self</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#description","title":"<code>#description : String</code>","text":"<p>Returns the description of <code>self</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#has_completion?","title":"<code>#has_completion? : Bool</code>","text":"<p>Returns <code>true</code> if this option is able to suggest values, otherwise <code>false</code></p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#is_array?","title":"<code>#is_array? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> is a required argument, otherwise <code>false</code>. ameba:disable Naming/PredicateName</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#name","title":"<code>#name : String</code>","text":"<p>Returns the name of <code>self</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#negatable?","title":"<code>#negatable? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> is negatable, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#shortcut","title":"<code>#shortcut : String | ::Nil</code>","text":"<p>Returns the shortcut of <code>self</code>, if any.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#value_mode","title":"<code>#value_mode : ACON::Input::Option::Value</code>","text":"<p>Returns the <code>ACON::Input::Option::Value</code> of <code>self</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#value_optional?","title":"<code>#value_optional? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> accepts a value but is optional, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Option/#Athena::Console::Input::Option#value_required?","title":"<code>#value_required? : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> accepts a value and it is required, otherwise <code>false</code>.</p> View source"},{"location":"Console/Input/Option/Value/","title":"Value","text":""},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value","title":"enum <code>Athena::Console::Input::Option::Value</code>","text":"<p>Represents the possible vale types of an <code>ACON::Input::Option</code>.</p> <p>Value modes can also be combined using the Enum.[] macro. For example, <code>ACON::Input::Option::Value[:required, :is_array]</code> which defines a required array option.</p>"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value-members","title":"Members","text":""},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value::NONE","title":"<code>NONE = 0</code>","text":"<p>Represents a boolean flag option that will be <code>true</code> if provided, otherwise <code>false</code>. E.g. <code>--yell</code>.</p>"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value::REQUIRED","title":"<code>REQUIRED = 1</code>","text":"<p>Represents an option that MUST have a value if provided. The option itself is still optional. E.g. <code>--dir=src</code>.</p>"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value::OPTIONAL","title":"<code>OPTIONAL = 2</code>","text":"<p>Represents an option that MAY have a value, but it is not a requirement. E.g. <code>--yell</code> or <code>--yell=loud</code>.</p> <p>When using the option value mode, it can be hard to distinguish between passing an option without a value and not passing it at all. In this case you should set the default of the option to <code>false</code>, instead of the default of <code>nil</code>. Then you would be able to tell it wasn't passed by the value being <code>false</code>, passed without a value as <code>nil</code>, and passed with a value.</p> <p>Note</p> <p>In this context you will need to work with the raw <code>String?</code> representation of the value due to the union of types the value could be.</p>"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value::IS_ARRAY","title":"<code>IS_ARRAY = 4</code>","text":"<p>Represents an option that can be provided multiple times to produce an array of values. E.g. <code>--dir=/foo --dir=/bar</code>.</p>"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value::NEGATABLE","title":"<code>NEGATABLE = 8</code>","text":"<p>Similar to <code>NONE</code>, but also accepts its negation. E.g. <code>--yell</code> or <code>--no-yell</code>.</p>"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value::None","title":"<code>None = 0</code>","text":""},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value::All","title":"<code>All = 15</code>","text":""},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value-methods","title":"Methods","text":""},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value#accepts_value?","title":"<code>#accepts_value? : Bool</code>","text":"View source"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value#is_array?","title":"<code>#is_array?</code>","text":"View source"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value#negatable?","title":"<code>#negatable?</code>","text":"View source"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value#none?","title":"<code>#none?</code>","text":"View source"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value#optional?","title":"<code>#optional?</code>","text":"View source"},{"location":"Console/Input/Option/Value/#Athena::Console::Input::Option::Value#required?","title":"<code>#required?</code>","text":"View source"},{"location":"Console/Input/Streamable/","title":"Streamable","text":""},{"location":"Console/Input/Streamable/#Athena::Console::Input::Streamable","title":"module <code>Athena::Console::Input::Streamable</code>","text":"<p>An extension of <code>ACON::Input::Interface</code> that supports input stream IOs.</p> <p>Allows customizing where the input data is read from. Defaults to <code>STDIN</code>.</p> Included modules <code>Athena::Console::Input::Interface</code> Direct including types <code>Athena::Console::Input</code>"},{"location":"Console/Input/Streamable/#Athena::Console::Input::Streamable-methods","title":"Methods","text":""},{"location":"Console/Input/Streamable/#Athena::Console::Input::Streamable#stream","title":"abstract <code>#stream : IO | ::Nil</code>","text":"<p>Returns the input stream.</p> View source"},{"location":"Console/Input/Streamable/#Athena::Console::Input::Streamable#stream=(stream)","title":"abstract <code>#stream=(stream : IO | Nil)</code>","text":"<p>Sets the input stream.</p> View source"},{"location":"Console/Input/StringLine/","title":"StringLine","text":""},{"location":"Console/Input/StringLine/#Athena::Console::Input::StringLine","title":"class <code>Athena::Console::Input::StringLine</code> inherits <code>Athena::Console::Input::ARGV</code>","text":"<p>An <code>ACON::Input::Interface</code> based on a command line string.</p>"},{"location":"Console/Input/StringLine/#Athena::Console::Input::StringLine-constructors","title":"Constructors","text":""},{"location":"Console/Input/StringLine/#Athena::Console::Input::StringLine.new(input)","title":"<code>.new(input : String)</code>","text":"View source"},{"location":"Console/Loader/","title":"Loader","text":""},{"location":"Console/Loader/#Athena::Console::Loader","title":"module <code>Athena::Console::Loader</code>","text":"<p>Contains types related to lazily loading commands.</p>"},{"location":"Console/Loader/Factory/","title":"Factory","text":""},{"location":"Console/Loader/Factory/#Athena::Console::Loader::Factory","title":"struct <code>Athena::Console::Loader::Factory</code> inherits <code>Struct</code>","text":"<p>A default implementation of <code>ACON::Loader::Interface</code> that accepts a <code>Hash(String, Proc(ACON::Command))</code>.</p> <p>A factory could then be set on the <code>ACON::Application</code>:</p> <pre><code>application = MyCustomApplication.new \"My CLI\"\n\napplication.command_loader = Athena::Console::Loader::Factory.new({\n  \"command1\"        =&gt; Proc(ACON::Command).new { Command1.new },\n  \"app:create-user\" =&gt; Proc(ACON::Command).new { CreateUserCommand.new },\n})\n\napplication.run\n</code></pre> Included modules <code>Athena::Console::Loader::Interface</code>"},{"location":"Console/Loader/Factory/#Athena::Console::Loader::Factory-constructors","title":"Constructors","text":""},{"location":"Console/Loader/Factory/#Athena::Console::Loader::Factory.new(factories)","title":"<code>.new(factories : Hash(String, Proc(ACON::Command)))</code>","text":"View source"},{"location":"Console/Loader/Factory/#Athena::Console::Loader::Factory-methods","title":"Methods","text":""},{"location":"Console/Loader/Factory/#Athena::Console::Loader::Factory#get(name)","title":"<code>#get(name : String) : ACON::Command</code>","text":"<p>Returns an <code>ACON::Command</code> with the provided name. Raises <code>ACON::Exceptions::CommandNotFound</code> if it is not defined.</p> View source"},{"location":"Console/Loader/Factory/#Athena::Console::Loader::Factory#has?(name)","title":"<code>#has?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has a command with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Loader/Factory/#Athena::Console::Loader::Factory#names","title":"<code>#names : Array(String)</code>","text":"<p>Returns all of the command names defined within <code>self</code>.</p> View source"},{"location":"Console/Loader/Interface/","title":"Interface","text":""},{"location":"Console/Loader/Interface/#Athena::Console::Loader::Interface","title":"module <code>Athena::Console::Loader::Interface</code>","text":"<p>Normally the <code>ACON::Application#add</code> method requires instances of each command to be provided. <code>ACON::Loader::Interface</code> provides a way to lazily instantiate only the command(s) being called, which can be more performant since not every command needs instantiated.</p> Direct including types <code>Athena::Console::Loader::Factory</code>"},{"location":"Console/Loader/Interface/#Athena::Console::Loader::Interface-methods","title":"Methods","text":""},{"location":"Console/Loader/Interface/#Athena::Console::Loader::Interface#get(name)","title":"abstract <code>#get(name : String) : ACON::Command</code>","text":"<p>Returns an <code>ACON::Command</code> with the provided name. Raises <code>ACON::Exceptions::CommandNotFound</code> if it is not defined.</p> View source"},{"location":"Console/Loader/Interface/#Athena::Console::Loader::Interface#has?(name)","title":"abstract <code>#has?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has a command with the provided name, otherwise <code>false</code>.</p> View source"},{"location":"Console/Loader/Interface/#Athena::Console::Loader::Interface#names","title":"abstract <code>#names : Array(String)</code>","text":"<p>Returns all of the command names defined within <code>self</code>.</p> View source"},{"location":"Console/Output/","title":"Output","text":""},{"location":"Console/Output/#Athena::Console::Output","title":"abstract class <code>Athena::Console::Output</code> inherits <code>Reference</code>","text":"<p>Common base implementation of <code>ACON::Output::Interface</code>.</p> Included modules <code>Athena::Console::Output::Interface</code> Direct known subclasses <code>Athena::Console::Output::IO</code>"},{"location":"Console/Output/#Athena::Console::Output-constructors","title":"Constructors","text":""},{"location":"Console/Output/#Athena::Console::Output.new(verbosity,decorated,formatter)","title":"<code>.new(verbosity : ACON::Output::Verbosity | Nil = :normal, decorated : Bool = false, formatter : ACON::Formatter::Interface | Nil = nil)</code>","text":"View source"},{"location":"Console/Output/#Athena::Console::Output-methods","title":"Methods","text":""},{"location":"Console/Output/#Athena::Console::Output#decorated=(decorated)","title":"<code>#decorated=(decorated : Bool) : Nil</code>","text":"<p>Sets if printed messages should be decorated.</p> View source"},{"location":"Console/Output/#Athena::Console::Output#decorated?","title":"<code>#decorated? : Bool</code>","text":"<p>Returns <code>true</code> if printed messages should have their decorations applied. I.e. <code>ACON::Formatter::OutputStyleInterface</code>.</p> View source"},{"location":"Console/Output/#Athena::Console::Output#formatter","title":"<code>#formatter : ACON::Formatter::Interface</code>","text":"<p>Returns the <code>ACON::Formatter::Interface</code> used by <code>self</code>.</p> View source"},{"location":"Console/Output/#Athena::Console::Output#formatter=(formatter)","title":"<code>#formatter=(formatter : ACON::Formatter::Interface) : Nil</code>","text":"<p>Sets the <code>ACON::Formatter::Interface</code> used by <code>self</code>.</p> View source"},{"location":"Console/Output/#Athena::Console::Output#print(message,verbosity,output_type)","title":"<code>#print(message : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/#Athena::Console::Output#print(message,verbosity,output_type)","title":"<code>#print(message : _, verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/#Athena::Console::Output#print(*)","title":"<code>#print(*messages : String) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/#Athena::Console::Output#puts(message,verbosity,output_type)","title":"<code>#puts(message : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/#Athena::Console::Output#puts(message,verbosity,output_type)","title":"<code>#puts(message : _, verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/#Athena::Console::Output#puts(*)","title":"<code>#puts(*messages : String) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/#Athena::Console::Output#verbosity","title":"<code>#verbosity : ACON::Output::Verbosity</code>","text":"<p>Returns the minimum <code>ACON::Output::Verbosity</code> required for a message to be printed.</p> View source"},{"location":"Console/Output/#Athena::Console::Output#verbosity=(verbosity)","title":"<code>#verbosity=(verbosity : ACON::Output::Verbosity) : Nil</code>","text":"<p>Set the minimum <code>ACON::Output::Verbosity</code> required for a message to be printed.</p> View source"},{"location":"Console/Output/ConsoleOutput/","title":"ConsoleOutput","text":""},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput","title":"class <code>Athena::Console::Output::ConsoleOutput</code> inherits <code>Athena::Console::Output::IO</code>","text":"<p>An <code>ACON::Output::ConsoleOutputInterface</code> that wraps <code>STDOUT</code> and <code>STDERR</code>.</p> Included modules <code>Athena::Console::Output::ConsoleOutputInterface</code>"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput-constructors","title":"Constructors","text":""},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput.new(verbosity,decorated,formatter)","title":"<code>.new(verbosity : ACON::Output::Verbosity = :normal, decorated : Bool | Nil = nil, formatter : ACON::Formatter::Interface | Nil = nil)</code>","text":"View source"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput-methods","title":"Methods","text":""},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput#decorated=(decorated)","title":"<code>#decorated=(decorated : Bool) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput#error_output","title":"<code>#error_output : ACON::Output::Interface</code>","text":"<p>Returns an <code>ACON::Output::Interface</code> that represents <code>STDERR</code>.</p> View source"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput#error_output=(stderr)","title":"<code>#error_output=(stderr : ACON::Output::Interface) : Nil</code>","text":"<p>Sets the <code>ACON::Output::Interface</code> that represents <code>STDERR</code>.</p> View source"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput#formatter=(formatter)","title":"<code>#formatter=(formatter : Bool) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput#section","title":"<code>#section : ACON::Output::Section</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput#stderr=(stderr)","title":"<code>#stderr=(stderr : ACON::Output::Interface)</code>","text":"<p>Sets the <code>ACON::Output::Interface</code> that represents <code>STDERR</code>.</p> View source"},{"location":"Console/Output/ConsoleOutput/#Athena::Console::Output::ConsoleOutput#verbosity=(verbosity)","title":"<code>#verbosity=(verbosity : ACON::Output::Verbosity) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/ConsoleOutputInterface/","title":"ConsoleOutputInterface","text":""},{"location":"Console/Output/ConsoleOutputInterface/#Athena::Console::Output::ConsoleOutputInterface","title":"module <code>Athena::Console::Output::ConsoleOutputInterface</code>","text":"<p>Extension of <code>ACON::Output::Interface</code> that adds additional functionality for terminal based outputs.</p> Direct including types <code>Athena::Console::Output::ConsoleOutput</code>"},{"location":"Console/Output/ConsoleOutputInterface/#Athena::Console::Output::ConsoleOutputInterface-methods","title":"Methods","text":""},{"location":"Console/Output/ConsoleOutputInterface/#Athena::Console::Output::ConsoleOutputInterface#error_output","title":"abstract <code>#error_output : ACON::Output::Interface</code>","text":"<p>Returns an <code>ACON::Output::Interface</code> that represents <code>STDERR</code>.</p> View source"},{"location":"Console/Output/ConsoleOutputInterface/#Athena::Console::Output::ConsoleOutputInterface#error_output=(stderr)","title":"abstract <code>#error_output=(stderr : ACON::Output::Interface) : Nil</code>","text":"<p>Sets the <code>ACON::Output::Interface</code> that represents <code>STDERR</code>.</p> View source"},{"location":"Console/Output/ConsoleOutputInterface/#Athena::Console::Output::ConsoleOutputInterface#section","title":"abstract <code>#section : ACON::Output::Section</code>","text":"View source"},{"location":"Console/Output/IO/","title":"IO","text":""},{"location":"Console/Output/IO/#Athena::Console::Output::IO","title":"class <code>Athena::Console::Output::IO</code> inherits <code>Athena::Console::Output</code>","text":"<p>An <code>ACON::Output::Interface</code> implementation that wraps an IO.</p> Direct known subclasses <code>Athena::Console::Output::ConsoleOutput</code> <code>Athena::Console::Output::Section</code>"},{"location":"Console/Output/IO/#Athena::Console::Output::IO-constructors","title":"Constructors","text":""},{"location":"Console/Output/IO/#Athena::Console::Output::IO.new(io,verbosity,decorated,formatter)","title":"<code>.new(io : ::IO, verbosity : ACON::Output::Verbosity | Nil = :normal, decorated : Bool | Nil = nil, formatter : ACON::Formatter::Interface | Nil = nil)</code>","text":"View source"},{"location":"Console/Output/IO/#Athena::Console::Output::IO-methods","title":"Methods","text":""},{"location":"Console/Output/IO/#Athena::Console::Output::IO#io","title":"<code>#io : ::IO</code>","text":"View source"},{"location":"Console/Output/IO/#Athena::Console::Output::IO#io=(io)","title":"<code>#io=(io : ::IO)</code>","text":"View source"},{"location":"Console/Output/IO/#Athena::Console::Output::IO#to_s(*,**)","title":"<code>#to_s(*args, **options)</code>","text":"View source"},{"location":"Console/Output/IO/#Athena::Console::Output::IO#to_s(*,**,&)","title":"<code>#to_s</code>","text":"View source"},{"location":"Console/Output/Interface/","title":"Interface","text":""},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface","title":"module <code>Athena::Console::Output::Interface</code>","text":"<p><code>Athena::Console</code> uses a dedicated interface for representing an output destination. This allows it to have multiple more specialized implementations as opposed to being tightly coupled to <code>STDOUT</code> or a raw IO. This interface represents the methods that must be implemented, however implementations can add additional functionality.</p> <p>The most common implementations include <code>ACON::Output::ConsoleOutput</code> which is based on <code>STDOUT</code> and <code>STDERR</code>, and <code>ACON::Output::Null</code> which can be used when you want to silent all output, such as for tests.</p> <p>Each output's <code>ACON::Output::Verbosity</code> and output <code>ACON::Output::Type</code> can also be configured on a per message basis.</p> Direct including types <code>Athena::Console::Output</code> <code>Athena::Console::Output::Null</code> <code>Athena::Console::Style::Output</code>"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface-methods","title":"Methods","text":""},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#decorated=(decorated)","title":"abstract <code>#decorated=(decorated : Bool) : Nil</code>","text":"<p>Sets if printed messages should be decorated.</p> View source"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#decorated?","title":"abstract <code>#decorated? : Bool</code>","text":"<p>Returns <code>true</code> if printed messages should have their decorations applied. I.e. <code>ACON::Formatter::OutputStyleInterface</code>.</p> View source"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#formatter","title":"abstract <code>#formatter : ACON::Formatter::Interface</code>","text":"<p>Returns the <code>ACON::Formatter::Interface</code> used by <code>self</code>.</p> View source"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#formatter=(formatter)","title":"abstract <code>#formatter=(formatter : ACON::Formatter::Interface) : Nil</code>","text":"<p>Sets the <code>ACON::Formatter::Interface</code> used by <code>self</code>.</p> View source"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#print(message,verbosity,output_type)","title":"abstract <code>#print(message : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>Outputs the provided message. The verbosity and/or output_type parameters can be used to control when and how the message is printed.</p> View source"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#puts(message,verbosity,output_type)","title":"abstract <code>#puts(message : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>Outputs the provided message followed by a new line. The verbosity and/or output_type parameters can be used to control when and how the message is printed.</p> View source"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#verbosity","title":"abstract <code>#verbosity : ACON::Output::Verbosity</code>","text":"<p>Returns the minimum <code>ACON::Output::Verbosity</code> required for a message to be printed.</p> View source"},{"location":"Console/Output/Interface/#Athena::Console::Output::Interface#verbosity=(verbosity)","title":"abstract <code>#verbosity=(verbosity : ACON::Output::Verbosity) : Nil</code>","text":"<p>Set the minimum <code>ACON::Output::Verbosity</code> required for a message to be printed.</p> View source"},{"location":"Console/Output/Null/","title":"Null","text":""},{"location":"Console/Output/Null/#Athena::Console::Output::Null","title":"class <code>Athena::Console::Output::Null</code> inherits <code>Reference</code>","text":"<p>An <code>ACON::Output::Interface</code> that does not output anything, such as for tests.</p> Included modules <code>Athena::Console::Output::Interface</code>"},{"location":"Console/Output/Null/#Athena::Console::Output::Null-methods","title":"Methods","text":""},{"location":"Console/Output/Null/#Athena::Console::Output::Null#decorated=(decorated)","title":"<code>#decorated=(decorated : Bool) : Nil</code>","text":"<p>Sets if printed messages should be decorated.</p> View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#decorated?","title":"<code>#decorated? : Bool</code>","text":"<p>Returns <code>true</code> if printed messages should have their decorations applied. I.e. <code>ACON::Formatter::OutputStyleInterface</code>.</p> View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#formatter","title":"<code>#formatter : ACON::Formatter::Interface</code>","text":"<p>Returns the <code>ACON::Formatter::Interface</code> used by <code>self</code>.</p> View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#formatter=(formatter)","title":"<code>#formatter=(formatter : ACON::Formatter::Interface) : Nil</code>","text":"<p>Sets the <code>ACON::Formatter::Interface</code> used by <code>self</code>.</p> View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#print(message,verbosity,output_type)","title":"<code>#print(message : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#print(message,verbosity,output_type)","title":"<code>#print(message, verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#puts(message,verbosity,output_type)","title":"<code>#puts(message : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#puts(message,verbosity,output_type)","title":"<code>#puts(message, verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#verbosity","title":"<code>#verbosity : ACON::Output::Verbosity</code>","text":"<p>Returns the minimum <code>ACON::Output::Verbosity</code> required for a message to be printed.</p> View source"},{"location":"Console/Output/Null/#Athena::Console::Output::Null#verbosity=(verbosity)","title":"<code>#verbosity=(verbosity : ACON::Output::Verbosity) : Nil</code>","text":"<p>Set the minimum <code>ACON::Output::Verbosity</code> required for a message to be printed.</p> View source"},{"location":"Console/Output/Section/","title":"Section","text":""},{"location":"Console/Output/Section/#Athena::Console::Output::Section","title":"class <code>Athena::Console::Output::Section</code> inherits <code>Athena::Console::Output::IO</code>","text":"<p>A <code>ACON::Output::ConsoleOutput</code> can be divided into multiple sections that can be written to and cleared independently of one another.</p> <p>Output sections can be used for advanced console outputs, such as displaying multiple progress bars which are updated independently, or appending additional rows to tables.</p> <pre><code>protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n  raise ArgumentError.new \"This command may only be used with `ACON::Output::ConsoleOutputInterface`.\" unless output.is_a? ACON::Output::ConsoleOutputInterface\n\n  section1 = output.section\n  section2 = output.section\n\n  section1.puts \"Hello\"\n  section2.puts \"World!\"\n  # Output contains \"Hello\\nWorld!\\n\"\n\n  sleep 1\n\n  # Replace \"Hello\" with \"Goodbye!\"\n  section1.overwrite \"Goodbye!\"\n  # Output now contains \"Goodbye\\nWorld!\\n\"\n\n  sleep 1\n\n  # Clear \"World!\"\n  section2.clear\n  # Output now contains \"Goodbye!\\n\"\n\n  sleep 1\n\n  # Delete the last 2 lines of the first section\n  section1.clear 2\n  # Output is now empty\n\n  ACON::Command::Status::SUCCESS\nend\n</code></pre>"},{"location":"Console/Output/Section/#Athena::Console::Output::Section-constructors","title":"Constructors","text":""},{"location":"Console/Output/Section/#Athena::Console::Output::Section.new(io,sections,verbosity,decorated,formatter)","title":"<code>.new(io : ::IO, sections : Array(self), verbosity : ACON::Output::Verbosity, decorated : Bool, formatter : ACON::Formatter::Interface)</code>","text":"View source"},{"location":"Console/Output/Section/#Athena::Console::Output::Section-methods","title":"Methods","text":""},{"location":"Console/Output/Section/#Athena::Console::Output::Section#clear(lines)","title":"<code>#clear(lines : Int32 | Nil = nil) : Nil</code>","text":"<p>Clears at most lines from <code>self</code>. If lines is <code>nil</code>, all of <code>self</code> is cleared.</p> View source"},{"location":"Console/Output/Section/#Athena::Console::Output::Section#content","title":"<code>#content : String</code>","text":"<p>Returns the full content string contained within <code>self</code>.</p> View source"},{"location":"Console/Output/Section/#Athena::Console::Output::Section#max_height=(max_height)","title":"<code>#max_height=(max_height : Int32 | Nil) : Nil</code>","text":"View source"},{"location":"Console/Output/Section/#Athena::Console::Output::Section#overwrite(message)","title":"<code>#overwrite(message : String | Enumerable(String)) : Nil</code>","text":"<p>Overrides the current content of <code>self</code> with the provided message.</p> View source"},{"location":"Console/Output/Section/#Athena::Console::Output::Section#overwrite(*)","title":"<code>#overwrite(*messages : String) : Nil</code>","text":"<p>Overrides the current content of <code>self</code> with the provided messages.</p> View source"},{"location":"Console/Output/Type/","title":"Type","text":""},{"location":"Console/Output/Type/#Athena::Console::Output::Type","title":"enum <code>Athena::Console::Output::Type</code>","text":"<p>Determines how a message should be printed.</p> <p>When you output a message via <code>ACON::Output::Interface#puts</code> or <code>ACON::Output::Interface#print</code>, they also provide a way to set the output type it should be printed:</p> <pre><code>protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n  output.puts \"Some Message\", output_type: :raw\n\n  ACON::Command::Status::SUCCESS\nend\n</code></pre>"},{"location":"Console/Output/Type/#Athena::Console::Output::Type-members","title":"Members","text":""},{"location":"Console/Output/Type/#Athena::Console::Output::Type::NORMAL","title":"<code>NORMAL = 0</code>","text":"<p>Normal output, with any styles applied to format the text.</p>"},{"location":"Console/Output/Type/#Athena::Console::Output::Type::RAW","title":"<code>RAW = 1</code>","text":"<p>Output style tags as is without formatting the string.</p>"},{"location":"Console/Output/Type/#Athena::Console::Output::Type::PLAIN","title":"<code>PLAIN = 2</code>","text":"<p>Strip any style tags and only output the actual text.</p>"},{"location":"Console/Output/Type/#Athena::Console::Output::Type-methods","title":"Methods","text":""},{"location":"Console/Output/Type/#Athena::Console::Output::Type#normal?","title":"<code>#normal?</code>","text":"View source"},{"location":"Console/Output/Type/#Athena::Console::Output::Type#plain?","title":"<code>#plain?</code>","text":"View source"},{"location":"Console/Output/Type/#Athena::Console::Output::Type#raw?","title":"<code>#raw?</code>","text":"View source"},{"location":"Console/Output/Verbosity/","title":"Verbosity","text":""},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity","title":"enum <code>Athena::Console::Output::Verbosity</code>","text":"<p>Verbosity levels determine which messages will be displayed, essentially the same idea as Log::Severity but for console output.</p> <p>For example:</p> <pre><code># Output nothing\n./console my-command -q\n./console my-command --quiet\n\n# Display only useful output\n./console my-command\n\n# Increase the verbosity of messages\n./console my-command -v\n\n# Also display non-essential information\n./console my-command -vv\n\n# Display all messages, such as for debugging\n./console my-command -vvv\n</code></pre> <p>As used in the previous example, the verbosity can be controlled on a command invocation basis using a CLI option, but may also be globally set via the <code>SHELL_VERBOSITY</code> environmental variable.</p> <p>When you output a message via <code>ACON::Output::Interface#puts</code> or <code>ACON::Output::Interface#print</code>, they also provide a way to set the verbosity at which that message should print:</p> <pre><code>protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n  # Via conditional logic\n  if output.verbosity.verbose?\n    output.puts \"Obj class: #{obj.class}\"\n  end\n\n  # Inline within the method\n  output.puts \"Only print this in verbose mode or higher\", verbosity: :verbose\n\n  ACON::Command::Status::SUCCESS\nend\n</code></pre> <p>Tip</p> <p>The full stack trace of an exception is printed in <code>ACON::Output::Verbosity::VERBOSE</code> mode or higher.</p>"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity-members","title":"Members","text":""},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity::QUIET","title":"<code>QUIET = -1</code>","text":"<p>Silences all output. Equivalent to <code>-q</code>, <code>--quiet</code> CLI options or <code>SHELL_VERBOSITY=-1</code>.</p>"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity::NORMAL","title":"<code>NORMAL = 0</code>","text":"<p>Normal behavior, display only useful messages. Equivalent not providing any CLI options or <code>SHELL_VERBOSITY=0</code>.</p>"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity::VERBOSE","title":"<code>VERBOSE = 1</code>","text":"<p>Increase the verbosity of messages. Equivalent to <code>-v</code>, <code>--verbose=1</code> CLI options or <code>SHELL_VERBOSITY=1</code>.</p>"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity::VERY_VERBOSE","title":"<code>VERY_VERBOSE = 2</code>","text":"<p>Display all the informative non-essential messages. Equivalent to <code>-vv</code>, <code>--verbose=2</code> CLI options or <code>SHELL_VERBOSITY=2</code>.</p>"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity::DEBUG","title":"<code>DEBUG = 3</code>","text":"<p>Display all messages, such as for debugging. Equivalent to <code>-vvv</code>, <code>--verbose=3</code> CLI options or <code>SHELL_VERBOSITY=3</code>.</p>"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity-methods","title":"Methods","text":""},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity#debug?","title":"<code>#debug?</code>","text":"View source"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity#normal?","title":"<code>#normal?</code>","text":"View source"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity#quiet?","title":"<code>#quiet?</code>","text":"View source"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity#verbose?","title":"<code>#verbose?</code>","text":"View source"},{"location":"Console/Output/Verbosity/#Athena::Console::Output::Verbosity#very_verbose?","title":"<code>#very_verbose?</code>","text":"View source"},{"location":"Console/Question/","title":"Question","text":""},{"location":"Console/Question/#Athena::Console::Question","title":"class <code>Athena::Console::Question(T)</code> inherits <code>Reference</code>","text":"<p>This namespaces contains various questions that can be asked via the <code>ACON::Helper::Question</code> helper or <code>ART::Style::Athena</code> style.</p> <p>This class can also be used to ask the user for more information in the most basic form, a simple question and answer.</p>"},{"location":"Console/Question/#Athena::Console::Question--usage","title":"Usage","text":"<pre><code>question = ACON::Question(String?).new \"What is your name?\", nil\nname = helper.ask input, output, question\n</code></pre> <p>This will prompt to user to enter their name. If they do not enter valid input, the default value of <code>nil</code> will be used. The default can be customized, ideally with sane defaults to make the UX better.</p>"},{"location":"Console/Question/#Athena::Console::Question--trimming-the-answer","title":"Trimming the Answer","text":"<p>By default the answer is trimmed in order to remove leading and trailing white space. The <code>ACON::Question::Base#trimmable=</code> method can be used to disable this if you need the input as is.</p> <pre><code>question = ACON::Question(String?).new \"What is your name?\", nil\nquestion.trimmable = false\nname_with_whitespace_and_newline = helper.ask input, output, question\n</code></pre>"},{"location":"Console/Question/#Athena::Console::Question--multiline-input","title":"Multiline Input","text":"<p>The question helper will stop reading input when it receives a newline character. I.e. the user presses the <code>ENTER</code> key. However in some cases you may want to allow for an answer that spans multiple lines. The <code>ACON::Question::Base#multi_line=</code> method can be used to enable multi line mode.</p> <pre><code>question = ACON::Question(String?).new \"Tell me a story.\", nil\nquestion.multi_line = true\n</code></pre> <p>Multiline questions stop reading user input after receiving an end-of-transmission control character. (<code>Ctrl+D</code> on Unix systems).</p>"},{"location":"Console/Question/#Athena::Console::Question--hiding-user-input","title":"Hiding User Input","text":"<p>If your question is asking for sensitive information, such as a password, you can set a question to hidden. This will make it so the input string is not displayed on the terminal, which is equivalent to how password are handled on Unix systems.</p> <pre><code>question = ACON::Question(String?).new \"What is your password?.\", nil\nquestion.hidden = true\n</code></pre> <p>Warning</p> <p>If no method to hide the response is available on the underlying system/input, it will fallback and allow the response to be seen. If having the hidden response hidden is vital, you MUST set <code>ACON::Question::Base#hidden_fallback=</code> to <code>false</code>; which will raise an exception instead of allowing the input to be visible.</p>"},{"location":"Console/Question/#Athena::Console::Question--normalizing-the-answer","title":"Normalizing the Answer","text":"<p>The answer can be \"normalized\" before being validated to fix any small errors or tweak it as needed. For example, you could normalize the casing of the input:</p> <pre><code>question = ACON::Question(String?).new \"Enter your name.\", nil\nquestion.normalizer do |input|\n  input.try &amp;.downcase\nend\n</code></pre> <p>It is possible for input to be <code>nil</code> in this case, so that need to also be handled in the block. The block should return a value of the same type of the generic, in this case <code>String?</code>.</p> <p>Note</p> <p>The normalizer is called first and its return value is used as the input of the validator. If the answer is invalid do not raise an exception in the normalizer and let the validator handle it.</p>"},{"location":"Console/Question/#Athena::Console::Question--validating-the-answer","title":"Validating the Answer","text":"<p>If the answer to a question needs to match some specific requirements, you can register a question validator to check the validity of the answer. This callback should raise an exception if the input is not valid, such as <code>ArgumentError</code>. Otherwise, it must return the input value.</p> <pre><code>question = ACON::Question(String?).new \"Enter your name.\", nil\nquestion.validator do |input|\n  next input if input.nil? || !input.starts_with? /^\\d+/\n\n  raise ArgumentError.new \"Invalid name. Cannot start with numeric digits.\"\nend\n</code></pre> <p>In this example, we are asserting that the user's name does not start with numeric digits. If the user entered <code>123Jim</code>, they would be told it is an invalid answer and prompted to answer the question again. By default the user would have an unlimited amount of retries to get it right, but this can be customized via <code>ACON::Question::Base#max_attempts=</code>.</p>"},{"location":"Console/Question/#Athena::Console::Question--autocompletion","title":"Autocompletion","text":"<p>Todo</p> <p>Implement this.</p> Included modules <code>Athena::Console::Question::Base</code> Direct known subclasses <code>Athena::Console::Question::Confirmation</code>"},{"location":"Console/Question/#Athena::Console::Question-constructors","title":"Constructors","text":""},{"location":"Console/Question/#Athena::Console::Question.new(question,default)","title":"<code>.new(question : String, default : T)</code>","text":"View source"},{"location":"Console/Question/#Athena::Console::Question-methods","title":"Methods","text":""},{"location":"Console/Question/#Athena::Console::Question#validator","title":"<code>#validator : Proc(T, T) | ::Nil</code>","text":"<p>See Validating the Answer.</p> View source"},{"location":"Console/Question/#Athena::Console::Question#validator(&)","title":"<code>#validator : Nil</code>","text":"<p>Sets the validator callback to this block. See Validating the Answer.</p> View source"},{"location":"Console/Question/#Athena::Console::Question#validator=(validator)","title":"<code>#validator=(validator : Proc(T, T) | Nil)</code>","text":"<p>See Validating the Answer.</p> View source"},{"location":"Console/Question/AbstractChoice/","title":"AbstractChoice","text":""},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice","title":"abstract class <code>Athena::Console::Question::AbstractChoice(T, ChoiceType)</code> inherits <code>Reference</code>","text":"<p>Base type of choice based questions. See each subclass for more information.</p> Included modules <code>Athena::Console::Question::Base</code> Direct known subclasses <code>Athena::Console::Question::Choice(T)</code> <code>Athena::Console::Question::MultipleChoice(T)</code>"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice-constructors","title":"Constructors","text":""},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice.new(question,choices,default)","title":"<code>.new(question : String, choices : Indexable(T), default : Int | T | Nil = nil)</code>","text":"View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice.new(question,choices,default)","title":"<code>.new(question : String, choices : Hash(String | Int32, T), default : T | Nil = nil)</code>","text":"View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice-methods","title":"Methods","text":""},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#choices","title":"<code>#choices : Hash(String | Int32, T)</code>","text":"<p>Returns the possible choices.</p> View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#error_message","title":"<code>#error_message : String</code>","text":"<p>Returns the message to display if the provided answer is not a valid choice.</p> View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#error_message=(error_message)","title":"<code>#error_message=(error_message : String) : self</code>","text":"View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#prompt","title":"<code>#prompt : String</code>","text":"<p>Returns/sets the prompt to use for the question. The prompt being the character(s) before the user input.</p> View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#prompt=(prompt)","title":"<code>#prompt=(prompt : String)</code>","text":"<p>Returns/sets the prompt to use for the question. The prompt being the character(s) before the user input.</p> View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#validator","title":"<code>#validator : Proc(T | ::Nil, ChoiceType) | ::Nil</code>","text":"<p>See Validating the Answer.</p> View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#validator(&)","title":"<code>#validator : Nil</code>","text":"<p>Sets the validator callback to the provided block. See Validating the Answer.</p> View source"},{"location":"Console/Question/AbstractChoice/#Athena::Console::Question::AbstractChoice#validator=(validator)","title":"<code>#validator=(validator : Proc(T | Nil, ChoiceType) | Nil)</code>","text":"<p>See Validating the Answer.</p> View source"},{"location":"Console/Question/Base/","title":"Base","text":""},{"location":"Console/Question/Base/#Athena::Console::Question::Base","title":"module <code>Athena::Console::Question::Base(T)</code>","text":"<p>Common logic shared between all question types. See each type for more information.</p> Direct including types <code>Athena::Console::Question(T)</code> <code>Athena::Console::Question::AbstractChoice(T, ChoiceType)</code>"},{"location":"Console/Question/Base/#Athena::Console::Question::Base-constructors","title":"Constructors","text":""},{"location":"Console/Question/Base/#Athena::Console::Question::Base.new(question,default)","title":"<code>.new(question : String, default : T)</code>","text":"View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base-methods","title":"Methods","text":""},{"location":"Console/Question/Base/#Athena::Console::Question::Base#default","title":"<code>#default : T</code>","text":"<p>Returns the default value if no valid input is provided.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#hidden=(hidden)","title":"<code>#hidden=(hidden : Bool) : self</code>","text":"<p>Sets if the answer should be hidden. See Hiding User Input.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#hidden?","title":"<code>#hidden? : Bool</code>","text":"<p>Returns the answer should be hidden. See Hiding User Input.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#hidden_fallback=(hidden_fallback)","title":"<code>#hidden_fallback=(hidden_fallback : Bool)</code>","text":"<p>If hidden questions should fallback on making the response visible if it was unable to be hidden. See Hiding User Input.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#hidden_fallback?","title":"<code>#hidden_fallback? : Bool</code>","text":"<p>If hidden questions should fallback on making the response visible if it was unable to be hidden. See Hiding User Input.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#max_attempts","title":"<code>#max_attempts : Int32 | ::Nil</code>","text":"<p>Returns how many attempts the user has to enter a valid value when a <code>#validator</code> is set. See Validating the Answer.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#max_attempts=(attempts)","title":"<code>#max_attempts=(attempts : Int32 | Nil) : self</code>","text":"<p>Allow at most attempts for the user to enter a valid value when a <code>#validator</code> is set. If attempts is <code>nil</code>, they have an unlimited amount.</p> <p>See Validating the Answer.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#multi_line=(multi_line)","title":"<code>#multi_line=(multi_line : Bool)</code>","text":"<p>If multi line text should be allowed in the response. See Multiline Input.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#multi_line?","title":"<code>#multi_line? : Bool</code>","text":"<p>If multi line text should be allowed in the response. See Multiline Input.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#normalizer","title":"<code>#normalizer : Proc(T | String, T) | ::Nil</code>","text":"<p>See Normalizing the Answer.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#normalizer(&)","title":"<code>#normalizer : Nil</code>","text":"<p>Sets the normalizer callback to this block. See Normalizing the Answer.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#normalizer=(normalizer)","title":"<code>#normalizer=(normalizer : Proc(T | String, T) | Nil)</code>","text":"<p>See Normalizing the Answer.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#question","title":"<code>#question : String</code>","text":"<p>Returns the question that should be asked.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#trimmable=(trimmable)","title":"<code>#trimmable=(trimmable : Bool)</code>","text":"<p>Returns/sets if the answer value should be automatically trimmed. See Trimming the Answer.</p> View source"},{"location":"Console/Question/Base/#Athena::Console::Question::Base#trimmable?","title":"<code>#trimmable? : Bool</code>","text":"<p>Returns/sets if the answer value should be automatically trimmed. See Trimming the Answer.</p> View source"},{"location":"Console/Question/Choice/","title":"Choice","text":""},{"location":"Console/Question/Choice/#Athena::Console::Question::Choice","title":"class <code>Athena::Console::Question::Choice(T)</code> inherits <code>Athena::Console::Question::AbstractChoice</code>","text":"<p>A question whose answer MUST be within a set of predefined answers. If the user enters an invalid answer, an error is displayed and they are prompted again.</p> <pre><code>question = ACON::Question::Choice.new \"What is your favorite color?\", {\"red\", \"blue\", \"green\"}\ncolor = helper.ask input, output, question\n</code></pre> <p>This would display something like the following:</p> <pre><code>What is your favorite color?\n [0] red\n [1] blue\n [2] green\n&gt;\n</code></pre> <p>The user would be able to enter the name of the color, or the index associated with it. E.g. <code>blue</code> or <code>2</code> for <code>green</code>. If a <code>Hash</code> is used as the choices, the key of each choice is used instead of its index.</p> <p>Similar to <code>ACON::Question</code>, the third argument can be set to set the default choice. This value can also either be the actual value, or the index/key of the related choice.</p> <pre><code>question = ACON::Question::Choice.new \"What is your favorite color?\", {\"c1\" =&gt; \"red\", \"c2\" =&gt; \"blue\", \"c3\" =&gt; \"green\"}, \"c2\"\ncolor = helper.ask input, output, question\n</code></pre> <p>Which would display something like :</p> <pre><code>What is your favorite color?\n [c1] red\n [c2] blue\n [c3] green\n&gt;\n</code></pre>"},{"location":"Console/Question/Choice/#Athena::Console::Question::Choice-constructors","title":"Constructors","text":""},{"location":"Console/Question/Choice/#Athena::Console::Question::Choice.new(question,choices,default)","title":"<code>.new(question : String, choices : Hash(String | Int32, T), default : T | Nil = nil)</code>","text":"View source"},{"location":"Console/Question/Choice/#Athena::Console::Question::Choice.new(question,choices,default)","title":"<code>.new(question : String, choices : Indexable(T), default : Int | T | Nil = nil)</code>","text":"View source"},{"location":"Console/Question/Confirmation/","title":"Confirmation","text":""},{"location":"Console/Question/Confirmation/#Athena::Console::Question::Confirmation","title":"class <code>Athena::Console::Question::Confirmation</code> inherits <code>Athena::Console::Question</code>","text":"<p>Allows prompting the user to confirm an action.</p> <pre><code>question = ACON::Question::Confirmation.new \"Continue with this action?\", false\n\nif !helper.ask input, output, question\n  return ACON::Command::Status::SUCCESS\nend\n\n# ...\n</code></pre> <p>In this example the user will be asked if they wish to <code>Continue with this action</code>. The <code>#ask</code> method will return <code>true</code> if the user enters anything starting with <code>y</code>, otherwise <code>false</code>.</p>"},{"location":"Console/Question/Confirmation/#Athena::Console::Question::Confirmation-constructors","title":"Constructors","text":""},{"location":"Console/Question/Confirmation/#Athena::Console::Question::Confirmation.new(question,default,true_answer_regex)","title":"<code>.new(question : String, default : Bool = true, true_answer_regex : Regex = /^y/i)</code>","text":"<p>Creates a new instance of self with the provided question string. The default parameter represents the value to return if no valid input was entered. The true_answer_regex can be used to customize the pattern used to determine if the user's input evaluates to <code>true</code>.</p> View source"},{"location":"Console/Question/MultipleChoice/","title":"MultipleChoice","text":""},{"location":"Console/Question/MultipleChoice/#Athena::Console::Question::MultipleChoice","title":"class <code>Athena::Console::Question::MultipleChoice(T)</code> inherits <code>Athena::Console::Question::AbstractChoice</code>","text":"<p>Similar to <code>ACON::Question::Choice</code>, but allows for more than one answer to be selected. This question accepts a comma separated list of answers.</p> <pre><code>question = ACON::Question::MultipleChoice.new \"What is your favorite color?\", {\"red\", \"blue\", \"green\"}\nanswer = helper.ask input, output, question\n</code></pre> <p>This question is also similar to <code>ACON::Question::Choice</code> in that you can provide either the index, key, or value of the choice. For example submitting <code>green,0</code> would result in <code>[\"green\", \"red\"]</code> as the value of <code>answer</code>.</p>"},{"location":"Console/Question/MultipleChoice/#Athena::Console::Question::MultipleChoice-constructors","title":"Constructors","text":""},{"location":"Console/Question/MultipleChoice/#Athena::Console::Question::MultipleChoice.new(question,choices,default)","title":"<code>.new(question : String, choices : Hash(String | Int32, T), default : T | Nil = nil)</code>","text":"View source"},{"location":"Console/Question/MultipleChoice/#Athena::Console::Question::MultipleChoice.new(question,choices,default)","title":"<code>.new(question : String, choices : Indexable(T), default : Int | T | Nil = nil)</code>","text":"View source"},{"location":"Console/Spec/","title":"Spec","text":""},{"location":"Console/Spec/#Athena::Console::Spec","title":"module <code>Athena::Console::Spec</code>","text":"<p>Provides helper types for testing <code>ACON::Command</code> and <code>ACON::Application</code>s.</p>"},{"location":"Console/Spec/ApplicationTester/","title":"ApplicationTester","text":""},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester","title":"struct <code>Athena::Console::Spec::ApplicationTester</code> inherits <code>Struct</code>","text":"<p>Functionally similar to <code>ACON::Spec::CommandTester</code>, but used for testing entire <code>ACON::Application</code>s.</p> <p>Can be useful if your project extends the base application in order to customize it in some way.</p> <p>Note</p> <p>Be sure to set <code>ACON::Application#auto_exit=</code> to <code>false</code>, when testing an entire application.</p> Included modules <code>Athena::Console::Spec::Tester</code>"},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester-constructors","title":"Constructors","text":""},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester.new(application)","title":"<code>.new(application : ACON::Application)</code>","text":"View source"},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester-methods","title":"Methods","text":""},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester#application","title":"<code>#application : ACON::Application</code>","text":"<p>Returns the <code>ACON::Application</code> instance being tested.</p> View source"},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester#input","title":"<code>#input : ACON::Input::Interface</code>","text":"<p>Returns the <code>ACON::Input::Interface</code> being used by the tester.</p> View source"},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester#input?","title":"<code>#input? : ACON::Input::Interface | ::Nil</code>","text":"<p>Returns the <code>ACON::Input::Interface</code> being used by the tester.</p> View source"},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester#run(input,*,decorated,interactive,capture_stderr_separately,verbosity)","title":"<code>#run(input : Hash(String, _) = Hash(String, String).new, *, decorated : Bool | Nil = nil, interactive : Bool | Nil = nil, capture_stderr_separately : Bool = false, verbosity : ACON::Output::Verbosity | Nil = nil) : ACON::Command::Status</code>","text":"<p>Runs the application, with the provided input being used as the input of <code>ACON::Application#run</code>.</p> <p>Custom values for decorated, interactive, and verbosity can also be provided and will be forwarded to their respective types. capture_stderr_separately makes it so output to <code>STDERR</code> is captured separately, in case you wanted to test error output. Otherwise both error and normal output are captured via <code>ACON::Spec::Tester#display</code>.</p> View source"},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester#run(decorated,interactive,capture_stderr_separately,verbosity,**)","title":"<code>#run(decorated : Bool = false, interactive : Bool | Nil = nil, capture_stderr_separately : Bool = false, verbosity : ACON::Output::Verbosity | Nil = nil, **input : _)</code>","text":"<p>Runs the application, with the provided input being used as the input of <code>ACON::Application#run</code>.</p> <p>Custom values for decorated, interactive, and verbosity can also be provided and will be forwarded to their respective types. capture_stderr_separately makes it so output to <code>STDERR</code> is captured separately, in case you wanted to test error output. Otherwise both error and normal output are captured via <code>ACON::Spec::Tester#display</code>.</p> View source"},{"location":"Console/Spec/ApplicationTester/#Athena::Console::Spec::ApplicationTester#status","title":"<code>#status : ACON::Command::Status | ::Nil</code>","text":"<p>Returns the <code>ACON::Command::Status</code> of the command execution, or <code>nil</code> if it has not yet been executed.</p> View source"},{"location":"Console/Spec/CommandCompletionTester/","title":"CommandCompletionTester","text":""},{"location":"Console/Spec/CommandCompletionTester/#Athena::Console::Spec::CommandCompletionTester","title":"struct <code>Athena::Console::Spec::CommandCompletionTester</code> inherits <code>Struct</code>","text":""},{"location":"Console/Spec/CommandCompletionTester/#Athena::Console::Spec::CommandCompletionTester-constructors","title":"Constructors","text":""},{"location":"Console/Spec/CommandCompletionTester/#Athena::Console::Spec::CommandCompletionTester.new(command)","title":"<code>.new(command : ACON::Command)</code>","text":"View source"},{"location":"Console/Spec/CommandCompletionTester/#Athena::Console::Spec::CommandCompletionTester-methods","title":"Methods","text":""},{"location":"Console/Spec/CommandCompletionTester/#Athena::Console::Spec::CommandCompletionTester#complete(input)","title":"<code>#complete(input : Enumerable(String)) : Array(String)</code>","text":"View source"},{"location":"Console/Spec/CommandCompletionTester/#Athena::Console::Spec::CommandCompletionTester#complete(*)","title":"<code>#complete(*input : String) : Array(String)</code>","text":"View source"},{"location":"Console/Spec/CommandTester/","title":"CommandTester","text":""},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester","title":"struct <code>Athena::Console::Spec::CommandTester</code> inherits <code>Struct</code>","text":"<p>Allows testing the logic of an <code>ACON::Command</code>, without needing to create and run a binary.</p> <p>Say we have the following command:</p> <pre><code>@[ACONA::AsCommand(\"add\", description: \"Sums two numbers, optionally making making the sum negative\")]\nclass AddCommand &lt; ACON::Command\n  protected def configure : Nil\n    self\n      .argument(\"value1\", :required, \"The first value\")\n      .argument(\"value2\", :required, \"The second value\")\n      .option(\"negative\", description: \"If the sum should be made negative\")\n  end\n\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    sum = input.argument(\"value1\", Int32) + input.argument(\"value2\", Int32)\n\n    sum = -sum if input.option \"negative\", Bool\n\n    output.puts \"The sum of values is: #{sum}\"\n\n    ACON::Command::Status::SUCCESS\n  end\nend\n</code></pre> <p>We can use <code>ACON::Spec::CommandTester</code> to assert it is working as expected.</p> <pre><code>require \"spec\"\nrequire \"athena-spec\"\n\ndescribe AddCommand do\n  describe \"#execute\" do\n    it \"without negative option\" do\n      tester = ACON::Spec::CommandTester.new AddCommand.new\n      tester.execute value1: 10, value2: 7\n      tester.display.should eq \"The sum of the values is: 17\\n\"\n    end\n\n    it \"with negative option\" do\n      tester = ACON::Spec::CommandTester.new AddCommand.new\n      tester.execute value1: -10, value2: 5, \"--negative\": nil\n      tester.display.should eq \"The sum of the values is: 5\\n\"\n    end\n  end\nend\n</code></pre>"},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester--commands-with-user-input","title":"Commands with User Input","text":"<p>A command that are asking <code>ACON::Question</code>s can also be tested:</p> <pre><code>@[ACONA::AsCommand(\"question\")]\nclass QuestionCommand &lt; ACON::Command\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    helper = self.helper ACON::Helper::Question\n\n    question = ACON::Question(String).new \"What is your name?\", \"None\"\n    output.puts \"Your name is: #{helper.ask input, output, question}\"\n\n    ACON::Command::Status::SUCCESS\n  end\nend\n</code></pre> <pre><code>require \"spec\"\nrequire \"./src/spec\"\n\ndescribe QuestionCommand do\n  describe \"#execute\" do\n    it do\n      command = QuestionCommand.new\n      command.helper_set = ACON::Helper::HelperSet.new ACON::Helper::Question.new\n      tester = ACON::Spec::CommandTester.new command\n      tester.inputs \"Jim\"\n      tester.execute\n      tester.display.should eq \"What is your name?Your name is: Jim\\n\"\n    end\n  end\nend\n</code></pre> <p>Because we are not in the context of an <code>ACON::Application</code>, we need to manually set the <code>ACON::Helper::HelperSet</code> in order to make the command aware of <code>ACON::Helper::Question</code>. After that we can use the <code>ACON::Spec::Tester#inputs</code> method to set the inputs our test should use when prompted.</p> <p>Multiple inputs can be provided if there are multiple questions being asked.</p> Included modules <code>Athena::Console::Spec::Tester</code>"},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester-constructors","title":"Constructors","text":""},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester.new(command)","title":"<code>.new(command : ACON::Command)</code>","text":"View source"},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester-methods","title":"Methods","text":""},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester#execute(input,*,decorated,interactive,capture_stderr_separately,verbosity)","title":"<code>#execute(input : Hash(String, _) = Hash(String, String).new, *, decorated : Bool = false, interactive : Bool | Nil = nil, capture_stderr_separately : Bool = false, verbosity : ACON::Output::Verbosity | Nil = nil) : ACON::Command::Status</code>","text":"<p>Executes the command, with the provided input being passed to the command.</p> <p>Custom values for decorated, interactive, and verbosity can also be provided and will be forwarded to their respective types. capture_stderr_separately makes it so output to <code>STDERR</code> is captured separately, in case you wanted to test error output. Otherwise both error and normal output are captured via <code>ACON::Spec::Tester#display</code>.</p> View source"},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester#execute(decorated,interactive,capture_stderr_separately,verbosity,**)","title":"<code>#execute(decorated : Bool = false, interactive : Bool | Nil = nil, capture_stderr_separately : Bool = false, verbosity : ACON::Output::Verbosity | Nil = nil, **input : _)</code>","text":"<p>Executes the command, with the provided input being passed to the command.</p> <p>Custom values for decorated, interactive, and verbosity can also be provided and will be forwarded to their respective types. capture_stderr_separately makes it so output to <code>STDERR</code> is captured separately, in case you wanted to test error output. Otherwise both error and normal output are captured via <code>ACON::Spec::Tester#display</code>.</p> View source"},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester#input","title":"<code>#input : ACON::Input::Interface</code>","text":"<p>Returns the <code>ACON::Input::Interface</code> being used by the tester.</p> View source"},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester#input?","title":"<code>#input? : ACON::Input::Interface | ::Nil</code>","text":"<p>Returns the <code>ACON::Input::Interface</code> being used by the tester.</p> View source"},{"location":"Console/Spec/CommandTester/#Athena::Console::Spec::CommandTester#status","title":"<code>#status : ACON::Command::Status | ::Nil</code>","text":"<p>Returns the <code>ACON::Command::Status</code> of the command execution, or <code>nil</code> if it has not yet been executed.</p> View source"},{"location":"Console/Spec/Expectations/","title":"Expectations","text":""},{"location":"Console/Spec/Expectations/#Athena::Console::Spec::Expectations","title":"module <code>Athena::Console::Spec::Expectations</code>","text":""},{"location":"Console/Spec/Tester/","title":"Tester","text":""},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester","title":"module <code>Athena::Console::Spec::Tester</code>","text":"<p>Contains common logic shared by both <code>ACON::Spec::CommandTester</code> and <code>ACON::Spec::ApplicationTester</code>.</p> Direct including types <code>Athena::Console::Spec::ApplicationTester</code> <code>Athena::Console::Spec::CommandTester</code>"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester-methods","title":"Methods","text":""},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#assert_command_is_successful(message,*,file,line)","title":"<code>#assert_command_is_successful(message : String = \"\", *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts that the return <code>#status</code> is successful.</p> View source"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#display","title":"<code>#display : String</code>","text":"<p>Returns the output resulting from running the command. Raises if called before executing the command.</p> View source"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#error_output","title":"<code>#error_output : String</code>","text":"<p>Returns the error output resulting from running the command. Raises if <code>capture_stderr_separately</code> was not set to <code>true</code>.</p> View source"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#inputs(*)","title":"<code>#inputs(*args : String) : Nil</code>","text":"<p>Helper method to setting the <code>#inputs=</code> property.</p> View source"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#inputs=(inputs)","title":"<code>#inputs=(inputs : Array(String))</code>","text":"<p>Sets an array of values that will be used as the input to the command. <code>RETURN</code> is automatically assumed after each input.</p> View source"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#output","title":"<code>#output : ACON::Output::Interface</code>","text":"<p>Returns the <code>ACON::Output::Interface</code> being used by the tester.</p> View source"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#output?","title":"<code>#output? : ACON::Output::Interface | ::Nil</code>","text":"<p>Returns the <code>ACON::Output::Interface</code> being used by the tester.</p> View source"},{"location":"Console/Spec/Tester/#Athena::Console::Spec::Tester#status","title":"abstract <code>#status : ACON::Command::Status | ::Nil</code>","text":"View source"},{"location":"Console/Style/","title":"Style","text":""},{"location":"Console/Style/#Athena::Console::Style","title":"module <code>Athena::Console::Style</code>","text":""},{"location":"Console/Style/Athena/","title":"Athena","text":""},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena","title":"class <code>Athena::Console::Style::Athena</code> inherits <code>Athena::Console::Style::Output</code>","text":"<p>Default implementation of <code>ACON::Style::Interface</code> that provides a slew of helpful methods for formatting output.</p> <p>Uses <code>ACON::Helper::AthenaQuestion</code> to improve the appearance of questions.</p> <pre><code>protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n  style = ACON::Style::Athena.new input, output\n\n  style.title \"Some Fancy Title\"\n\n  # ...\n\n  ACON::Command::Status::SUCCESS\nend\n</code></pre>"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena-constructors","title":"Constructors","text":""},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena.new(input,output)","title":"<code>.new(input : ACON::Input::Interface, output : ACON::Output::Interface)</code>","text":"View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena-methods","title":"Methods","text":""},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#ask(question,default)","title":"<code>#ask(question : String, default : _)</code>","text":"<p>Helper method for asking <code>ACON::Question</code> questions.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#ask(question)","title":"<code>#ask(question : ACON::Question::Base)</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#ask_hidden(question)","title":"<code>#ask_hidden(question : String)</code>","text":"<p>Helper method for asking hidden <code>ACON::Question</code> questions.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#block(messages,type,style,prefix,padding,escape)","title":"<code>#block(messages : String | Enumerable(String), type : String | Nil = nil, style : String | Nil = nil, prefix : String = \" \", padding : Bool = false, escape : Bool = true) : Nil</code>","text":"<p>Helper method for outputting blocks of messages that powers the <code>#caution</code>, <code>#success</code>, <code>#note</code>, etc. methods. It includes various optional parameters that can be used to print customized blocks.</p> <p>If type is provided, its value will be printed within <code>[]</code>. E.g. <code>[TYPE]</code>.</p> <p>If style is provided, each of the messages will be printed in that style.</p> <p>prefix represents what each of the messages should be prefixed with.</p> <p>If padding is <code>true</code>, empty lines will be added before/after the block.</p> <p>If escape is <code>true</code>, each of the messages will be escaped via <code>ACON::Formatter::Output.escape</code>.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#caution(messages)","title":"<code>#caution(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <pre><code>!\n! [CAUTION] Some Message\n!\n</code></pre> <p>White text on a 3 line red background block with an empty line above/below the block.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#choice(question,choices,default)","title":"<code>#choice(question : String, choices : Indexable | Hash, default = nil)</code>","text":"<p>Helper method for asking <code>ACON::Question::Choice</code> questions.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#comment(messages)","title":"<code>#comment(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <pre><code>// Some Message\n</code></pre> <p>White text with one empty line above/below the message(s).</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#confirm(question,default)","title":"<code>#confirm(question : String, default : Bool = true) : Bool</code>","text":"<p>Helper method for asking <code>ACON::Question::Confirmation</code> questions.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#create_progress_bar(max)","title":"<code>#create_progress_bar(max : Int32 | Nil = nil) : ACON::Helper::ProgressBar</code>","text":"<p>Creates and returns an <code>ACON::Helper::ProgressBar</code>, optionally with the provided max amount of steps.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#create_table","title":"<code>#create_table : ACON::Helper::Table</code>","text":"<p>Creates and returns an Athena styled <code>ACON::Helper::Table</code> instance.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#definition_list(*)","title":"<code>#definition_list(*rows : String | ACON::Helper::Table::Separator | Enumerable(Tuple(K, V))) : Nil forall K, V</code>","text":"<p>Formats a list of key/value pairs horizontally.</p> <p>Todo</p> <p><code>Mappable</code> when/if https://github.com/crystal-lang/crystal/issues/10886 is implemented.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#error(messages)","title":"<code>#error(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <pre><code>[ERROR] Some Message\n</code></pre> <p>White text on a 3 line red background block with an empty line above/below the block.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#error_style","title":"<code>#error_style : self</code>","text":"<p>Returns a new instance of <code>self</code> that outputs to the error output.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#horizontal_table(headers,rows)","title":"<code>#horizontal_table(headers : Enumerable, rows : Enumerable) : Nil</code>","text":"<p>Sames as <code>#table</code>, but horizontal</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#info(messages)","title":"<code>#info(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <pre><code>[INFO] Some Message\n</code></pre> <p>Green text with two empty lines above/below the message(s).</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#listing(elements)","title":"<code>#listing(elements : Enumerable) : Nil</code>","text":"<p>Formats and prints a bulleted list containing the provided elements.</p> <pre><code>* Item 1\n* Item 2\n* Item 3\n</code></pre> <p>White text with one empty line above/below the list.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#listing(*)","title":"<code>#listing(*elements : String) : Nil</code>","text":"<p>:inherit:</p> <pre><code>* Item 1\n* Item 2\n* Item 3\n</code></pre> <p>White text with one empty line above/below the list.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#new_line(count)","title":"<code>#new_line(count : Int32 = 1) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#note(messages)","title":"<code>#note(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <pre><code>! [NOTE] Some Message\n</code></pre> <p>Green text with one empty line above/below the message(s).</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#print(messages,verbosity,output_type)","title":"<code>#print(messages : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#progress_advance(by)","title":"<code>#progress_advance(by step : Int32 = 1) : Nil</code>","text":"<p>Advances the internal <code>ACON::Helper::ProgressBar</code> by the provided amount of steps.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#progress_finish","title":"<code>#progress_finish : Nil</code>","text":"<p>Completes the internal <code>ACON::Helper::ProgressBar</code>.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#progress_iterate(enumerable,max,&)","title":"<code>#progress_iterate(enumerable : Enumerable(T), max : Int32 | Nil = nil, &amp; : T -&gt; Nil) : Nil forall T</code>","text":"View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#progress_start(max)","title":"<code>#progress_start(max : Int32 | Nil = nil) : Nil</code>","text":"<p>Starts an internal <code>ACON::Helper::ProgressBar</code>, optionally with the provided max amount of steps.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#puts(messages,verbosity,output_type)","title":"<code>#puts(messages : String | Enumerable(String), verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#section(message)","title":"<code>#section(message : String) : Nil</code>","text":"<p>Creates a section header with the provided message.</p> <pre><code>Some Message\n------------\n</code></pre> <p>Orange text with one empty line above/below the section.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#success(messages)","title":"<code>#success(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <pre><code> [OK] Some Message\n</code></pre> <p>Black text on a 3 line green background block with an empty line above/below the block.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#table(headers,rows)","title":"<code>#table(headers : Enumerable, rows : Enumerable) : Nil</code>","text":"<p>Formats and prints a table based on the provided headers and rows, followed by a new line.</p> <pre><code>----- -------\n Foo   Bar\n----- -------\n Biz   Baz\n 12    false\n----- -------\n</code></pre> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#text(messages)","title":"<code>#text(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <p>Same as <code>#puts</code> but indented one space and an empty line above the message(s).</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#title(message)","title":"<code>#title(message : String) : Nil</code>","text":"<p>Formats and prints message as a title.</p> <pre><code>Some Message\n============\n</code></pre> <p>Orange text with one empty line above/below the title.</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#vertical_table(headers,rows)","title":"<code>#vertical_table(headers : Enumerable, rows : Enumerable) : Nil</code>","text":"<p>Sames as <code>#table</code>, but vertical</p> View source"},{"location":"Console/Style/Athena/#Athena::Console::Style::Athena#warning(messages)","title":"<code>#warning(messages : String | Enumerable(String)) : Nil</code>","text":"<p>:inherit:</p> <pre><code> [WARNING] Some Message\n</code></pre> <p>Black text on a 3 line orange background block with an empty line above/below the block.</p> View source"},{"location":"Console/Style/Interface/","title":"Interface","text":""},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface","title":"module <code>Athena::Console::Style::Interface</code>","text":"<p>Represents a \"style\" that provides a way to abstract how to format console input/output data such that you can reduce the amount of code needed, and to standardize the appearance.</p> <p>See <code>ACON::Style::Athena</code>.</p>"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface--custom-styles","title":"Custom Styles","text":"<p>Custom styles can also be created by implementing this interface, and optionally extending from <code>ACON::Style::Output</code> which makes the style an <code>ACON::Output::Interface</code> as well as defining part of this interface. Then you could simply instantiate your custom style within a command as you would <code>ACON::Style::Athena</code>.</p> Direct including types <code>Athena::Console::Style::Output</code>"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface-methods","title":"Methods","text":""},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#ask(question,default)","title":"abstract <code>#ask(question : String, default : _)</code>","text":"<p>Helper method for asking <code>ACON::Question</code> questions.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#ask_hidden(question)","title":"abstract <code>#ask_hidden(question : String)</code>","text":"<p>Helper method for asking hidden <code>ACON::Question</code> questions.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#caution(messages)","title":"abstract <code>#caution(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages within a caution block.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#choice(question,choices,default)","title":"abstract <code>#choice(question : String, choices : Indexable | Hash, default = nil)</code>","text":"<p>Helper method for asking <code>ACON::Question::Choice</code> questions.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#comment(messages)","title":"abstract <code>#comment(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages within a comment block.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#confirm(question,default)","title":"abstract <code>#confirm(question : String, default : Bool = true) : Bool</code>","text":"<p>Helper method for asking <code>ACON::Question::Confirmation</code> questions.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#error(messages)","title":"abstract <code>#error(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages within a error block.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#info(messages)","title":"abstract <code>#info(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages within a info block.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#listing(elements)","title":"abstract <code>#listing(elements : Enumerable) : Nil</code>","text":"<p>Formats and prints a bulleted list containing the provided elements.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#new_line(count)","title":"abstract <code>#new_line(count : Int32 = 1) : Nil</code>","text":"<p>Prints count empty new lines.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#note(messages)","title":"abstract <code>#note(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages within a note block.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#progress_advance(by)","title":"abstract <code>#progress_advance(by step : Int32 = 1) : Nil</code>","text":"<p>Advances the internal <code>ACON::Helper::ProgressBar</code> by the provided amount of steps.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#progress_finish","title":"abstract <code>#progress_finish : Nil</code>","text":"<p>Completes the internal <code>ACON::Helper::ProgressBar</code>.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#progress_start(max)","title":"abstract <code>#progress_start(max : Int32 | Nil = nil) : Nil</code>","text":"<p>Starts an internal <code>ACON::Helper::ProgressBar</code>, optionally with the provided max amount of steps.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#section(message)","title":"abstract <code>#section(message : String) : Nil</code>","text":"<p>Creates a section header with the provided message.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#success(messages)","title":"abstract <code>#success(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages within a success block.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#table(headers,rows)","title":"abstract <code>#table(headers : Enumerable, rows : Enumerable) : Nil</code>","text":"<p>Formats and prints a table based on the provided headers and rows, followed by a new line.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#text(messages)","title":"abstract <code>#text(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages as text.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#title(message)","title":"abstract <code>#title(message : String) : Nil</code>","text":"<p>Formats and prints message as a title.</p> View source"},{"location":"Console/Style/Interface/#Athena::Console::Style::Interface#warning(messages)","title":"abstract <code>#warning(messages : String | Enumerable(String)) : Nil</code>","text":"<p>Formats and prints the provided messages within a warning block.</p> View source"},{"location":"Console/Style/Output/","title":"Output","text":""},{"location":"Console/Style/Output/#Athena::Console::Style::Output","title":"abstract class <code>Athena::Console::Style::Output</code> inherits <code>Reference</code>","text":"<p>Base implementation of <code>ACON::Style::Interface</code> and <code>ACON::Output::Interface</code> that provides logic common to all styles.</p> Included modules <code>Athena::Console::Output::Interface</code> <code>Athena::Console::Style::Interface</code> Direct known subclasses <code>Athena::Console::Style::Athena</code>"},{"location":"Console/Style/Output/#Athena::Console::Style::Output-constructors","title":"Constructors","text":""},{"location":"Console/Style/Output/#Athena::Console::Style::Output.new(output)","title":"<code>.new(output : ACON::Output::Interface)</code>","text":"View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output-methods","title":"Methods","text":""},{"location":"Console/Style/Output/#Athena::Console::Style::Output#create_progress_bar(max)","title":"<code>#create_progress_bar(max : Int32 | Nil = nil) : ACON::Helper::ProgressBar</code>","text":"<p>Creates and returns an <code>ACON::Helper::ProgressBar</code>, optionally with the provided max amount of steps.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#decorated=(decorated)","title":"<code>#decorated=(decorated : Bool) : Nil</code>","text":"<p>See <code>ACON::Output::Interface#decorated=</code>.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#decorated?","title":"<code>#decorated? : Bool</code>","text":"<p>See <code>ACON::Output::Interface#decorated?</code>.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#formatter","title":"<code>#formatter : ACON::Formatter::Interface</code>","text":"<p>See <code>ACON::Output::Interface#formatter</code>.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#formatter=(formatter)","title":"<code>#formatter=(formatter : ACON::Formatter::Interface) : Nil</code>","text":"<p>See <code>ACON::Output::Interface#formatter=</code>.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#new_line(count)","title":"<code>#new_line(count : Int32 = 1) : Nil</code>","text":"<p>Prints count empty new lines.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#print(message,verbosity,output_type)","title":"<code>#print(message, verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>See <code>ACON::Output::Interface#print</code>.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#puts(message,verbosity,output_type)","title":"<code>#puts(message, verbosity : ACON::Output::Verbosity = :normal, output_type : ACON::Output::Type = :normal) : Nil</code>","text":"<p>See <code>ACON::Output::Interface#puts</code>.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#verbosity","title":"<code>#verbosity : ACON::Output::Verbosity</code>","text":"<p>See <code>ACON::Output::Interface#verbosity</code>.</p> View source"},{"location":"Console/Style/Output/#Athena::Console::Style::Output#verbosity=(verbosity)","title":"<code>#verbosity=(verbosity : ACON::Output::Verbosity) : Nil</code>","text":"<p>See <code>ACON::Output::Interface#verbosity=</code>.</p> View source"},{"location":"DependencyInjection/","title":"DependencyInjection","text":""},{"location":"DependencyInjection/#Athena::DependencyInjection","title":"module <code>Athena::DependencyInjection</code>","text":"<p>Athena's Dependency Injection (DI) component, <code>ADI</code> for short, adds a service container layer to your project.  This allows useful objects, aka services, to be shared throughout the project. These objects live in a special class called the <code>ADI::ServiceContainer</code> (SC).</p> <p>The SC is lazily initialized on fibers; this allows the SC to be accessed anywhere within the project.  The <code>Athena::DependencyInjection.container</code> method will return the SC for the current fiber. Since the SC is defined on fibers, it allows for each fiber to have its own SC instance.  This can be useful for web frameworks as each request would have its own SC scoped to that request.</p> <ul> <li>See <code>ADI::Register</code> for documentation on registering services.</li> </ul> <p>Tip</p> <p>It is highly recommended to use interfaces as opposed to concrete types when defining the initializers for both services and non-services.</p> <p>Using interfaces allows changing the functionality of a type by just changing what service gets injected into it, such as via an alias. See this blog post for an example of this.</p>"},{"location":"DependencyInjection/#Athena::DependencyInjection--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Checkout the manual for some additional information on how to use it within the framework.</p> <p>If using it outside of the framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-dependency_injection:\n    github: athena-framework/dependency-injection\n    version: ~&gt; 0.3.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-dependency_injection\"</code>.</p> <p>From here integration of the component depends on the execution flow of your application, and how it uses Fibers. Since each fiber has its own container instance, if your application only uses Crystal's main fiber and is short lived, then you most likely only need to set up your services and expose one of them as public to serve as the entry point.</p> <p>If your application is meant to be long lived, such as using a HTTP::Server, then you will want to ensure that each fiber is truly independent from one another, with them not being reused or sharing state external to the container. An example of this is how <code>HTTP::Server</code> reuses fibers for <code>connection: keep-alive</code> requests. Because of this, or in cases similar to, you may want to manually reset the container via <code>Fiber.current.container = ADI::ServiceContainer.new</code>.</p>"},{"location":"DependencyInjection/#Athena::DependencyInjection-constants","title":"Constants","text":""},{"location":"DependencyInjection/#Athena::DependencyInjection::VERSION","title":"<code>VERSION = \"0.3.8\"</code>","text":""},{"location":"DependencyInjection/#Athena::DependencyInjection-class-methods","title":"Class methods","text":""},{"location":"DependencyInjection/#Athena::DependencyInjection.container","title":"<code>.container : ADI::ServiceContainer</code>","text":"<p>Returns the <code>ADI::ServiceContainer</code> for the current fiber.</p> View source"},{"location":"DependencyInjection/#Athena::DependencyInjection-macros","title":"Macros","text":""},{"location":"DependencyInjection/#Athena::DependencyInjection:auto_configure(type,options)","title":"<code>auto_configure(type, options)</code>","text":"<p>Applies the provided options to any registered service of the provided type.</p> <p>A common use case of this would be to apply a specific tag to all instances of an interface; thus preventing the need to manually apply the tag for each implementation. This can be paired with <code>Athena::DependencyInjection.bind</code> to make working with tags easier.</p> View source"},{"location":"DependencyInjection/#Athena::DependencyInjection:auto_configure(type,options)--example","title":"Example","text":"<pre><code>module ConfigInterface; end\n\n# Automatically apply the `\"config\"` tag to all instances of `ConfigInterface`.\nADI.auto_configure ConfigInterface, {tags: [\"config\"]}\n\n@[ADI::Register]\nrecord ConfigOne do\n  include ConfigInterface\nend\n\n@[ADI::Register]\nrecord ConfigTwo do\n  include ConfigInterface\nend\n\n# Options supplied on the annotation itself override the auto configured options.\n@[ADI::Register(tags: [] of String)]\nrecord ConfigThree do\n  include ConfigInterface\nend\n\n@[ADI::Register(_configs: \"!config\", public: true)]\nrecord ConfigClient, configs : Array(ConfigInterface)\n\nADI.container.config_client.configs # =&gt; [ConfigOne(), ConfigTwo()]\n</code></pre>"},{"location":"DependencyInjection/#Athena::DependencyInjection:bind(key,value)","title":"<code>bind(key, value)</code>","text":"<p>Allows binding a value to a key in order to enable auto registration of that value.</p> <p>Bindings allow scalar values, or those that could not otherwise be handled via service aliases, to be auto registered. This allows those arguments to be defined once and reused, as opposed to using named arguments to manually specify them for each service.</p> <p>Bindings can also be declared with a type restriction to allow taking the type restriction of the argument into account. Typed bindings are always checked first as the most specific type is always preferred. If no typed bindings match the argument's type, then the last defined untyped bindings is used.</p> View source"},{"location":"DependencyInjection/#Athena::DependencyInjection:bind(key,value)--example","title":"Example","text":"<pre><code>module ValueInterface; end\n\n@[ADI::Register(_value: 1, name: \"value_one\")]\n@[ADI::Register(_value: 2, name: \"value_two\")]\n@[ADI::Register(_value: 3, name: \"value_three\")]\nrecord ValueService, value : Int32 do\n  include ValueInterface\nend\n\n# Untyped bindings\nADI.bind api_key, ENV[\"API_KEY\"]\nADI.bind config, {id: 12_i64, active: true}\nADI.bind static_value, 123\nADI.bind odd_values, [\"@value_one\", \"@value_three\"]\nADI.bind value_arr, [true, true, false]\n\n# Typed bindings\nADI.bind value_arr : Array(Int32), [1, 2, 3]\nADI.bind value_arr : Array(Float64), [1.0, 2.0, 3.0]\n\n@[ADI::Register(public: true)]\nrecord BindingClient,\n  api_key : String,\n  config : NamedTuple(id: Int64, active: Bool),\n  static_value : Int32,\n  odd_values : Array(ValueInterface)\n\n@[ADI::Register(public: true)]\nrecord IntArr, value_arr : Array(Int32)\n\n@[ADI::Register(public: true)]\nrecord FloatArr, value_arr : Array(Float64)\n\n@[ADI::Register(public: true)]\nrecord BoolArr, value_arr : Array(Bool)\n\nADI.container.binding_client # =&gt;\n# BindingClient(\n#  @api_key=\"123ABC\",\n#  @config={id: 12, active: true},\n#  @static_value=123,\n#  @odd_values=[ValueService(@value=1), ValueService(@value=3)])\n\nADI.container.int_arr   # =&gt; IntArr(@value_arr=[1, 2, 3])\nADI.container.float_arr # =&gt; FloatArr(@value_arr=[1.0, 2.0, 3.0])\nADI.container.bool_arr  # =&gt; BoolArr(@value_arr=[true, true, false])\n</code></pre>"},{"location":"DependencyInjection/aliases/","title":"Aliases","text":""},{"location":"DependencyInjection/aliases/#ADI","title":"alias <code>ADI</code>","text":"<p>Convenience alias to make referencing <code>Athena::DependencyInjection</code> types easier.</p> Alias definition <code>Athena::DependencyInjection</code>"},{"location":"DependencyInjection/Console/","title":"Console","text":""},{"location":"DependencyInjection/Console/#Athena::DependencyInjection::Console","title":"module <code>Athena::DependencyInjection::Console</code>","text":"<p>Contains types related to the <code>Athena::Console</code> integration.</p>"},{"location":"DependencyInjection/Console/Application/","title":"Application","text":""},{"location":"DependencyInjection/Console/Application/#Athena::DependencyInjection::Console::Application","title":"class <code>Athena::DependencyInjection::Console::Application</code> inherits <code>Athena::Console::Application</code>","text":"<p>Entrypoint for the <code>Athena::Console</code> integration. This service should be fetched via <code>ADI.container</code> within your console CLI file.</p> <pre><code># Require your code\nrequire \"./main\"\n\n# Run the application\nADI.container.athena_console_application.run\n</code></pre> <p>Checkout the external documentation for more information.</p>"},{"location":"DependencyInjection/Inject/","title":"Inject","text":""},{"location":"DependencyInjection/Inject/#Athena::DependencyInjection::Inject","title":"annotation <code>Athena::DependencyInjection::Inject</code>","text":"<p>Specifies which constructor should be used for injection.</p> <pre><code>@[ADI::Register(_value: 2, public: true)]\nclass SomeService\n  @active : Bool = false\n\n  def initialize(value : String, @active : Bool)\n    @value = value.to_i\n  end\n\n  @[ADI::Inject]\n  def initialize(@value : Int32); end\nend\n\nADI.container.some_service # =&gt; #&lt;SomeService:0x7f51a77b1eb0 @active=false, @value=2&gt;\nSomeService.new \"1\", true  # =&gt; #&lt;SomeService:0x7f51a77b1e90 @active=true, @value=1&gt;\n</code></pre> <p>Without the <code>ADI::Inject</code> annotation, the first initializer would be used, which would fail since we are not providing a value for the <code>active</code> argument. <code>ADI::Inject</code> allows telling the service container that it should use the second constructor when registering this service.  This allows a constructor overload specific to DI to be used while still allowing the type to be used outside of DI via other constructors.</p> <p>Using the <code>ADI::Inject</code> annotation on a class method also acts a shortcut for defining a service factory.</p>"},{"location":"DependencyInjection/Proxy/","title":"Proxy","text":""},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy","title":"struct <code>Athena::DependencyInjection::Proxy(O)</code> inherits <code>Struct</code>","text":"<p>Represents a lazily initialized service. See the \"Service Proxies\" section within <code>ADI::Register</code>.</p>"},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy-constructors","title":"Constructors","text":""},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy.new(service_id,loader)","title":"<code>.new(service_id : String, loader : Proc(O))</code>","text":"View source"},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy-methods","title":"Methods","text":""},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy#instance","title":"<code>#instance : O</code>","text":"<p>Returns proxied service <code>O</code>; instantiating it if it has not already been.</p> View source"},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy#instantiated?","title":"<code>#instantiated? : Bool</code>","text":"<p>Returns whether the proxied service has been instantiated yet.</p> View source"},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy#service_id","title":"<code>#service_id : String</code>","text":"<p>Returns the service ID (name) of the proxied service.</p> View source"},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy#service_type","title":"<code>#service_type : O.class</code>","text":"<p>Returns the type of the proxied service.</p> View source"},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy-macros","title":"Macros","text":""},{"location":"DependencyInjection/Proxy/#Athena::DependencyInjection::Proxy:method_missing(call)","title":"<code>method_missing(call)</code>","text":"View source"},{"location":"DependencyInjection/Register/","title":"Register","text":""},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register","title":"annotation <code>Athena::DependencyInjection::Register</code>","text":"<p>Registers a service based on the type the annotation is applied to.</p> <p>The type of the service affects how it behaves within the container.  When a <code>struct</code> service is retrieved or injected into a type, it will be a copy of the one in the SC (passed by value). This means that changes made to it in one type, will NOT be reflected in other types.  A <code>class</code> service on the other hand will be a reference to the one in the SC.  This allows it to share state between services.</p>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--optional-arguments","title":"Optional Arguments","text":"<p>In most cases, the annotation can be applied without additional arguments.  However, the annotation accepts a handful of optional arguments to fine tune how the service is registered.</p> <ul> <li><code>name : String</code>- The name of the service.  Should be unique.  Defaults to the type's FQN snake cased.</li> <li><code>public : Bool</code> - If the service should be directly accessible from the container.  Defaults to <code>false</code>.</li> <li><code>public_alias : Bool</code> - If a service should be directly accessible from the container via an alias.  Defaults to <code>false</code>.</li> <li><code>alias : T</code> - Injects <code>self</code> when this type is used as a type restriction.  See the Aliasing Services example for more information.</li> <li><code>tags : Array(String | NamedTuple(name: String, priority: Int32?))</code> - Tags that should be assigned to the service.  Defaults to an empty array.  See the Tagging Services example for more information.</li> <li><code>type : T</code> - The type of the service within the container.  Defaults to service's types.  See the Customizing Service's Type section.</li> <li><code>factory : String | Tuple(T, String)</code> - Use a factory type/method to create the service.  See the Factories section.</li> </ul>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--examples","title":"Examples","text":""},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--basic-usage","title":"Basic Usage","text":"<p>The simplest usage involves only applying the <code>ADI::Register</code> annotation to a type.  If the type does not have any arguments, then it is simply registered as a service as is.  If the type does have arguments, then an attempt is made to register the service by automatically resolving dependencies based on type restrictions.</p> <pre><code>@[ADI::Register]\n# Register a service without any dependencies.\nstruct ShoutTransformer\n  def transform(value : String) : String\n    value.upcase\n  end\nend\n\n@[ADI::Register(public: true)]\n# The ShoutTransformer is injected based on the type restriction of the `transformer` argument.\nstruct SomeAPIClient\n  def initialize(@transformer : ShoutTransformer); end\n\n  def send(message : String)\n    message = @transformer.transform message\n\n    # ...\n  end\nend\n\nADI.container.some_api_client.send \"foo\" # =&gt; FOO\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--aliasing-services","title":"Aliasing Services","text":"<p>An important part of DI is building against interfaces as opposed to concrete types.  This allows a type to depend upon abstractions rather than a specific implementation of the interface. Or in other words, prevents a singular implementation from being tightly coupled with another type.</p> <p>We can use the <code>alias</code> argument when registering a service to tell the container that it should inject this service when a type restriction for the aliased service is found.</p> <pre><code># Define an interface for our services to use.\nmodule TransformerInterface\n  abstract def transform(value : String) : String\nend\n\n@[ADI::Register(alias: TransformerInterface)]\n# Alias the `TransformerInterface` to this service.\nstruct ShoutTransformer\n  include TransformerInterface\n\n  def transform(value : String) : String\n    value.upcase\n  end\nend\n\n@[ADI::Register]\n# Define another transformer type.\nstruct ReverseTransformer\n  include TransformerInterface\n\n  def transform(value : String) : String\n    value.reverse\n  end\nend\n\n@[ADI::Register(public: true)]\n# The `ShoutTransformer` is injected because the `TransformerInterface` is aliased to the `ShoutTransformer`.\nstruct SomeAPIClient\n  def initialize(@transformer : TransformerInterface); end\n\n  def send(message : String)\n    message = @transformer.transform message\n\n    # ...\n  end\nend\n\nADI.container.some_api_client.send \"foo\" # =&gt; FOO\n</code></pre> <p>Any service that uses <code>TransformerInterface</code> as a dependency type restriction will get the <code>ShoutTransformer</code>. However, it is also possible to use a specific implementation while still building against the interface.  The name of the constructor argument is used in part to resolve the dependency.</p> <pre><code>@[ADI::Register(public: true)]\n# The `ReverseTransformer` is injected because the constructor argument's name matches the service name of `ReverseTransformer`.\nstruct SomeAPIClient\n  def initialize(reverse_transformer : TransformerInterface)\n    @transformer = reverse_transformer\n  end\n\n  def send(message : String)\n    message = @transformer.transform message\n\n    # ...\n  end\nend\n\nADI.container.some_api_client.send \"foo\" # =&gt; oof\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--scalar-arguments","title":"Scalar Arguments","text":"<p>The auto registration logic as shown in previous examples only works on service dependencies.  Scalar arguments, such as Arrays, Strings, NamedTuples, etc, must be defined manually. This is achieved by using the argument's name prefixed with a <code>_</code> symbol as named arguments within the annotation.</p> <p><pre><code>@[ADI::Register(_shell: ENV[\"SHELL\"], _config: {id: 12_i64, active: true}, public: true)]\nstruct ScalarClient\n  def initialize(@shell : String, @config : NamedTuple(id: Int64, active: Bool)); end\nend\n\nADI.container.scalar_client # =&gt; ScalarClient(@config={id: 12, active: true}, @shell=\"/bin/bash\")\n</code></pre> Arrays can also include references to services by prefixing the name of the service with an <code>@</code> symbol.</p> <pre><code>module Interface; end\n\n@[ADI::Register]\nstruct One\n  include Interface\nend\n\n@[ADI::Register]\nstruct Two\n  include Interface\nend\n\n@[ADI::Register]\nstruct Three\n  include Interface\nend\n\n@[ADI::Register(_services: [\"@one\", \"@three\"], public: true)]\nstruct ArrayClient\n  def initialize(@services : Array(Interface)); end\nend\n\nADI.container.array_client # =&gt; ArrayClient(@services=[One(), Three()])\n</code></pre> <p>While scalar arguments cannot be auto registered by default, the <code>Athena::DependencyInjection.bind</code> macro can be used to support it.  For example: <code>ADI.bind shell, \"bash\"</code>. This would now inject the string <code>\"bash\"</code> whenever an argument named <code>shell</code> is encountered.</p>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--tagging-services","title":"Tagging Services","text":"<p>Services can also be tagged.  Service tags allows another service to have all services with a specific tag injected as a dependency. A tag consists of a name, and additional metadata related to the tag. Currently the only supported metadata value is <code>priority</code>, which controls the order in which the services are injected; the higher the priority the sooner in the array it would be.  In the future support for custom tag metadata will be implemented.</p> <p>The <code>Athena::DependencyInjection.auto_configure</code> macro may also be used to make working with tags easier.</p> <pre><code>PARTNER_TAG = \"partner\"\n\n@[ADI::Register(_id: 1, name: \"google\", tags: [{name: PARTNER_TAG, priority: 5}])]\n@[ADI::Register(_id: 2, name: \"facebook\", tags: [PARTNER_TAG])]\n@[ADI::Register(_id: 3, name: \"yahoo\", tags: [{name: \"partner\", priority: 10}])]\n@[ADI::Register(_id: 4, name: \"microsoft\", tags: [PARTNER_TAG])]\n# Register multiple services based on the same type.  Each service must give define a unique name.\nrecord FeedPartner, id : Int32\n\n@[ADI::Register(_services: \"!partner\", public: true)]\n# Inject all services with the `\"partner\"` tag into `self`.\nclass PartnerClient\n  def initialize(@services : Array(FeedPartner)); end\nend\n\nADI.container.partner_client # =&gt;\n# #&lt;PartnerClient:0x7f43c0a1ae60\n#  @services=\n#   [FeedPartner(@id=3, @name=\"Yahoo\"),\n#    FeedPartner(@id=1, @name=\"Google\"),\n#    FeedPartner(@id=2, @name=\"Facebook\"),\n#    FeedPartner(@id=4, @name=\"Microsoft\")]&gt;\n</code></pre> <p>While tagged services cannot be injected automatically by default, the <code>Athena::DependencyInjection.bind</code> macro can be used to support it.  For example: <code>ADI.bind partners, \"!partner\"</code>. This would now inject all services with the <code>partner</code> tagged when an argument named <code>partners</code> is encountered. A type restriction can also be added to the binding to allow reusing the name.  See the documentation for <code>Athena::DependencyInjection.bind</code> for an example.</p>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--service-proxies","title":"Service Proxies","text":"<p>In some cases, it may be a bit \"heavy\" to instantiate a service that may only be used occasionally. To solve this, a proxy of the service could be injected instead. The instantiation of proxied services are deferred until a method is called on it.</p> <p>A service is proxied by changing the type signature of the service to be of the <code>ADI::Proxy(T)</code> type, where <code>T</code> is the service to be proxied.</p> <pre><code>@[ADI::Register]\nclass ServiceTwo\n  getter value = 123\n\n  def initialize\n    pp \"new s2\"\n  end\nend\n\n@[ADI::Register(public: true)]\nclass ServiceOne\n  getter service_two : ADI::Proxy(ServiceTwo)\n\n  # Tells `ADI` that a proxy of `ServiceTwo` should be injected.\n  def initialize(@service_two : ADI::Proxy(ServiceTwo))\n    pp \"new s1\"\n  end\n\n  def run\n    # At this point service_two hasn't been initialized yet.\n    pp \"before value\"\n\n    # First method interaction with the proxy instantiates the service and forwards the method to it.\n    pp @service_two.value\n  end\nend\n\nADI.container.service_one.run\n# \"new s1\"\n# \"before value\"\n# \"new s2\"\n# 123\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--tagged-services-proxies","title":"Tagged Services Proxies","text":"<p>Tagged services may also be injected as an array of proxy objects. This can be useful as an easy way to manage a collection of services where only one (or a small amount) will be used at a time.</p> <pre><code>@[ADI::Register(_services: \"!some_tag\")]\nclass SomeService\n  def initialize(@services : Array(ADI::Proxy(ServiceType)))\n  end\nend\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--proxy-metadata","title":"Proxy Metadata","text":"<p>The <code>ADI::Proxy</code> object also exposes some metadata related to the proxied object; such as its name, type, and if it has been instantiated yet.</p> <p>For example, using <code>ServiceTwo</code>:</p> <pre><code># Assume this returns a `ADI::Proxy(ServiceTwo)`.\nproxy = ADI.container.service_two\n\nproxy.service_id    # =&gt; \"service_two\"\nproxy.service_type  # =&gt; ServiceTwo\nproxy.instantiated? # =&gt; false\nproxy.value         # =&gt; 123\nproxy.instantiated? # =&gt; true\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--parameters","title":"Parameters","text":"<p>The <code>Athena::Config</code> component provides a way to manage <code>ACF::Parameters</code> objects used to define reusable parameters. It is possible to inject these parameters directly into services in a type safe way.</p> <p>Parameter injection utilizes a specially formatted string, similar to tagged services. The parameter name should be a string starting and ending with a <code>%</code>, e.g. <code>\"%app.database.username%\"</code>. The value within the <code>%</code> represents the \"path\" to the parameter from the <code>ACF::Parameters</code> base type.</p> <p>Parameters may be supplied either via <code>Athena::DependencyInjection.bind</code> or an explicit service argument.</p> <pre><code>struct DatabaseConfig\n  getter username : String = \"USERNAME\"\nend\n\nstruct AppConfig\n  getter name : String = \"My App\"\n  getter database : DatabaseConfig = DatabaseConfig.new\nend\n\nclass Athena::Config::Parameters\n  getter app : AppConfig = AppConfig.new\nend\n\nADI.bind db_username, \"%app.database.username%\"\n\n@[ADI::Register(_app_name: \"%app.name%\", public: true)]\nrecord SomeService, app_name : String, db_username : String\n\nservice = ADI.container.some_service\nservice.app_name    # =&gt; \"My App\"\nservice.db_username # =&gt; \"USERNAME\"\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--configuration","title":"Configuration","text":"<p>The <code>Athena::Config</code> component provides a way to manage <code>ACF::Base</code> objects used for configuration. The <code>Athena::DependencyInjection</code> component leverages the <code>ACFA::Resolvable</code> annotation to allow injecting entire configuration objects into services in addition to individual parameters.</p> <p>The primary use case for is for types that have functionality that should be configurable by the end user. The configuration object could be injected as a constructor argument to set the value of instance variables, or be one itself.</p> <pre><code># Define an example configuration type for a fictional Athena component.\n# The annotation argument describes the \"path\" to this particular configuration\n# type from `ACF.config`. I.e. `ACF.config.some_component`.\n@[ACFA::Resolvable(\"some_component\")]\nstruct SomeComponentConfig\n  # By default return a new instance with a default value.\n  def self.configure : self\n    new\n  end\n\n  getter multiplier : Int32\n\n  def initialize(@multiplier : Int32 = 1); end\nend\n\n# This type would be a part of the `ACF::Base` type.\nclass ACF::Base\n  getter some_component : SomeComponentConfig = SomeComponentConfig.configure\nend\n\n# Define an example configurable service to use our configuration object.\n@[ADI::Register(public: true)]\nclass MultiplierService\n  @multiplier : Int32\n\n  def initialize(config : SomeComponentConfig)\n    @multiplier = config.multiplier\n  end\n\n  def multiply(value : Number)\n    value * @multiplier\n  end\nend\n\nADI.container.multiplier_service.multiply 10 # =&gt; 10\n</code></pre> <p>By default our <code>MultiplierService</code> will use a multiplier of <code>1</code>, the default value in the <code>SomeComponentConfig</code>. However, if we wanted to change that value we could do something like this, without changing any of the earlier code.</p> <pre><code># Override the configuration type's configure method\n# to supply our own custom multiplier value.\ndef SomeComponentConfig.configure\n  new 10\nend\n\nADI.container.multiplier_service.multiply 10 # =&gt; 100\n</code></pre> <p>If the configurable service is also used outside of the service container, the factory pattern could also be used.</p> <pre><code>@[ADI::Register(public: true)]\nclass MultiplierService\n  # Tell the service container to use this constructor for DI.\n  @[ADI::Inject]\n  def self.new(config : SomeComponentConfig)\n    # Using the configuration object to supply the argument to the standard initialize method.\n    new config.multiplier\n  end\n\n  def initialize(@multiplier : Int32); end\n\n  def multiply(value : Number)\n    value * @multiplier\n  end\nend\n\n# Multiplier from the service container.\nADI.container.multiplier_service.multiply 10 # =&gt; 10\n\n# A directly instantiated type.\nMultiplierService.new(10).multiply 10 # =&gt; 100\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--optional-services","title":"Optional Services","text":"<p>Services defined with a nillable type restriction are considered to be optional.  If no service could be resolved from the type, then <code>nil</code> is injected instead. Similarly, if the argument has a default value, that value would be used instead.</p> <pre><code>struct OptionalMissingService\nend\n\n@[ADI::Register]\nstruct OptionalExistingService\nend\n\n@[ADI::Register(public: true)]\nclass OptionalClient\n  getter service_missing, service_existing, service_default\n\n  def initialize(\n    @service_missing : OptionalMissingService?,\n    @service_existing : OptionalExistingService?,\n    @service_default : OptionalMissingService | Int32 | Nil = 12\n  ); end\nend\n\nADI.container.optional_client\n# #&lt;OptionalClient:0x7fe7de7cdf40\n#  @service_default=12,\n#  @service_existing=OptionalExistingService(),\n#  @service_missing=nil&gt;\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--generic-services","title":"Generic Services","text":"<p>Generic arguments can be provided as positional arguments within the <code>ADI::Register</code> annotation.</p> <p>Note</p> <p>Services based on generic types MUST explicitly provide a name via the <code>name</code> field within the <code>ADI::Register</code> annotation since there wouldn't be a way to tell them apart from the class name alone.</p> <pre><code>@[ADI::Register(Int32, Bool, name: \"int_service\", public: true)]\n@[ADI::Register(Float64, Bool, name: \"float_service\", public: true)]\nstruct GenericService(T, B)\n  def type\n    {T, B}\n  end\nend\n\nADI.container.int_service.type   # =&gt; {Int32, Bool}\nADI.container.float_service.type # =&gt; {Float64, Bool}\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--factories","title":"Factories","text":"<p>In some cases it may be necessary to use the factory design pattern to handle creating an object as opposed to creating the object directly.  In this case the <code>factory</code> argument can be used.</p> <p>Factory methods are class methods defined on some type; either the service itself or a different type. Arguments to the factory method are provided as they would if the service was being created directly. This includes auto resolved service dependencies, and scalar underscore based arguments included within the <code>ADI::Register</code> annotation.</p>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--same-type","title":"Same Type","text":"<p>A <code>String</code> <code>factory</code> value denotes the method name that should be called on the service itself to create the service.</p> <pre><code># Calls `StringFactoryService.double` to create the service.\n@[ADI::Register(_value: 10, public: true, factory: \"double\")]\nclass StringFactoryService\n  getter value : Int32\n\n  def self.double(value : Int32) : self\n    new value * 2\n  end\n\n  def initialize(@value : Int32); end\nend\n\nADI.container.string_factory_service.value # =&gt; 20\n</code></pre> <p>Using the <code>ADI::Inject</code> annotation on a class method is equivalent to providing that method's name as the <code>factory</code> value. For example, this is the same as the previous example:</p> <pre><code>@[ADI::Register(_value: 10, public: true)]\nclass StringFactoryService\n  getter value : Int32\n\n  @[ADI::Inject]\n  def self.double(value : Int32) : self\n    new value * 2\n  end\n\n  def initialize(@value : Int32); end\nend\n\nADI.container.string_factory_service.value # =&gt; 20\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--different-type","title":"Different Type","text":"<p>A <code>Tuple</code> can also be provided as the <code>factory</code> value to allow using an external type's factory method to create the service. The first item represents the factory type to use, and the second item represents the method that should be called.</p> <pre><code>class TestFactory\n  def self.create_tuple_service(value : Int32) : TupleFactoryService\n    TupleFactoryService.new value * 3\n  end\nend\n\n# Calls `TestFactory.create_tuple_service` to create the service.\n@[ADI::Register(_value: 10, public: true, factory: {TestFactory, \"create_tuple_service\"})]\nclass TupleFactoryService\n  getter value : Int32\n\n  def initialize(@value : Int32); end\nend\n\nADI.container.tuple_factory_service.value # =&gt; 30\n</code></pre>"},{"location":"DependencyInjection/Register/#Athena::DependencyInjection::Register--customizing-services-type","title":"Customizing Service's Type","text":"<p>By default when a service is registered, it is typed the same as the service, for example:</p> <pre><code>@[ADI::Register]\nclass MyService; end\n</code></pre> <p>This service is essentially represented in the service container as <code>@my_service : MyService</code>. This is usually fine for most services, however there are some cases where the service's type should not be the concrete implementation. An example of this is if that service should be mockable in a test setting.  Mockable services should be typed to an interface that they implement in order to allow mock implementations to be used if needed.</p> <pre><code>module SomeInterface; end\n\n@[ADI::Register(type: SomeInterface)]\nclass MyService\n  include SomeInterface\nend\n</code></pre> <p>By specifying the <code>type</code> as <code>SomeInterface</code>, this changes the services representation in the service container to <code>@my_service : SomeInterface</code>, thus allowing the exact implementation to be changed.  See <code>ADI::Spec::MockableServiceContainer</code> for more details.</p>"},{"location":"DependencyInjection/ServiceContainer/","title":"ServiceContainer","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer","title":"class <code>Athena::DependencyInjection::ServiceContainer</code> inherits <code>Reference</code>","text":"<p>Where the instantiated services live.</p> <p>If a service is public, a getter based on the service's name as well as its type is defined.  Otherwise, services are only available via constructor DI.</p> <p>Todo</p> <p>Reduce the amount of duplication when this issue is resolved.</p> Included modules <code>Athena::DependencyInjection::Console::CompilerPasses::RegisterCommands</code> <code>Athena::DependencyInjection::EventDispatcher::CompilerPasses::RegisterEventListenersPass</code> <code>Athena::DependencyInjection::ServiceContainer::DefineGetters</code> <code>Athena::DependencyInjection::ServiceContainer::RegisterServices</code> <code>Athena::DependencyInjection::ServiceContainer::RemoveUnusedServices</code> <code>Athena::DependencyInjection::ServiceContainer::ResolveArguments</code> <code>Athena::Framework::CompilerPasses::MakeControllerServicesPublicPass</code> Direct known subclasses <code>Athena::DependencyInjection::Spec::MockableServiceContainer</code>"},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer-methods","title":"Methods","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#athena_console_application","title":"<code>#athena_console_application : Athena::DependencyInjection::Console::Application</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#athena_console_command_loader","title":"<code>#athena_console_command_loader : Athena::DependencyInjection::Console::ContainerCommandLoader</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#athena_route_handler","title":"<code>#athena_route_handler : Athena::Framework::RouteHandler</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#get(service)","title":"<code>#get(service : Athena::DependencyInjection::Console::Application.class) : Athena::DependencyInjection::Console::Application</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#get(service)","title":"<code>#get(service : Athena::Framework::Routing::Router.class) : Athena::Framework::Routing::Router</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#get(service)","title":"<code>#get(service : Athena::Framework::RequestStore.class) : Athena::Framework::RequestStore</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#get(service)","title":"<code>#get(service : Athena::Framework::RouteHandler.class) : Athena::Framework::RouteHandler</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#get(service)","title":"<code>#get(service : Athena::DependencyInjection::Console::ContainerCommandLoader.class) : Athena::DependencyInjection::Console::ContainerCommandLoader</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#request_store","title":"<code>#request_store : Athena::Framework::RequestStore</code>","text":""},{"location":"DependencyInjection/ServiceContainer/#Athena::DependencyInjection::ServiceContainer#router","title":"<code>#router : Athena::Framework::Routing::Router</code>","text":""},{"location":"DependencyInjection/Spec/","title":"Spec","text":""},{"location":"DependencyInjection/Spec/#Athena::DependencyInjection::Spec","title":"module <code>Athena::DependencyInjection::Spec</code>","text":"<p>A set of testing utilities/types to aid in testing <code>Athena::DependencyInjection</code> related types.</p>"},{"location":"DependencyInjection/Spec/#Athena::DependencyInjection::Spec--getting-started","title":"Getting Started","text":"<p>Require this module in your <code>spec_helper.cr</code> file.</p> <pre><code># This also requires \"spec\".\nrequire \"athena-dependency_injection/spec\"\n</code></pre>"},{"location":"DependencyInjection/Spec/MockableServiceContainer/","title":"MockableServiceContainer","text":""},{"location":"DependencyInjection/Spec/MockableServiceContainer/#Athena::DependencyInjection::Spec::MockableServiceContainer","title":"class <code>Athena::DependencyInjection::Spec::MockableServiceContainer</code> inherits <code>Athena::DependencyInjection::ServiceContainer</code>","text":"<p>A mock implementation of <code>ADI::ServiceContainer</code> that be used within a testing context to allow for mocking out services without affecting the actual container outside of tests.</p> <p>An example of this is when integration testing service based ATH::Controllers. Service dependencies that interact with an external source, like a third party API or a database, should most likely be mocked out. However your other services should be left as is in order to get the most benefit from the test.</p>"},{"location":"DependencyInjection/Spec/MockableServiceContainer/#Athena::DependencyInjection::Spec::MockableServiceContainer--mocking","title":"Mocking","text":"<p>The <code>ADI::ServiceContainer</code> is nothing more than a normal Crystal class with some instance variables and methods. As such, mocking services is as easy as monkey patching <code>self</code> with the mocked versions, assuming of course they are of a compatible type.</p> <p>Given Crystal's lack of a robust mocking shard, it isn't as straightforward as other languages. The best way at the moment is either using inheritance or interfaces (modules) to manually create a concrete test class/struct; with the latter option being preferred as it would work for both structs and classes.</p> <p>For example, we can create a mock implementation of a type by extending it: <pre><code>class MockMyService &lt; MyService\n  def get_value\n    # Can now just return a static expected value.\n    # Test properties/constructor(s) can also be added to make it a bit more generic.\n    1234\n  end\nend\n</code></pre></p> <p>Because our mock extends <code>MyService</code>, it is a compatible type for anything typed as <code>MyService</code>.</p> <p>Another way to handle mocking is via interfaces (modules).</p> <pre><code>module SomeInterface; end\n\nstruct MockMyService\n  include SomeInterface\nend\n</code></pre> <p>Because our mock implements <code>SomeInterface</code>, it is a compatible type for anything typed as <code>SomeInterface</code>.</p> <p>Note</p> <p>Service mocks do not need to registered as services themselves since they will need to be configured manually. NOTE: The <code>type</code> argument as part of the <code>ADI::Register</code> annotation can be used to set the type of a service within the container. See <code>ADI::Register@customizing-services-type</code> for more details.</p>"},{"location":"DependencyInjection/Spec/MockableServiceContainer/#Athena::DependencyInjection::Spec::MockableServiceContainer--dynamic-mocks","title":"Dynamic Mocks","text":"<p>A dynamic mock consists of adding a <code>setter</code> to <code>self</code> that allows setting the mocked service dynamically at runtime, while keeping the original up until if/when it is replaced.</p> <pre><code>class ADI::Spec::MockableServiceContainer\n  # The setter should be nilable as they're lazily initialized within the container.\n  setter my_service : MyServiceInterface?\nend\n\n# ...\n\n# Now the `my_service` service can be replaced at runtime.\nmock_container.my_service = MockMyService.new\n\n# ...\n</code></pre>"},{"location":"DependencyInjection/Spec/MockableServiceContainer/#Athena::DependencyInjection::Spec::MockableServiceContainer--global-mocks","title":"Global Mocks","text":"<p>Global mocks totally replace the original service, i.e. always return the mocked service.</p> <pre><code>class ADI::Spec::MockableServiceContainer\n  # Global mocks should use the block based `getter` macro.\n  getter my_service : MyServiceInterface { MockMyService.new }\nend\n\n# `MockMyService` will now be injected across the board when using `self`.\n# ...\n</code></pre>"},{"location":"DependencyInjection/Spec/MockableServiceContainer/#Athena::DependencyInjection::Spec::MockableServiceContainer--hybrid-mocks","title":"Hybrid Mocks","text":"<p>Dynamic and Global mocking can also be combined to allow having a default mock, but allow overriding if/when needed. This can be accomplished by adding both a getter and setter to <code>self.</code></p> <pre><code>class ADI::Spec::MockableServiceContainer\n  # Hybrid mocks should use the block based `property` macro.\n  property my_service : MyServiceInterface { DefaultMockService.new }\nend\n\n# ...\n\n# `DefaultMockService` will now be injected across the board by when using `self`.\n\n# But can still be replaced at runtime.\nmock_container.my_service = CustomMockService.new\n\n# ...\n</code></pre>"},{"location":"Dotenv/","title":"Dotenv","text":""},{"location":"Dotenv/#Athena::Dotenv","title":"class <code>Athena::Dotenv</code> inherits <code>Reference</code>","text":"<p>Using Environment variables (ENV vars) is a common practice to configure options that depend on where the application is run; allowing the application's configuration to be de-coupled from its code. E.g. anything that changes from one machine to another, such as database credentials.</p> <p><code>.env</code> files are a convenient way to get the benefits of ENV vars, without taking on the extra complexity of other tools/abstractions until if/when they are needed. The file(s) can be defined at the root of your project for development, or placed next to the binary if running outside of a dev environment. The <code>Athena::Dotenv</code> component parses the <code>.env</code> files to make ENV vars stored within them accessible.</p>"},{"location":"Dotenv/#Athena::Dotenv--getting-started","title":"Getting Started","text":"<p>Unlike the other components, this one requires being manually installed, even if it is being used within the framework. This is primarily because it is not strictly required, and its use is completely optional. As such, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-dotenv:\n    github: athena-framework/dotenv\n    version: ~&gt; 0.1.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-dotenv\"</code>.</p>"},{"location":"Dotenv/#Athena::Dotenv--usage","title":"Usage","text":"<p>All usage involves using an <code>Athena::Dotenv</code> instance. For example:</p> <p><pre><code>require \"athena-dotenv\"\n\n# Create a new instance\ndotenv = Athena::Dotenv.new\n\n# Load a file\ndotenv.load \"./.env\"\n\n# Load multiple files\ndotenv.load \"./.env\", \"./.env.dev\"\n\n# Overrides existing variables\ndotenv.overload \"./.env\"\n\n# Load all files for the current $APP_ENV\n# .env, .env.local, and .env.$APP_ENV.local or .env.$APP_ENV\ndotenv.load_environment \"./.env\"\n</code></pre> A <code>Athena::Dotenv::Exceptions::Path</code> error will be raised if the provided file was not found, or is not readable.</p>"},{"location":"Dotenv/#Athena::Dotenv--syntax","title":"Syntax","text":"<p>ENV vars should be defined one per line. There should be no space between the <code>=</code> between the var name and its value.</p> <pre><code>DATABASE_URL=mysql://db_user:db_password@127.0.0.1:3306/db_name\n</code></pre> <p>A<code>Athena::Dotenv::Exceptions::Format</code> error will be raised if a formatting/parsing error is encountered.</p>"},{"location":"Dotenv/#Athena::Dotenv--comments","title":"Comments","text":"<p>Comments can be defined by prefixing them with a <code>#</code> character. Comments can defined on its own line, or inlined after an ENV var definition.</p> <pre><code># Single line comment\nFOO=BAR\n\nBAR=BAZ # Inline comment\n</code></pre>"},{"location":"Dotenv/#Athena::Dotenv--quotes","title":"Quotes","text":"<p>Unquoted values, or those quoted with single (<code>'</code>) quotes behave as literals while double (<code>\"</code>) quotes will have special chars expanded. For example, given the following <code>.env</code> file:</p> <p><pre><code>UNQUOTED=FOO\\nBAR\nSINGLE_QUOTES='FOO\\nBAR'\nDOUBLE_QUOTES=\"FOO\\nBAR\"\n</code></pre> <pre><code>require \"athena-dotenv\"\n\nAthena::Dotenv.new.load \"./.env\"\n\nENV[\"UNQUOTED\"]      # =&gt; \"FOO\\\\nBAR\"\nENV[\"SINGLE_QUOTES\"] # =&gt; \"FOO\\\\nBAR\"\nENV[\"DOUBLE_QUOTES\"] # =&gt; \"FOO\\n\" + \"BAR\"\n</code></pre></p> <p>Notice how only the double quotes version actually expands <code>\\n</code> into a newline, whereas the others treat it as a literal <code>\\n</code>.</p> <p>Quoted values may also extend over multiple lines:</p> <pre><code>FOO=\"FOO\nBAR\\n\nBAZ\"\n</code></pre> <p>Both single and double quotes will include the actual newline characters, however only double quotes would expand the extra newline in <code>BAR\\n</code>.</p>"},{"location":"Dotenv/#Athena::Dotenv--variables","title":"Variables","text":"<p>ENV vars can be used in values by prefixing the variable name with a <code>$</code> with optional opening and closing <code>{}</code>.</p> <pre><code>FOO=BAR\nBAZ=$FOO\nBIZ=${BAZ}\n</code></pre> <p>Warning</p> <p>The order is important when using variables. In the previous example <code>FOO</code> must be defined <code>BAZ</code> which must be defined before <code>BIZ</code>. This also extends to when loading multiple files, where a variable may use the value in another file.</p> <p>Default values may also be defined in case the related ENV var is not set:</p> <pre><code>DB_USER=${DB_USER:-root}\n</code></pre> <p>This would set the value of <code>DB_USER</code> to be <code>root</code>, unless <code>DB_USER</code> is defined elsewhere in which case it would use the value of that variable.</p>"},{"location":"Dotenv/#Athena::Dotenv--commands","title":"Commands","text":"<p>Shell commands can be evaluated via <code>$()</code>.</p> <p>Note</p> <p>Commands are currently not supported on Windows.</p> <pre><code>DATE=$(date)\n</code></pre>"},{"location":"Dotenv/#Athena::Dotenv--file-precedence","title":"File Precedence","text":"<p>The default <code>.env</code> file defines ALL ENV vars used within an application, with sane defaults. This file should be committed and should not contain any sensitive values.</p> <p>However in some cases you may need to define values to override those in <code>.env</code>, whether that be only for a single machine, or all machines in a specific environment.</p> <p>For these purposes there are other <code>.env</code> files that are loaded in a specific order to allow for just this use case:</p> <ul> <li><code>.env</code> - Defines all ENV vars, and their default values, used by the application.</li> <li><code>.env.local</code> - Overrides ENV vars for all environments, but only for the machine that contains the file.       This file should NOT be committed, and is ignored in the <code>test</code> environment to ensure reproducibility.</li> <li><code>.env.&lt;environment&gt;</code> (e.g. <code>.env.test</code>) - Overrides ENV vars for only this one environment. These files SHOULD be committed.</li> <li><code>.env.&lt;environment&gt;.local</code> (e.g. <code>.env.test.local</code>) - Machine-specific overrides, but only for a single environment. This file should NOT be committed.</li> </ul> <p>See <code>#load_environment</code> for more information.</p> <p>Note</p> <p>Real ENV vars always win against those created in any <code>.env</code> file.</p> <p>Tip</p> <p>Environment specific <code>.env</code> files should ONLY to override values defined within the default <code>.env</code> file and NOT as a replacement to it. This ensures there is still a single source of truth and removes the need to duplicate everything for each environment.</p>"},{"location":"Dotenv/#Athena::Dotenv--production","title":"Production","text":"<p><code>.env</code> files are mainly intended for non-production environments in order to give the benefits of using ENV vars, but be more convenient/easier to use. They can of course continue to be used in production by distributing the base <code>.env</code> file along with the binary, then creating a <code>.env.local</code> on the production server and including production values within it. This can work quite well for simple applications, but ultimately a more robust solution that best leverages the features of the server the application is running on is best.</p>"},{"location":"Dotenv/#Athena::Dotenv-constants","title":"Constants","text":""},{"location":"Dotenv/#Athena::Dotenv::VERSION","title":"<code>VERSION = \"0.1.1\"</code>","text":""},{"location":"Dotenv/#Athena::Dotenv-constructors","title":"Constructors","text":""},{"location":"Dotenv/#Athena::Dotenv.new(env_key)","title":"<code>.new(env_key : String = \"APP_ENV\")</code>","text":"View source"},{"location":"Dotenv/#Athena::Dotenv-methods","title":"Methods","text":""},{"location":"Dotenv/#Athena::Dotenv#load(*)","title":"<code>#load(*paths : String | Path) : Nil</code>","text":"<p>Loads each <code>.env</code> file within the provided paths.</p> <pre><code>require \"athena-dotenv\"\n\ndotenv = Athena::Dotenv.new\n\ndotenv.load \"./.env\"\ndotenv.load \"./.env\", \"./.env.dev\"\n</code></pre> View source"},{"location":"Dotenv/#Athena::Dotenv#load_environment(path,env_key,default_environment,test_environments,override_existing_vars)","title":"<code>#load_environment(path : String | Path, env_key : String | Nil = nil, default_environment : String = \"dev\", test_environments : Enumerable(String) = {\"test\"}, override_existing_vars : Bool = false) : Nil</code>","text":"<p>Loads a <code>.env</code> file and its related additional files based on their precedence if they exist.</p> <p>The current ENV is determined by the value of <code>APP_ENV</code>, which is configurable globally via <code>.new</code>, or for a single load via the env_key parameter. If no environment ENV var is defined, default_environment will be used. The <code>.env.local</code> file will NOT be loaded if the current environment is included within test_environments.</p> <p>Existing ENV vars may optionally be overridden by passing <code>true</code> to override_existing_vars.</p> <pre><code>require \"athena-dotenv\"\n\ndotenv = Athena::Dotenv.new\n\n# Use `APP_ENV`, or `dev`\ndotenv.load_environment \"./.env\"\n\n# Custom *env_key* and *default_environment*\ndotenv.load_environment \"./.env\", \"ATHENA_ENV\", \"qa\"\n</code></pre> View source"},{"location":"Dotenv/#Athena::Dotenv#overload(*)","title":"<code>#overload(*paths : String | Path) : Nil</code>","text":"<p>Same as <code>#load</code>, but will override existing ENV vars.</p> View source"},{"location":"Dotenv/#Athena::Dotenv#parse(data,path)","title":"<code>#parse(data : String, path : String | Path = \".env\") : Hash(String, String)</code>","text":"<p>Parses and returns a Hash based on the string contents of the provided data string. The original <code>.env</code> file path may also be provided to path for more meaningful error messages.</p> <pre><code>require \"athena-dotenv\"\n\npath = \"/path/to/.env\"\ndotenv = Athena::Dotenv.new\n\nFile.write path, \"FOO=BAR\"\n\ndotenv.parse File.read(path), path # =&gt; {\"FOO\" =&gt; \"BAR\"}\n</code></pre> View source"},{"location":"Dotenv/#Athena::Dotenv#populate(values,override_existing_vars)","title":"<code>#populate(values : Hash(String, String), override_existing_vars : Bool = false) : Nil</code>","text":"<p>Populates the provides values into the environment.</p> <p>Existing ENV vars may optionally be overridden by passing <code>true</code> to override_existing_vars.</p> <pre><code>require \"athena-dotenv\"\n\nENV[\"FOO\"]? # =&gt; nil\n\nAthena::Dotenv.new.populate({\"FOO\" =&gt; \"BAR\"})\n\nENV[\"FOO\"]? # =&gt; \"BAR\"\n</code></pre> View source"},{"location":"Dotenv/Exceptions/","title":"Exceptions","text":""},{"location":"Dotenv/Exceptions/#Athena::Dotenv::Exceptions","title":"module <code>Athena::Dotenv::Exceptions</code>","text":""},{"location":"Dotenv/Exceptions/Format/","title":"Format","text":""},{"location":"Dotenv/Exceptions/Format/#Athena::Dotenv::Exceptions::Format","title":"class <code>Athena::Dotenv::Exceptions::Format</code> inherits <code>RuntimeError</code>","text":"<p>Raised when there is a parsing error within a <code>.env</code> file.</p>"},{"location":"Dotenv/Exceptions/Format/#Athena::Dotenv::Exceptions::Format-constructors","title":"Constructors","text":""},{"location":"Dotenv/Exceptions/Format/#Athena::Dotenv::Exceptions::Format.new(message,context,cause)","title":"<code>.new(message : String, context : Athena::Dotenv::Exceptions::Format::Context, cause : Exception | Nil = nil)</code>","text":"View source"},{"location":"Dotenv/Exceptions/Format/#Athena::Dotenv::Exceptions::Format-methods","title":"Methods","text":""},{"location":"Dotenv/Exceptions/Format/#Athena::Dotenv::Exceptions::Format#context","title":"<code>#context : Athena::Dotenv::Exceptions::Format::Context</code>","text":"<p>Returns an object containing contextual information about this error.</p> View source"},{"location":"Dotenv/Exceptions/Format/Context/","title":"Context","text":""},{"location":"Dotenv/Exceptions/Format/Context/#Athena::Dotenv::Exceptions::Format::Context","title":"struct <code>Athena::Dotenv::Exceptions::Format::Context</code> inherits <code>Struct</code>","text":"<p>Stores contextual information related to an <code>Athena::Dotenv::Exceptions::Format</code>.</p> <pre><code>begin\n  dotenv = Athena::Dotenv.new.parse \"NAME=Jim\\nFOO=BAR BAZ\"\nrescue ex : Athena::Dotenv::Exceptions::Format\n  ctx = ex.context\n\n  ctx.path        # =&gt; \".env\"\n  ctx.line_number # =&gt; 2\n  ctx.details     # =&gt; \"...NAME=Jim\\nFOO=BAR BAZ...\\n                       ^ line 2 offset 20\"\nend\n</code></pre>"},{"location":"Dotenv/Exceptions/Format/Context/#Athena::Dotenv::Exceptions::Format::Context-constructors","title":"Constructors","text":""},{"location":"Dotenv/Exceptions/Format/Context/#Athena::Dotenv::Exceptions::Format::Context.new(data,path,line_number,offset)","title":"<code>.new(data : String, path : ::Path | String, line_number : Int32, offset : Int32)</code>","text":"View source"},{"location":"Dotenv/Exceptions/Format/Context/#Athena::Dotenv::Exceptions::Format::Context-methods","title":"Methods","text":""},{"location":"Dotenv/Exceptions/Format/Context/#Athena::Dotenv::Exceptions::Format::Context#details","title":"<code>#details : String</code>","text":"<p>Returns a details string that includes the markup before/after the error, along with what line number and offset the error occurred at.</p> View source"},{"location":"Dotenv/Exceptions/Format/Context/#Athena::Dotenv::Exceptions::Format::Context#line_number","title":"<code>#line_number : Int32</code>","text":"<p>Returns the line number of the format error.</p> View source"},{"location":"Dotenv/Exceptions/Format/Context/#Athena::Dotenv::Exceptions::Format::Context#path","title":"<code>#path : String</code>","text":"<p>Returns the path to the improperly formatted <code>.env</code> file.</p> View source"},{"location":"Dotenv/Exceptions/Path/","title":"Path","text":""},{"location":"Dotenv/Exceptions/Path/#Athena::Dotenv::Exceptions::Path","title":"class <code>Athena::Dotenv::Exceptions::Path</code> inherits <code>RuntimeError</code>","text":"<p>Raised when a <code>.env</code> file is unable to be read, or non-existent.</p>"},{"location":"Dotenv/Exceptions/Path/#Athena::Dotenv::Exceptions::Path-constructors","title":"Constructors","text":""},{"location":"Dotenv/Exceptions/Path/#Athena::Dotenv::Exceptions::Path.new(path,cause)","title":"<code>.new(path : String | Path, cause : Exception | Nil = nil)</code>","text":"View source"},{"location":"EventDispatcher/","title":"EventDispatcher","text":""},{"location":"EventDispatcher/#Athena::EventDispatcher","title":"module <code>Athena::EventDispatcher</code>","text":""},{"location":"EventDispatcher/#Athena::EventDispatcher--introduction","title":"Introduction","text":"<p>Object-oriented code has helped a lot in ensuring code extensibility. By having classes with well defined responsibilities, it becomes more flexible and easily extendable to modify their behavior. However inheritance has its limits is not the best option when these modifications need to be shared between other modified subclasses. Say for example you want to do something before and after a method is executed, without interfering with the other plugins.</p> <p>The <code>Athena::EventDispatcher</code> component is a Mediator and Observer pattern event library. This pattern allows creating very flexibly and truly extensible applications.</p> <p>A good example of this is the architecture of Athena Framework itself. Once an <code>ATH::Response</code> has been created by a controller, it may be useful to allow additional modifications before it is actually returned to the client. Such modifications could include adding additional headers, paginating the data itself, or capturing performance metrics to name a few. To handle this, the framework itself makes use of <code>Athena::EventDispatcher</code> to dispatch an event that notifies all registered listeners on that event. From which, they could make any necessary modifications seamlessly without affecting the framework logic itself, or the other listeners.</p>"},{"location":"EventDispatcher/#Athena::EventDispatcher--usage","title":"Usage","text":"<pre><code># Create a custom event.\nclass ExceptionRaisedEvent &lt; AED::Event\n  property? handled : Bool = false\n\n  getter exception : Exception\n\n  # Events can contain stateful information related to the event.\n  def initialize(@exception : Exception); end\nend\n\ndispatcher = AED::EventDispatcher.new\n\n# Register a listener directly with the dispatcher\ndispatcher.listener ExceptionRaisedEvent do |event|\n  pp event.exception.message\nend\n\n# Or use a dedicated type for more complex use cases.\nclass ExceptionListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  # Multiple methods can be defined to handle multiple events within the same listener,\n  # and/or to share state via instance variables between listener methods on different events.\n  def on_exception(event : ExceptionRaisedEvent) : Nil\n    # Do something with the event`\n    event.handled = true\n  end\nend\n\ndispatcher.listener ExceptionListener.new\n\n# Instantiate our custom event.\nevent = ExceptionRaisedEvent.new ArgumentError.new(\"Test exception\")\n\ndispatcher.dispatch event\n# =&gt;\n#   \"Test exception\"\n\nevent.handled? # =&gt; true\n</code></pre>"},{"location":"EventDispatcher/#Athena::EventDispatcher--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Checkout the manual for some additional information on how to use it within the framework.</p> <p>If using it outside of the framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-event_dispatcher:\n    github: athena-framework/event-dispatcher\n    version: ~&gt; 0.2.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-event_dispatcher\"</code>.</p> <p>From here you will want to create your <code>AED::Event</code>s classes. You will then need a way to create/register the listeners with an <code>AED::EventDispatcherInterface</code>.</p> <p>The dispatcher should be created in a way that allows it to be used throughout the application such that any mutations that happen to the listeners are reflected on subsequent dispatches.</p> <p>Warning</p> <p>If using this component within the context of something that handles independent execution flows, such as a web framework, you will want there to be a dedicated dispatcher instance for each path. This ensures that one flow will not leak state to any other flow, while still allowing flow specific mutations to be used. Consider pairing this component with the Athena::DependencyInjection component as a way to handle this.</p> <p>Tip</p> <p>If using this component with the <code>Athena::DependencyInjection</code> component, <code>AED::EventListenerInterface</code> that have the <code>ADI::Register</code> annotation will automatically be registered with the default <code>AED::EventDispatcherInterface</code>.</p>"},{"location":"EventDispatcher/#Athena::EventDispatcher-constants","title":"Constants","text":""},{"location":"EventDispatcher/#Athena::EventDispatcher::VERSION","title":"<code>VERSION = \"0.2.3\"</code>","text":""},{"location":"EventDispatcher/aliases/","title":"Aliases","text":""},{"location":"EventDispatcher/aliases/#AED","title":"alias <code>AED</code>","text":"<p>Convenience alias to make referencing <code>Athena::EventDispatcher</code> types easier.</p> Alias definition <code>Athena::EventDispatcher</code>"},{"location":"EventDispatcher/aliases/#AEDA","title":"alias <code>AEDA</code>","text":"<p>Convenience alias to make referencing <code>AED::Annotations</code> types easier.</p> Alias definition <code>Athena::EventDispatcher::Annotations</code>"},{"location":"EventDispatcher/Annotations/","title":"Annotations","text":""},{"location":"EventDispatcher/Annotations/#Athena::EventDispatcher::Annotations","title":"module <code>Athena::EventDispatcher::Annotations</code>","text":"<p>Contains all the <code>Athena::EventDispatcher</code> based annotations.</p>"},{"location":"EventDispatcher/Annotations/AsEventListener/","title":"AsEventListener","text":""},{"location":"EventDispatcher/Annotations/AsEventListener/#Athena::EventDispatcher::Annotations::AsEventListener","title":"annotation <code>Athena::EventDispatcher::Annotations::AsEventListener</code>","text":"<p>Can be applied to method(s) within a type including <code>AED::EventListenerInterface</code> to denote that method is an event listener. The annotation expects to be assigned to an instance method with between 1 and 2 parameters with a return type of <code>Nil</code>. The first parameter should be the concrete <code>AED::Event</code> instance the method is listening on. The optional second parameter should be typed as an <code>AED::EventDispatcherInterface</code>.</p> <p>The annotation accepts an optional <code>priority</code> field, defaulting to <code>0</code>, denoting the listener's priority</p> <pre><code>class MyListener\n  include AED::EventListenerInterface\n\n  # Single parameter\n  @[AEDA::AsEventListener]\n  def single_param(event : MyEvent) : Nil\n  end\n\n  # Double parameter\n  @[AEDA::AsEventListener]\n  def double_param(event : MyEvent, dispatcher : AED::EventDispatcherInterface) : Nil\n  end\n\n  # With priority\n  @[AEDA::AsEventListener(priority: 10)]\n  def with_priority(event : MyEvent) : Nil\n  end\nend\n</code></pre>"},{"location":"EventDispatcher/Callable/","title":"Callable","text":""},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable","title":"abstract struct <code>Athena::EventDispatcher::Callable</code> inherits <code>Struct</code>","text":"<p>Encapsulates everything required to represent an event listener. Including what event is being listened on, the callback itself, and its priority.</p> <p>Each subclass represents a specific \"type\" of listener. See each subclass for more information.</p> <p>Tip</p> <p>These types can be manually instantiated and added via the related <code>AED::EventDispatcherInterface#listener(callable)</code> overload. This can be useful as a point of integration to other libraries, such as lazily instantiating a <code>AED::EventListenerInterface</code> instance.</p>"},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable--name","title":"Name","text":"<p>Each callable also has an optional name that can be useful for debugging to allow identifying a specific callable since there would be no way to tell apart two listeners on the same event, with the same priority.</p> <pre><code>class MyEvent &lt; AED::Event; end\n\ndispatcher = AED::EventDispatcher.new\n\ndispatcher.listener(MyEvent) { }\ndispatcher.listener(MyEvent, name: \"block-listener\") { }\n\nclass MyListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def on_my_event(event : MyEvent) : Nil\n  end\nend\n\ndispatcher.listener MyListener.new\n\ndispatcher.listeners(MyEvent).map &amp;.name # =&gt; [\"unknown callable\", \"block-listener\", \"MyListener#on_my_event\"]\n</code></pre> <p><code>AED::Callable::EventListenerInstance</code> instances registered via <code>AED::EventDispatcherInterface#listener(listener)</code> will automatically have a name including the method and listener class names in the format of <code>ClassName#method_name</code>.</p> Included modules <code>Comparable</code> Direct known subclasses <code>Athena::EventDispatcher::Callable::Event(E)</code> <code>Athena::EventDispatcher::Callable::EventDispatcher(E)</code> <code>Athena::EventDispatcher::Callable::EventListenerInstance(I, E)</code>"},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable-constructors","title":"Constructors","text":""},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable.new(event_class,name,priority)","title":"<code>.new(event_class : AED::Event.class, name : String | Nil, priority : Int32)</code>","text":"View source"},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable-methods","title":"Methods","text":""},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable#event_class","title":"<code>#event_class : AED::Event.class</code>","text":"<p>Returns what <code>AED::Event</code> class this callable represents.</p> View source"},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable#name","title":"<code>#name : String</code>","text":"<p>Returns the name of this callable. Useful for debugging to identify a specific callable added from a block, or which method an <code>AED::Callable::EventListenerInstance</code> is associated with.</p> View source"},{"location":"EventDispatcher/Callable/#Athena::EventDispatcher::Callable#priority","title":"<code>#priority : Int32</code>","text":"<p>Returns the listener priority of this callable.</p> View source"},{"location":"EventDispatcher/Callable/Event/","title":"Event","text":""},{"location":"EventDispatcher/Callable/Event/#Athena::EventDispatcher::Callable::Event","title":"struct <code>Athena::EventDispatcher::Callable::Event(E)</code> inherits <code>Athena::EventDispatcher::Callable</code>","text":"<p>Represents a listener that only accepts the <code>AED::Event</code> instance.</p>"},{"location":"EventDispatcher/Callable/Event/#Athena::EventDispatcher::Callable::Event-constructors","title":"Constructors","text":""},{"location":"EventDispatcher/Callable/Event/#Athena::EventDispatcher::Callable::Event.new(callback,priority,name,event_class)","title":"<code>.new(callback : E -&gt; Nil, priority : Int32 = 0, name : String | Nil = nil, event_class : E.class = E)</code>","text":"View source"},{"location":"EventDispatcher/Callable/EventDispatcher/","title":"EventDispatcher","text":""},{"location":"EventDispatcher/Callable/EventDispatcher/#Athena::EventDispatcher::Callable::EventDispatcher","title":"struct <code>Athena::EventDispatcher::Callable::EventDispatcher(E)</code> inherits <code>Athena::EventDispatcher::Callable</code>","text":"<p>Represents a listener that accepts both the <code>AED::Event</code> instance and the <code>AED::EventDispatcherInterface</code> instance. Such as when using AED::EventDispatcherInterface#listener(event_class,*,priority,&amp;), or the <code>AED::Event.callable</code> method.</p>"},{"location":"EventDispatcher/Callable/EventDispatcher/#Athena::EventDispatcher::Callable::EventDispatcher-constructors","title":"Constructors","text":""},{"location":"EventDispatcher/Callable/EventDispatcher/#Athena::EventDispatcher::Callable::EventDispatcher.new(callback,priority,name,event_class)","title":"<code>.new(callback : E, AED::EventDispatcherInterface -&gt; Nil, priority : Int32 = 0, name : String | Nil = nil, event_class : E.class = E)</code>","text":"View source"},{"location":"EventDispatcher/Callable/EventListenerInstance/","title":"EventListenerInstance","text":""},{"location":"EventDispatcher/Callable/EventListenerInstance/#Athena::EventDispatcher::Callable::EventListenerInstance","title":"struct <code>Athena::EventDispatcher::Callable::EventListenerInstance(I, E)</code> inherits <code>Athena::EventDispatcher::Callable</code>","text":"<p>Represents a listener associated with an <code>AED::EventListenerInterface</code> when using the <code>AEDA::AsEventListener</code> annotation.</p>"},{"location":"EventDispatcher/Callable/EventListenerInstance/#Athena::EventDispatcher::Callable::EventListenerInstance-constructors","title":"Constructors","text":""},{"location":"EventDispatcher/Callable/EventListenerInstance/#Athena::EventDispatcher::Callable::EventListenerInstance.new(callback,instance,priority,name,event_class)","title":"<code>.new(callback : Proc(E, Nil) | Proc(E, AED::EventDispatcherInterface, Nil), instance : I, priority : Int32 = 0, name : String | Nil = nil, event_class : E.class = E)</code>","text":"View source"},{"location":"EventDispatcher/Callable/EventListenerInstance/#Athena::EventDispatcher::Callable::EventListenerInstance-methods","title":"Methods","text":""},{"location":"EventDispatcher/Callable/EventListenerInstance/#Athena::EventDispatcher::Callable::EventListenerInstance#instance","title":"<code>#instance : I</code>","text":"<p>Returns the <code>AED::EventListenerInterface</code> instance this listener is associated with.</p> View source"},{"location":"EventDispatcher/Event/","title":"Event","text":""},{"location":"EventDispatcher/Event/#Athena::EventDispatcher::Event","title":"abstract class <code>Athena::EventDispatcher::Event</code> inherits <code>Reference</code>","text":"<p>An event consists of a subclass of this type, usually with extra context specific information. The metaclass of the event type is used as a unique identifier, which generally should end in a verb that indicates what action has been taken. The <code>AED::GenericEvent</code> type may be used for simple use cases, but dedicated event types are still considered a best practice.</p> <pre><code># Define a custom event\nclass ExceptionRaisedEvent &lt; AED::Event\n  getter exception : Exception\n\n  def initialize(@exception : Exception); end\nend\n\n# Dispatch a custom event\nexception = ArgumentError.new \"Value cannot be negative\"\ndispatcher.dispatch ExceptionRaisedEvent.new exception\n</code></pre> <p>Abstract event classes may also be used to share common data/methods between a group of related events. However they cannot be used as a catchall to listen on all events that extend it.</p>"},{"location":"EventDispatcher/Event/#Athena::EventDispatcher::Event--stopping-propagation","title":"Stopping Propagation","text":"<p>In some cases it may make sense for a listener to prevent any other listeners from being called for a specific event. In order to do this, the listener needs a way to tell the dispatcher that it should stop propagation, i.e. do not notify any more listeners. The base event type includes <code>AED::StoppableEvent</code> that enables this behavior. Checkout the related module for more information.</p>"},{"location":"EventDispatcher/Event/#Athena::EventDispatcher::Event--generics","title":"Generics","text":"<p>Events with generic type variables are also supported, the <code>AED::GenericEvent</code> event is an example of this. Listeners on events with generics are a bit unique in how they behave in that each unique instantiation is treated as its own event. For example:</p> <pre><code>class Foo; end\n\nsubject = Foo.new\n\ndispatcher.listener AED::GenericEvent(Foo, Int32) do |e|\n  e[\"counter\"] += 1\nend\n\ndispatcher.listener AED::GenericEvent(String, String) do |e|\n  e[\"class\"] = e.subject.upcase\nend\n\ndispatcher.dispatch AED::GenericEvent.new subject, data = {\"counter\" =&gt; 0}\n\ndata[\"counter\"] # =&gt; 1\n\ndispatcher.dispatch AED::GenericEvent.new \"foo\", data = {\"bar\" =&gt; \"baz\"}\n\ndata[\"class\"] # =&gt; \"FOO\"\n</code></pre> <p>Notice that the listeners are registered with the generic types included. This allows the component to treat <code>AED::GenericEvent(String, Int32)</code> differently than <code>AED::GenericEvent(String, String)</code>. The added benefit of this is that the listener is also aware of the type returned by the related methods, so no manual casting is required.</p> <p>Tip</p> <p>Use type aliases to give better names to commonly used generic types. <pre><code>alias UserCreatedEvent = AED::GenericEvent(User, String)\n</code></pre></p> Included modules <code>Athena::EventDispatcher::StoppableEvent</code> Direct known subclasses <code>Athena::EventDispatcher::GenericEvent(S, V)</code> <code>Athena::Framework::Events::Action</code> <code>Athena::Framework::Events::Exception</code> <code>Athena::Framework::Events::Request</code> <code>Athena::Framework::Events::Response</code> <code>Athena::Framework::Events::Terminate</code> <code>Athena::Framework::Events::View</code>"},{"location":"EventDispatcher/Event/#Athena::EventDispatcher::Event-class-methods","title":"Class methods","text":""},{"location":"EventDispatcher/Event/#Athena::EventDispatcher::Event.callable(*,priority,name,&)","title":"<code>.callable(*, priority : Int32 = 0, name : String | Nil = nil, &amp;block : self, AED::EventDispatcherInterface -&gt; Nil) : AED::Callable</code>","text":"<p>Returns an <code>AED::Callable</code> based on the event class the method was called on. Optionally allows customizing the priority and name of the listener.</p> <pre><code>class MyEvent &lt; AED::Event; end\n\ncallable = MyEvent.callable do |event, dispatcher|\n  # Do something with the event, and/or dispatcher\nend\n\ndispatcher.listener callable\n</code></pre> <p>Essentially the same as using AED::EventDispatcherInterface#listener(event_class,*,priority,&amp;), but removes the need to pass the event_class.</p> View source"},{"location":"EventDispatcher/EventDispatcher/","title":"EventDispatcher","text":""},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher","title":"class <code>Athena::EventDispatcher::EventDispatcher</code> inherits <code>Reference</code>","text":"<p>Default implementation of <code>AED::EventDispatcherInterface</code>.</p> Included modules <code>Athena::EventDispatcher::EventDispatcherInterface</code> Direct known subclasses <code>Athena::EventDispatcher::Spec::TracableEventDispatcher</code>"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher-methods","title":"Methods","text":""},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#dispatch(event)","title":"<code>#dispatch(event : AED::Event) : AED::Event</code>","text":"<p>Dispatches the provided event to all listeners listening on that event. Listeners are executed in priority order, highest first.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#has_listeners?(event_class)","title":"<code>#has_listeners?(event_class : AED::Event.class) : Bool</code>","text":"<p>Returns <code>true</code> if this dispatcher has any listeners on the provided event_class.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#has_listeners?","title":"<code>#has_listeners? : Bool</code>","text":"<p>Returns <code>true</code> if there are any listeners on any event.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#listener(callable)","title":"<code>#listener(callable : AED::Callable) : AED::Callable</code>","text":"<p>Registers the provided callable listener to this dispatcher.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#listener(listener)","title":"<code>#listener(listener : AED::EventListenerInterface) : Nil</code>","text":"<p>Registers the provided listener instance to this dispatcher.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#listener(callable,*,priority)","title":"<code>#listener(callable : AED::Callable, *, priority : Int32) : AED::Callable</code>","text":"<p>Registers the provided callable listener to this dispatcher, overriding its priority with that of the provided priority.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#listener(event_class,*,priority,name,&)","title":"<code>#listener(event_class : E.class, *, priority : Int32 = 0, name : String | Nil = nil, &amp;block : E, AED::EventDispatcherInterface -&gt; Nil) : AED::Callable forall E</code>","text":"<p>Registers the block as an <code>AED::Callable</code> on the provided event_class, optionally with the provided priority and/or name.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#listeners(for)","title":"<code>#listeners(for event_class : AED::Event.class) : Array(AED::Callable)</code>","text":"<p>Returns an <code>Array(AED::Callable)</code> for all listeners on the provided event_class.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#listeners","title":"<code>#listeners : Hash(AED::Event.class, Array(AED::Callable))</code>","text":"<p>Returns a hash of all registered listeners as a <code>Hash(AED::Event.class, Array(AED::Callable))</code>.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#remove_listener(callable)","title":"<code>#remove_listener(callable : AED::Callable) : Nil</code>","text":"<p>Deregisters the provided callable from this dispatcher.</p> <p>Tip</p> <p>The callable may be one retrieved via either <code>#listeners</code> method.</p> View source"},{"location":"EventDispatcher/EventDispatcher/#Athena::EventDispatcher::EventDispatcher#remove_listener(listener)","title":"<code>#remove_listener(listener : AED::EventListenerInterface) : Nil</code>","text":"<p>Deregisters listeners based on the provided listener from this dispatcher.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/","title":"EventDispatcherInterface","text":""},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface","title":"module <code>Athena::EventDispatcher::EventDispatcherInterface</code>","text":"<p>An event dispatcher is the primary type of <code>Athena::EventDispatcher</code>. It maintains a registry of listeners, with events also being dispatched via this type. When dispatched, the dispatcher notifies all listeners registered with that event.</p>"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface--usage","title":"Usage","text":"<p>Listeners can be added in a few ways, with the simplest being registering a block directly on the dispatcher instance.</p> <pre><code>class MyEvent &lt; AED::Event; end\n\ndispatcher.listener MyEvent do |event, dispatcher|\n  # Do something with the event, and/or dispatcher\nend\n</code></pre> <p>Another way involves passing an <code>AED::Callable</code> instance, created manually or via the <code>AED::Event.callable</code> method. Lastly, an <code>AED::EventListenerInterface</code> instance may also be passed.</p> <p>Once all listeners are registered, you can begin to dispatch events. Dispatching an event is simply calling the <code>#dispatch</code> method with an <code>AED::Event</code> subclass instance as an argument.</p>"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface--listener-priority","title":"Listener Priority","text":"<p>As you may have noticed, each way of registering a listener has an optional priority parameter. This value can be a positive or negative integer, with a default of <code>0</code> that controls the order in which each listener is executed. The higher the value, the sooner that listener would be executed. If two listeners have the same priority, they are executed in the order in which they were registered with the dispatcher.</p> <pre><code>class MyEvent &lt; AED::Event; end\n\ndispatcher = AED::EventDispatcher.new\ndispatcher.listener(MyEvent, priority: -10) { pp \"callback1\" }\ndispatcher.listener(MyEvent, priority: 10) { pp \"callback2\" }\ndispatcher.listener(MyEvent) { pp \"callback3\" }\ndispatcher.listener(MyEvent, priority: 20) { pp \"callback4\" }\ndispatcher.listener(MyEvent) { pp \"callback5\" }\n\ndispatcher.dispatch MyEvent.new\n# =&gt;\n#   \"callback4\"\n#   \"callback2\"\n#   \"callback3\"\n#   \"callback5\"\n#   \"callback1\"\n</code></pre> <p>Note</p> <p>While the priority can be any <code>Int32</code>, best practices suggest keeping it in the <code>-255..255</code> range.</p> Direct including types <code>Athena::EventDispatcher::EventDispatcher</code>"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface-methods","title":"Methods","text":""},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#dispatch(event)","title":"abstract <code>#dispatch(event : AED::Event) : AED::Event</code>","text":"<p>Dispatches the provided event to all listeners listening on that event. Listeners are executed in priority order, highest first.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#has_listeners?(event_class)","title":"abstract <code>#has_listeners?(event_class : AED::Event.class) : Bool</code>","text":"<p>Returns <code>true</code> if this dispatcher has any listeners on the provided event_class.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#has_listeners?","title":"abstract <code>#has_listeners? : Bool</code>","text":"<p>Returns <code>true</code> if there are any listeners on any event.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#listener(callable)","title":"abstract <code>#listener(callable : AED::Callable) : AED::Callable</code>","text":"<p>Registers the provided callable listener to this dispatcher.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#listener(listener)","title":"abstract <code>#listener(listener : AED::EventListenerInterface) : Nil</code>","text":"<p>Registers the provided listener instance to this dispatcher.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#listener(callable,*,priority)","title":"abstract <code>#listener(callable : AED::Callable, *, priority : Int32) : AED::Callable</code>","text":"<p>Registers the provided callable listener to this dispatcher, overriding its priority with that of the provided priority.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#listener(event_class,*,priority,name,&)","title":"abstract <code>#listener(event_class : E.class, *, priority : Int32 = 0, name : String | Nil = nil, &amp;block : E, AED::EventDispatcherInterface -&gt; Nil) : AED::Callable forall E</code>","text":"<p>Registers the block as an <code>AED::Callable</code> on the provided event_class, optionally with the provided priority and/or name.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#listeners(for)","title":"abstract <code>#listeners(for event_class : AED::Event.class) : Array(AED::Callable)</code>","text":"<p>Returns an <code>Array(AED::Callable)</code> for all listeners on the provided event_class.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#listeners","title":"abstract <code>#listeners : Hash(AED::Event.class, Array(AED::Callable))</code>","text":"<p>Returns a hash of all registered listeners as a <code>Hash(AED::Event.class, Array(AED::Callable))</code>.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#remove_listener(callable)","title":"abstract <code>#remove_listener(callable : AED::Callable) : Nil</code>","text":"<p>Deregisters the provided callable from this dispatcher.</p> <p>Tip</p> <p>The callable may be one retrieved via either <code>#listeners</code> method.</p> View source"},{"location":"EventDispatcher/EventDispatcherInterface/#Athena::EventDispatcher::EventDispatcherInterface#remove_listener(listener)","title":"abstract <code>#remove_listener(listener : AED::EventListenerInterface) : Nil</code>","text":"<p>Deregisters listeners based on the provided listener from this dispatcher.</p> View source"},{"location":"EventDispatcher/EventListenerInterface/","title":"EventListenerInterface","text":""},{"location":"EventDispatcher/EventListenerInterface/#Athena::EventDispatcher::EventListenerInterface","title":"module <code>Athena::EventDispatcher::EventListenerInterface</code>","text":"<p>Marks a type as an event listener. See <code>AEDA::AsEventListener</code> for more information.</p> Direct including types <code>Athena::Framework::Listeners::CORS</code> <code>Athena::Framework::Listeners::Error</code> <code>Athena::Framework::Listeners::Format</code> <code>Athena::Framework::Listeners::ParamFetcher</code> <code>Athena::Framework::Listeners::Routing</code> <code>Athena::Framework::Listeners::View</code>"},{"location":"EventDispatcher/GenericEvent/","title":"GenericEvent","text":""},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent","title":"class <code>Athena::EventDispatcher::GenericEvent(S, V)</code> inherits <code>Athena::EventDispatcher::Event</code>","text":"<p>An extension of <code>AED::Event</code> that provides a generic event type that can be used in place of dedicated event types. Allows using various instantiations of this one event type to handle multiple events.</p> <p>Info</p> <p>This type is provided for convenience for use within simple use cases. Dedicated event types are still considered a best practice.</p>"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent--usage","title":"Usage","text":"<p>A generic event consists of a <code>#subject</code> of type <code>S</code>, which is some object/value representing an event that has occurred. <code>#arguments</code> of type <code>V</code> may also be provided to augment the event with additional context, which is modeled as a <code>Hash(String, V)</code>.</p> <pre><code>dispatcher.dispatch(\n  AED::GenericEvent(MyClass, Int32 | String).new(\n    my_class_instance,\n    {\"counter\" =&gt; 0, \"data\" =&gt; \"bar\"}\n  )\n)\n</code></pre> <p>Refer to AED::Event for examples of how listeners on events with generics behave.</p> <p>Todo</p> <p>Make this include <code>Mappable</code> when/if https://github.com/crystal-lang/crystal/issues/10886 is implemented.</p>"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent-constructors","title":"Constructors","text":""},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent.new(subject,arguments)","title":"<code>.new(subject : S, arguments : Hash(String, V))</code>","text":"View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent.new(subject)","title":"<code>.new(subject : S)</code>","text":"View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent-methods","title":"Methods","text":""},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent#[](key)","title":"<code>#[](key : String) : V</code>","text":"<p>Returns the argument with the provided key, raising if it does not exist.</p> View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent#[]=(key,value)","title":"<code>#[]=(key : String, value : V) : Nil</code>","text":"<p>Sets the argument with the provided key to the provided value.</p> View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent#[]?(key)","title":"<code>#[]?(key : String) : V | Nil</code>","text":"<p>Returns the argument with the provided key, or <code>nil</code> if it does not exist.</p> View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent#arguments","title":"<code>#arguments : Hash(String, V)</code>","text":"<p>Returns the extra information stored with this event.</p> View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent#arguments=(arguments)","title":"<code>#arguments=(arguments : Hash(String, V))</code>","text":"<p>Sets the extra information that should be stored with this event.</p> View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent#has_key?(key)","title":"<code>#has_key?(key : String) : Bool</code>","text":"<p>Returns <code>true</code> if there is an argument with the provided key, otherwise <code>false</code>.</p> View source"},{"location":"EventDispatcher/GenericEvent/#Athena::EventDispatcher::GenericEvent#subject","title":"<code>#subject : S</code>","text":"<p>Returns the subject of this event.</p> View source"},{"location":"EventDispatcher/Spec/","title":"Spec","text":""},{"location":"EventDispatcher/Spec/#Athena::EventDispatcher::Spec","title":"module <code>Athena::EventDispatcher::Spec</code>","text":"<p>A set of testing utilities/types to aid in testing <code>Athena::EventDispatcher</code> related types.</p>"},{"location":"EventDispatcher/Spec/#Athena::EventDispatcher::Spec--getting-started","title":"Getting Started","text":"<p>Require this module in your <code>spec_helper.cr</code> file.</p> <pre><code># This also requires \"spec\".\nrequire \"athena-event_dispatcher/spec\"\n</code></pre>"},{"location":"EventDispatcher/Spec/TracableEventDispatcher/","title":"TracableEventDispatcher","text":""},{"location":"EventDispatcher/Spec/TracableEventDispatcher/#Athena::EventDispatcher::Spec::TracableEventDispatcher","title":"class <code>Athena::EventDispatcher::Spec::TracableEventDispatcher</code> inherits <code>Athena::EventDispatcher::EventDispatcher</code>","text":"<p>Test implementation of <code>AED::EventDispatcherInterface</code> that keeps track of the events that were dispatched.</p> <pre><code>class MyEvent &lt; AED::Event; end\n\nclass OtherEvent &lt; AED::Event; end\n\ndispatcher = AED::Spec::TracableEventDispatcher.new\n\ndispatcher.dispatch MyEvent.new\ndispatcher.dispatch OtherEvent.new\n\ndispatcher.emitted_events # =&gt; [MyEvent, OtherEvent]\n</code></pre>"},{"location":"EventDispatcher/Spec/TracableEventDispatcher/#Athena::EventDispatcher::Spec::TracableEventDispatcher-methods","title":"Methods","text":""},{"location":"EventDispatcher/Spec/TracableEventDispatcher/#Athena::EventDispatcher::Spec::TracableEventDispatcher#dispatch(event)","title":"<code>#dispatch(event : AED::Event) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"EventDispatcher/Spec/TracableEventDispatcher/#Athena::EventDispatcher::Spec::TracableEventDispatcher#emitted_events","title":"<code>#emitted_events : Array(AED::Event.class)</code>","text":"<p>Returns an array of each <code>AED::Event.class</code> that was dispatched via this dispatcher.</p> View source"},{"location":"EventDispatcher/StoppableEvent/","title":"StoppableEvent","text":""},{"location":"EventDispatcher/StoppableEvent/#Athena::EventDispatcher::StoppableEvent","title":"module <code>Athena::EventDispatcher::StoppableEvent</code>","text":"<p>An <code>AED::Event</code> whose processing may be interrupted when the event has been handled.</p> <p><code>AED::EventDispatcherInterface</code> implementations MUST check to determine if an <code>AED::Event</code> is marked as stopped after each listener is called. If it is, then the dispatcher should return immediately without calling any further listeners.</p> <pre><code>class MyEvent &lt; AED::Event; end\n\ndispatcher = AED::EventDispatcher.new\n\ndispatcher.listener(MyEvent) { pp \"callback1\" }\ndispatcher.listener(MyEvent) { |e| pp \"callback2\"; e.stop_propagation }\ndispatcher.listener(MyEvent) { pp \"callback3\" }\n\ndispatcher.dispatch MyEvent.new\n# =&gt;\n#   \"callback1\"\n#   \"callback2\"\n</code></pre> Direct including types <code>Athena::EventDispatcher::Event</code>"},{"location":"EventDispatcher/StoppableEvent/#Athena::EventDispatcher::StoppableEvent-methods","title":"Methods","text":""},{"location":"EventDispatcher/StoppableEvent/#Athena::EventDispatcher::StoppableEvent#propagate?","title":"<code>#propagate? : Bool</code>","text":"<p>If future listeners should be executed.</p> View source"},{"location":"EventDispatcher/StoppableEvent/#Athena::EventDispatcher::StoppableEvent#stop_propagation","title":"<code>#stop_propagation : Nil</code>","text":"<p>Prevent future listeners from executing once any listener calls <code>#stop_propagation</code>.</p> View source"},{"location":"Framework/","title":"Framework","text":""},{"location":"Framework/#Athena::Framework","title":"module <code>Athena::Framework</code>","text":"<p>See the external documentation for an introduction to <code>Athena</code>.</p> <p>Also checkout the Architecture page for an overview of how the Athena Framework is designed.</p>"},{"location":"Framework/#Athena::Framework-constants","title":"Constants","text":""},{"location":"Framework/#Athena::Framework::Log","title":"<code>Log = ::Log.for(\"athena.framework\")</code>","text":""},{"location":"Framework/#Athena::Framework::VERSION","title":"<code>VERSION = \"0.18.2\"</code>","text":""},{"location":"Framework/#Athena::Framework-class-methods","title":"Class methods","text":""},{"location":"Framework/#Athena::Framework.run(port,host,reuse_port,ssl_context,*,prepend_handlers)","title":"<code>.run(port : Int32 = 3000, host : String = \"0.0.0.0\", reuse_port : Bool = false, ssl_context : OpenSSL::SSL::Context::Server | Nil = nil, *, prepend_handlers : Array(HTTP::Handler) = [] of HTTP::Handler) : Nil</code>","text":"<p>Runs an <code>HTTP::Server</code> listening on the given port and host.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  def root : String\n    \"At the index\"\n  end\nend\n\nATH.run\n</code></pre> <p>prepend_handlers can be used to execute an array of <code>HTTP::Handler</code> before Athena takes over. This can be useful to provide backwards compatibility with existing handlers until they can ported to Athena concepts, or for supporting things Athena does not support, such as WebSockets.</p> <p>See <code>ATH::Controller</code> for more information on defining controllers/route actions.</p> View source"},{"location":"Framework/aliases/","title":"Aliases","text":""},{"location":"Framework/aliases/#ATH","title":"alias <code>ATH</code>","text":"<p>Convenience alias to make referencing <code>Athena::Framework</code> types easier.</p> Alias definition <code>Athena::Framework</code>"},{"location":"Framework/aliases/#ATHA","title":"alias <code>ATHA</code>","text":"<p>Convenience alias to make referencing <code>Athena::Framework::Annotations</code> types easier.</p> Alias definition <code>Athena::Framework::Annotations</code>"},{"location":"Framework/aliases/#ATHR","title":"alias <code>ATHR</code>","text":"<p>Convenience alias to make referencing <code>ATH::Controller::ValueResolvers</code> types easier.</p> Alias definition <code>Athena::Framework::Controller::ValueResolvers</code>"},{"location":"Framework/Action/","title":"Action","text":""},{"location":"Framework/Action/#Athena::Framework::Action","title":"struct <code>Athena::Framework::Action(Controller, ReturnType, ParameterTypeTuple, ParametersType)</code> inherits <code>Athena::Framework::ActionBase</code>","text":"<p>Represents a controller action that will handle a request.</p> <p>Includes metadata about the endpoint, such as its controller, action parameters and return type, and the action that should be executed.</p>"},{"location":"Framework/Action/#Athena::Framework::Action-constructors","title":"Constructors","text":""},{"location":"Framework/Action/#Athena::Framework::Action.new(action,parameters,annotation_configurations,params,_controller,_return_type)","title":"<code>.new(action : Proc(ParameterTypeTuple, ReturnType), parameters : ParametersType, annotation_configurations : ACF::AnnotationConfigurations, params : Array(ATH::Params::ParamInterface), _controller : Controller.class, _return_type : ReturnType.class)</code>","text":"View source"},{"location":"Framework/Action/#Athena::Framework::Action-methods","title":"Methods","text":""},{"location":"Framework/Action/#Athena::Framework::Action#annotation_configurations","title":"<code>#annotation_configurations : ACF::AnnotationConfigurations</code>","text":"<p>Returns annotation configurations registered via <code>Athena::Config.configuration_annotation</code> and applied to this action.</p> <p>These configurations could then be accessed within <code>ATHR::Interface</code>s and/or <code>ATH::Listeners</code>s.</p> View source"},{"location":"Framework/Action/#Athena::Framework::Action#controller","title":"<code>#controller : Controller.class</code>","text":"<p>Returns the <code>ATH::Controller</code> that this action is a part of.</p> View source"},{"location":"Framework/Action/#Athena::Framework::Action#execute(arguments)","title":"<code>#execute(arguments : Array) : ReturnType</code>","text":"<p>Executes this action with the provided arguments array.</p> View source"},{"location":"Framework/Action/#Athena::Framework::Action#parameters","title":"<code>#parameters : ParametersType</code>","text":"<p>Returns a tuple of <code>ATH::Controller::ParameterMetadata</code> representing the parameters this action expects.</p> View source"},{"location":"Framework/Action/#Athena::Framework::Action#params","title":"<code>#params : Array(ATH::Params::ParamInterface)</code>","text":"View source"},{"location":"Framework/Action/#Athena::Framework::Action#return_type","title":"<code>#return_type : ReturnType.class</code>","text":"<p>Returns the type that this action returns.</p> View source"},{"location":"Framework/ActionBase/","title":"ActionBase","text":""},{"location":"Framework/ActionBase/#Athena::Framework::ActionBase","title":"abstract struct <code>Athena::Framework::ActionBase</code> inherits <code>Struct</code>","text":"<p>Parent type of a controller action just used for typing.</p> <p>See <code>ATH::Action</code>.</p> Direct known subclasses <code>Athena::Framework::Action(Controller, ReturnType, ParameterTypeTuple, ParametersType)</code>"},{"location":"Framework/ActionBase/#Athena::Framework::ActionBase-constructors","title":"Constructors","text":""},{"location":"Framework/ActionBase/#Athena::Framework::ActionBase.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/ActionBase/#Athena::Framework::ActionBase-methods","title":"Methods","text":""},{"location":"Framework/ActionBase/#Athena::Framework::ActionBase#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Annotations/","title":"Annotations","text":""},{"location":"Framework/Annotations/#Athena::Framework::Annotations","title":"module <code>Athena::Framework::Annotations</code>","text":"<p>Contains all the <code>Athena::Framework</code> based annotations. See each annotation for more information.</p>"},{"location":"Framework/Annotations/QueryParam/","title":"QueryParam","text":""},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam","title":"annotation <code>Athena::Framework::Annotations::QueryParam</code>","text":"<p>Used to define (and configure) a query parameter tied to a given parameter.</p> <p>The type of the query param is derived from the type restriction of the associated controller action parameter.</p>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--usage","title":"Usage","text":"<p>The most basic usage is adding an annotation to a controller action whose name matches a controller action parameter. A <code>description</code> may also be included to describe what the query param is used for. In the future this may be used for generating OpenAPI documentation for the related parameter.</p> <p>A non-nilable type denotes it as required. If the parameter is not supplied, and no default value is assigned, an <code>ATH::Exceptions::UnprocessableEntity</code> exception is raised.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"page\", description: \"What page of results to return.\")] # The name can also be supplied as a named parameter like `@[ATHA::QueryParam(name: \"page\")]`.\n  def index(page : Int32) : Int32\n    page\n  end\nend\n\nATH.run\n\n# GET /?page=2 # =&gt; 2\n# GET / # =&gt;\n# {\n#   \"code\":    422,\n#   \"message\": \"Parameter 'page' is invalid.\",\n#   \"errors\":  [\n#     {\n#       \"property\": \"page\",\n#       \"message\":  \"This value should not be null.\",\n#       \"code\":     \"c7e77b14-744e-44c0-aa7e-391c69cc335c\"\n#     }\n#   ]\n# }\n</code></pre>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--key","title":"Key","text":"<p>In the case of wanting the controller action parameter to have a different name than the actual query parameter, the <code>key</code> option can be used.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"foo\", key: \"bar\")]\n  def index(foo : String) : String\n    foo\n  end\nend\n\nATH.run\n\n# GET /?bar=value # =&gt; \"value\"\n</code></pre>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--optional","title":"Optional","text":"<p>A nilable type denotes it as optional. If the parameter is not supplied, and no default value is assigned, it is <code>nil</code>.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"page\")] # The name can also be supplied as a named argument like `@[ATHA::QueryParam(name: \"page\")]`.\n  def index(page : Int32?) : Int32?\n    page\n  end\nend\n\nATH.run\n\n# GET /          # =&gt; null\n# GET /?page=2   # =&gt; 2\n# GET /?page=bar # =&gt;\n# {\n#   \"code\":    400,\n#   \"message\":\"Required parameter 'page' with value 'bar' could not be converted into a valid '(Int32 | Nil)'.\"\n# }\n</code></pre>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--strict","title":"Strict","text":"<p>By default, parameters are validated strictly; this means an <code>ATH::Exceptions::BadRequest</code> exception is raised when the value is considered invalid. Such as if the value does not satisfy the parameter's requirements, it's a required parameter and was not provided, or could not be converted into the desired type.</p> <p>An example of this is in the first usage example. A 400 bad request was returned when the required parameter was not provided.</p> <p>When strict mode is disabled, the default value (or <code>nil</code>) will be used instead of raising an exception if the actual value is invalid.</p> <p>Note</p> <p>When setting <code>strict: false</code>, the related controller action parameter must be nilable or have a default value.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"page\", strict: false)]\n  def index(page : Int32?) : Int32?\n    page\n  end\nend\n\nATH.run\n\n# GET /          # =&gt; null\n# GET /?page=2   # =&gt; 2\n# GET /?page=bar # =&gt; null\n</code></pre> <p>If strict mode is enabled AND the parameter is nilable, the value will only be checked strictly if it is provided and does not meet the parameter's requirements, or could not be converted. If it was not provided at all, <code>nil</code>, or the default value will be used.</p>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--requirements","title":"Requirements","text":"<p>It's a common practice to validate incoming values before they reach the controller action. <code>ATHA::QueryParam</code> supports doing just that. It supports validating the value against a <code>Regex</code> pattern, an <code>AVD::Constraint</code>, or an array of <code>AVD::Constraint</code>s.</p> <p>The value is only considered valid if it satisfies the defined requirements. If the value does not match, and strict mode is enabled, a 422 response is returned; otherwise <code>nil</code>, or the default value is used instead.</p>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--regex","title":"Regex","text":"<p>The most basic form of validation is a <code>Regex</code> pattern that asserts a value matches the provided pattern.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"page\", requirements: /\\d{2}/)]\n  def index(page : Int32) : Int32\n    page\n  end\nend\n\nATH.run\n\n# GET /?page=10  # =&gt; 10\n# GET /?page=bar # =&gt; {\"code\":400,}\n\n# GET /?page=bar # =&gt;\n# {\n#   \"code\":    400,\n#   \"message\":\"Required parameter 'page' with value 'bar' could not be converted into a valid 'Int32'.\"\n# }\n\n# GET / # =&gt;\n# {\n#   \"code\":    422,\n#   \"message\": \"Parameter 'page' is invalid.\",\n#   \"errors\":  [\n#     {\n#       \"property\": \"page\",\n#       \"message\":  \"This value should not be null.\",\n#       \"code\":     \"c7e77b14-744e-44c0-aa7e-391c69cc335c\"\n#     }\n#   ]\n# }\n\n# GET /?page=5 # =&gt;\n# {\n#   \"code\":    422,\n#   \"message\": \"Parameter 'page' is invalid.\",\n#   \"errors\":  [\n#     {\n#       \"property\": \"page\",\n#       \"message\":  \"Parameter 'page' value does not match requirements: (?-imsx:^(?-imsx:\\\\d{2})$)\",\n#       \"code\":     \"108987a0-2d81-44a0-b8d4-1c7ab8815343\"\n#     }\n#   ]\n# }\n</code></pre>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--constraints","title":"Constraint(s)","text":"<p>In some cases validating a value may require more logic than is possible via a regular expression. A parameter's requirements can also be set to a specific, or array of, <code>Assert</code> <code>AVD::Constraint</code> annotations.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"page\", requirements: @[Assert::PositiveOrZero])]\n  def index(page : Int32) : Int32\n    page\n  end\nend\n\nATH.run\n\n# GET /?page=2  # =&gt; 2\n# GET /?page=-5 # =&gt;\n# {\n#   \"code\":    422,\n#   \"message\": \"Parameter 'page' is invalid.\",\n#   \"errors\":  [\n#     {\n#       \"property\": \"page\",\n#       \"message\": \"This value should be positive or zero.\",\n#       \"code\": \"e09e52d0-b549-4ba1-8b4e-420aad76f0de\"\n#     }\n#   ]\n# }\n</code></pre> <p>See the external documentation for more information.</p>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--map","title":"Map","text":"<p>By default, the parameter's requirements are applied against the resulting value, which makes sense when working with scalar values. However, if the parameter is an <code>Array</code> of values, then it may make more sense to run the validations against each item in that array, as opposed to on the whole array itself.</p> <p>This behavior can be enabled by using the <code>map: true</code> option, which essentially wraps all the requirements within an <code>AVD::Constraints::All</code> constraint.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"ids\", map: true, requirements: [@[Assert::Positive], @[Assert::Range(-3..10)]])]\n  def index(ids : Array(Int32)) : Array(Int32)\n    ids\n  end\nend\n\nATH.run\n\n# GET /?ids=10&amp;ids=2  # =&gt; [10,2]\n# GET / # =&gt;\n# {\n#   \"code\":    422,\n#   \"message\": \"Parameter 'ids' is invalid.\",\n#   \"errors\":  [\n#     {\n#       \"property\": \"ids\",\n#       \"message\":  \"This value should not be null.\",\n#       \"code\":     \"c7e77b14-744e-44c0-aa7e-391c69cc335c\"\n#     }\n#   ]\n# }\n\n# GET /?ids=10&amp;ids=-2 # =&gt;\n# {\n#   \"code\":    422,\n#   \"message\": \"Parameter 'ids' is invalid.\",\n#   \"errors\":  [\n#     {\n#       \"property\": \"ids[1]\",\n#       \"message\":  \"message\": \"This value should be positive.\",\n#       \"code\":     \"code\": \"a221096d-d125-44e8-a865-4270379ac11a\"\n#     }\n#   ]\n# }\n</code></pre>"},{"location":"Framework/Annotations/QueryParam/#Athena::Framework::Annotations::QueryParam--incompatibles","title":"Incompatibles","text":"<p>Incompatibles represent the parameters that can't be present at the same time.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"bar\")]\n  @[ATHA::QueryParam(\"foo\", incompatibles: [\"bar\"])]\n  def index(foo : String?, bar : String?) : String\n    \"#{foo}-#{bar}\"\n  end\nend\n\nATH.run\n\n# GET /?bar=bar         # =&gt; \"-bar\"\n# GET /?foo=foo         # =&gt; \"foo-\"\n# GET /?foo=foo&amp;bar=bar # =&gt;\n# {\n#   \"code\":    400,\n#   \"message\":\"Parameter 'foo' is incompatible with parameter 'bar'.\"\n# }\n</code></pre>"},{"location":"Framework/Annotations/RequestParam/","title":"RequestParam","text":""},{"location":"Framework/Annotations/RequestParam/#Athena::Framework::Annotations::RequestParam","title":"annotation <code>Athena::Framework::Annotations::RequestParam</code>","text":"<p>Represents a form data request parameter.</p> <p>See <code>ATHA::QueryParam</code> for configuration options/arguments.</p> <p>Warning</p> <p>The entire request body is consumed to parse the form data.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Post(path: \"/login\")]\n  @[ATHA::RequestParam(\"username\")]\n  @[ATHA::RequestParam(\"password\")]\n  def login(username : String, password : String) : Nil\n    # ...\n  end\nend\n\nATH.run\n\n# POST /login, body: \"username=George&amp;password=abc123\"\n</code></pre>"},{"location":"Framework/Annotations/View/","title":"View","text":""},{"location":"Framework/Annotations/View/#Athena::Framework::Annotations::View","title":"annotation <code>Athena::Framework::Annotations::View</code>","text":"<p>Configures how the <code>ATH::View::ViewHandlerInterface</code> should render the related controller action.</p>"},{"location":"Framework/Annotations/View/#Athena::Framework::Annotations::View--fields","title":"Fields","text":"<ul> <li>status : <code>HTTP::Status</code> - The <code>HTTP::Status</code> the endpoint should return. Defaults to <code>HTTP::Status::OK</code> (200).</li> <li>serialization_groups : <code>Array(String)?</code> - The serialization groups to use for this route as part of <code>ASR::ExclusionStrategies::Groups</code>.</li> <li>validation_groups : <code>Array(String)?</code> - Groups that should be used to validate any objects related to this route; see <code>AVD::Constraint@validation-groups</code>.</li> <li>emit_nil : <code>Bool</code> - If <code>nil</code> values should be serialized. Defaults to <code>false</code>.</li> </ul>"},{"location":"Framework/Annotations/View/#Athena::Framework::Annotations::View--example","title":"Example","text":"<pre><code>@[ARTA::Post(path: \"/publish/{id}\")]\n@[ATHA::View(status: :accepted, serialization_groups: [\"default\", \"detailed\"])]\ndef publish(id : Int32) : Article\n  article = Article.find id\n  article.published = true\n  article\nend\n</code></pre> <p>See the external documentation for more information.</p>"},{"location":"Framework/BinaryFileResponse/","title":"BinaryFileResponse","text":""},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse","title":"class <code>Athena::Framework::BinaryFileResponse</code> inherits <code>Athena::Framework::Response</code>","text":"<p>Represents a static file that should be returned the client; includes various options to enhance the response headers. See <code>.new</code> for details.</p> <p>This response supports Range requests and Conditional requests via the If-None-Match, If-Modified-Since, and If-Range headers.</p> <p>See <code>ATH::HeaderUtils.make_disposition</code> for an example of handling dynamic files.</p>"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse-constructors","title":"Constructors","text":""},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse.new(file_path,status,headers,public,content_disposition,auto_etag,auto_last_modified)","title":"<code>.new(file_path : String | Path, status : HTTP::Status | Int32 = HTTP::Status::OK, headers : HTTP::Headers | ATH::Response::Headers = ATH::Response::Headers.new, public : Bool = true, content_disposition : ATH::BinaryFileResponse::ContentDisposition | Nil = nil, auto_etag : Bool = false, auto_last_modified : Bool = true)</code>","text":"<p>Instantiates <code>self</code> wrapping the file at the provided file_path, optionally with the provided status, and headers.</p> <p>By default the response is <code>ATH::Response#set_public</code> and includes a <code>last-modified</code> header, but these can be controlled via the public and auto_last_modified arguments respectively.</p> <p>The content_disposition argument can be used to set the <code>content-disposition</code> header on <code>self</code> if it should be downloadable.</p> <p>The auto_etag argument can be used to automatically set <code>ETag</code> header based on a <code>SHA256</code> hash of the file.</p> View source"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse-methods","title":"Methods","text":""},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse#auto_last_modified","title":"<code>#auto_last_modified : Nil</code>","text":"<p>Sets the <code>last-modified</code> header on <code>self</code> based on the modification time of the file.</p> View source"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse#content","title":"<code>#content : String</code>","text":"<p>Caution</p> <p>Cannot get the response content via this method on <code>self</code>.</p> View source"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse#content=(data)","title":"<code>#content=(data) : Nil</code>","text":"<p>Caution</p> <p>Cannot set the response content via this method on <code>self</code>.</p> View source"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse#delete_file_after_send=(delete_file_after_send)","title":"<code>#delete_file_after_send=(delete_file_after_send : Bool)</code>","text":"<p>Determines if the file should be deleted after being sent to the client.</p> View source"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse#file_path","title":"<code>#file_path : Path</code>","text":"<p>Returns a <code>Path</code> instance representing the file that will be sent to the client.</p> View source"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse#set_auto_etag","title":"<code>#set_auto_etag : Nil</code>","text":"<p>Sets the <code>etag</code> header on <code>self</code> based on a <code>SHA256</code> hash of the file.</p> View source"},{"location":"Framework/BinaryFileResponse/#Athena::Framework::BinaryFileResponse#set_content_disposition(disposition,filename,fallback_filename)","title":"<code>#set_content_disposition(disposition : ATH::BinaryFileResponse::ContentDisposition, filename : String | Nil = nil, fallback_filename : String | Nil = nil)</code>","text":"<p>Sets the <code>content-disposition</code> header on <code>self</code> to the provided disposition. filename defaults to the basename of <code>#file_path</code>.</p> <p>See <code>ATH::HeaderUtils.make_disposition</code>.</p> View source"},{"location":"Framework/BinaryFileResponse/ContentDisposition/","title":"ContentDisposition","text":""},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition","title":"enum <code>Athena::Framework::BinaryFileResponse::ContentDisposition</code>","text":"<p>Represents the possible content-disposition header values.</p>"},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition-members","title":"Members","text":""},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition::Attachment","title":"<code>Attachment = 0</code>","text":"<p>Indicates that the file should be downloaded.</p>"},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition::Inline","title":"<code>Inline = 1</code>","text":"<p>Indicates that the browser should display the file inside the Web page, or as the Web page.</p>"},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition-methods","title":"Methods","text":""},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition#attachment?","title":"<code>#attachment?</code>","text":"View source"},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition#inline?","title":"<code>#inline?</code>","text":"View source"},{"location":"Framework/BinaryFileResponse/ContentDisposition/#Athena::Framework::BinaryFileResponse::ContentDisposition#to_s(io)","title":"<code>#to_s(io : IO) : Nil</code>","text":"<p>Appends a <code>String</code> representation of this enum member to the given io.</p> <p>See also: <code>to_s</code>.</p> View source"},{"location":"Framework/Commands/","title":"Commands","text":""},{"location":"Framework/Commands/#Athena::Framework::Commands","title":"module <code>Athena::Framework::Commands</code>","text":"<p>Namespace for the built in <code>Athena::Console</code> commands that come bundled with the framework. Currently it provides:</p> <ul> <li><code>ATH::Commands::DebugEventDispatcher</code> - Display configured listeners for an application</li> <li><code>ATH::Commands::DebugRouter</code> - Display current routes for an application</li> <li><code>ATH::Commands::DebugRouterMatch</code> - Simulate a path match to see which route, if any, would handle it</li> </ul> <p>See each command class for more information.</p>"},{"location":"Framework/Commands/DebugEventDispatcher/","title":"DebugEventDispatcher","text":""},{"location":"Framework/Commands/DebugEventDispatcher/#Athena::Framework::Commands::DebugEventDispatcher","title":"class <code>Athena::Framework::Commands::DebugEventDispatcher</code> inherits <code>Athena::Console::Command</code>","text":"<p>Utility command to allow viewing information about an <code>AED::EventDispatcherInterface</code>. Includes the type/method of each event listener, along with the order they run in based on their priority. Accepts an optional argument to allow filtering the list to a specific event, or ones that contain the provided string.</p> <pre><code>$ ./bin/console debug:event-dispatcher\nRegistered Listeners Grouped by Event\n=====================================\n\nAthena::Framework::Events::Action event\n---------------------------------------\n\n ------- -------------------------------------------------------- ----------\n  Order   Callable                                                 Priority\n ------- -------------------------------------------------------- ----------\n  #1      Athena::Framework::Listeners::ParamFetcher#on_action     5\n ------- -------------------------------------------------------- ----------\n\nAthena::Framework::Events::Exception event\n------------------------------------------\n\n ------- -------------------------------------------------- ----------\n  Order   Callable                                           Priority\n ------- -------------------------------------------------- ----------\n  #1      Athena::Framework::Listeners::Error#on_exception   -50\n ------- -------------------------------------------------- ----------\n\nAthena::Framework::Events::Request event\n----------------------------------------\n\n ------- -------------------------------------------------- ----------\n  Order   Callable                                           Priority\n ------- -------------------------------------------------- ----------\n  #1      Athena::Framework::Listeners::CORS#on_request      250\n  #2      Athena::Framework::Listeners::Format#on_request    34\n  #3      Athena::Framework::Listeners::Routing#on_request   32\n ------- -------------------------------------------------- ----------\n\n...\n</code></pre> <p>Todo</p> <p>Support dedicated <code>AED::EventDispatcherInterface</code> services other than the default.</p>"},{"location":"Framework/Commands/DebugEventDispatcher/#Athena::Framework::Commands::DebugEventDispatcher-constructors","title":"Constructors","text":""},{"location":"Framework/Commands/DebugEventDispatcher/#Athena::Framework::Commands::DebugEventDispatcher.new(dispatcher)","title":"<code>.new(dispatcher : AED::EventDispatcherInterface)</code>","text":"View source"},{"location":"Framework/Commands/DebugRouter/","title":"DebugRouter","text":""},{"location":"Framework/Commands/DebugRouter/#Athena::Framework::Commands::DebugRouter","title":"class <code>Athena::Framework::Commands::DebugRouter</code> inherits <code>Athena::Console::Command</code>","text":"<p>Utility command to allow viewing all of the routes Athena is aware of within your application.</p> <pre><code>$ ./bin/console debug:router\n----------------  -------  -------  -----  --------------------------------------------\nName              Method   Scheme   Host   Path\n----------------  -------  -------  -----  --------------------------------------------\nhomepage          ANY      ANY      ANY    /\ncontact           GET      ANY      ANY    /contact\ncontact_process   POST     ANY      ANY    /contact\narticle_show      ANY      ANY      ANY    /articles/{_locale}/{year}/{title}.{_format}\nblog              ANY      ANY      ANY    /blog/{page}\nblog_show         ANY      ANY      ANY    /blog/{slug}\n----------------  -------  -------  -----  --------------------------------------------\n</code></pre> <p>The command also supports viewing additional information about a specific route: <pre><code>$ ./bin/console debug:router test\n+--------------+-------------------------------------+\n| Property     | Value                               |\n+--------------+-------------------------------------+\n| Route Name   | test                                |\n| Path         | /{id}/{a}                           |\n| Path Regex   | ^/(?P&lt;id&gt;\\d+)/(?P&lt;a&gt;10)$            |\n| Host         | ANY                                 |\n| Host Regex   |                                     |\n| Scheme       | ANY                                 |\n| Methods      | GET                                 |\n| Requirements | a: 10                               |\n|              | id: \\d+                             |\n| Class        | Athena::Routing::Route              |\n| Defaults     | _controller: ExampleController#root |\n+--------------+-------------------------------------+\n</code></pre></p> <p>Tip</p> <p>Checkout <code>ATH::Commands::DebugRouterMatch</code> to test which route a given path resolves to.</p>"},{"location":"Framework/Commands/DebugRouter/#Athena::Framework::Commands::DebugRouter-constructors","title":"Constructors","text":""},{"location":"Framework/Commands/DebugRouter/#Athena::Framework::Commands::DebugRouter.new(router)","title":"<code>.new(router : ART::RouterInterface)</code>","text":"View source"},{"location":"Framework/Commands/DebugRouterMatch/","title":"DebugRouterMatch","text":""},{"location":"Framework/Commands/DebugRouterMatch/#Athena::Framework::Commands::DebugRouterMatch","title":"class <code>Athena::Framework::Commands::DebugRouterMatch</code> inherits <code>Athena::Console::Command</code>","text":"<p>Similar to <code>ATH::Commands::DebugRouter</code>, but instead of providing the route name, you provide the request path in order to determine which, if any, route that path maps to.</p> <pre><code>$ ./bin/console debug:router:match /user/10\n [OK] Route 'example_controller_user' matches\n\n+--------------+-------------------------------------+\n| Property     | Value                               |\n+--------------+-------------------------------------+\n| Route Name   | example_controller_user             |\n| Path         | /user/{id}                          |\n| Path Regex   | ^/user/(?P&lt;id&gt;\\d+)$                 |\n| Host         | ANY                                 |\n| Host Regex   |                                     |\n| Scheme       | ANY                                 |\n| Methods      | GET                                 |\n| Requirements | id: \\d+                             |\n| Class        | Athena::Routing::Route              |\n| Defaults     | _controller: ExampleController#user |\n+--------------+-------------------------------------+\n</code></pre> <p>Or if the route only partially matches:</p> <pre><code>$ ./bin/console debug:router:match /user/foo\n Route 'example_controller_user' almost matches but requirement for 'id' does not match (\\d+)\n\n [ERROR] None of the routes match the path '/user/foo'\n</code></pre>"},{"location":"Framework/Commands/DebugRouterMatch/#Athena::Framework::Commands::DebugRouterMatch-constructors","title":"Constructors","text":""},{"location":"Framework/Commands/DebugRouterMatch/#Athena::Framework::Commands::DebugRouterMatch.new(router)","title":"<code>.new(router : ART::RouterInterface)</code>","text":"View source"},{"location":"Framework/Config/","title":"Config","text":""},{"location":"Framework/Config/#Athena::Framework::Config","title":"struct <code>Athena::Framework::Config</code> inherits <code>Struct</code>","text":"<p>Encompasses all configuration related to the <code>Athena::Framework</code> component.</p> <p>For a higher level introduction to configuring Athena components, see the external documentation.</p>"},{"location":"Framework/Config/#Athena::Framework::Config-constructors","title":"Constructors","text":""},{"location":"Framework/Config/#Athena::Framework::Config.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Config/#Athena::Framework::Config-methods","title":"Methods","text":""},{"location":"Framework/Config/#Athena::Framework::Config#content_negotiation","title":"<code>#content_negotiation : ATH::Config::ContentNegotiation | ::Nil</code>","text":"<p>Configuration related to <code>ATH::Listeners::Format</code>.</p> <p>See <code>ATH::Config::ContentNegotiation.configure</code>.</p> View source"},{"location":"Framework/Config/#Athena::Framework::Config#cors","title":"<code>#cors : ATH::Config::CORS | ::Nil</code>","text":"<p>Configuration related to <code>ATH::Listeners::CORS</code>.</p> <p>See <code>ATH::Config::CORS.configure</code>.</p> View source"},{"location":"Framework/Config/#Athena::Framework::Config#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Config/#Athena::Framework::Config#view_handler","title":"<code>#view_handler : ATH::Config::ViewHandler</code>","text":"<p>Configuration related to <code>ATH::Listeners::View</code>.</p> <p>See <code>ATH::Config::ViewHandler.configure</code>.</p> View source"},{"location":"Framework/Config/CORS/","title":"CORS","text":""},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS","title":"struct <code>Athena::Framework::Config::CORS</code> inherits <code>Struct</code>","text":"<p>Configuration options for <code>ATH::Listeners::CORS</code>. See <code>.configure</code>.</p> <p>Todo</p> <p>Allow scoping <code>CORS</code> options to specific routes versus applying them to all routes.</p>"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS-constructors","title":"Constructors","text":""},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS.new(allow_credentials,allow_origin,allow_headers,allow_methods,expose_headers,max_age)","title":"<code>.new(allow_credentials : Bool = false, allow_origin : Array(String | Regex) = Array(String | Regex).new, allow_headers : Array(String) = [] of String, allow_methods : Array(String) = Athena::Framework::Listeners::CORS::SAFELISTED_METHODS, expose_headers : Array(String) = [] of String, max_age : Int32 = 0)</code>","text":"<p>See <code>.configure</code>.</p> View source"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS-class-methods","title":"Class methods","text":""},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS.configure","title":"<code>.configure : self | ::Nil</code>","text":"<p>This method should be overridden in order to provide the configuration for <code>ATH::Listeners::CORS</code>. See the external documentation for more details.</p> <p>By default it returns <code>nil</code>, which disables the listener.</p> <pre><code># Returns an `ATH::Config::CORS` instance that will determine how the listener functions.\ndef ATH::Config::CORS.configure : ATH::Config::CORS?\n  new(\n    allow_credentials: true,\n    allow_origin: %(https://app.example.com),\n    expose_headers: %w(X-Transaction-ID X-Some-Custom-Header),\n  )\nend\n</code></pre> View source"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS-methods","title":"Methods","text":""},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS#allow_credentials?","title":"<code>#allow_credentials? : Bool</code>","text":"<p>Indicates whether the request can be made using credentials.</p> <p>Maps to the <code>access-control-allow-credentials</code> header.</p> View source"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS#allow_headers","title":"<code>#allow_headers : Array(String)</code>","text":"<p>The header or headers that can be used when making the actual request.</p> <p>Can be set to <code>[\"*\"]</code> to allow any headers.</p> <p>maps to the <code>access-control-allow-headers</code> header.</p> View source"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS#allow_methods","title":"<code>#allow_methods : Array(String)</code>","text":"<p>The method or methods allowed when accessing the resource.</p> <p>Maps to the <code>access-control-allow-methods</code> header. Defaults to the CORS-safelisted methods.</p> View source"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS#allow_origin","title":"<code>#allow_origin : Array(String | Regex)</code>","text":"<p>A white-listed array of valid origins. Each origin may be a static <code>String</code>, or a <code>Regex</code>.</p> <p>Can be set to <code>[\"*\"]</code> to allow any origin.</p> View source"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS#expose_headers","title":"<code>#expose_headers : Array(String)</code>","text":"<p>Array of headers that the browser is allowed to read from the response.</p> <p>Maps to the <code>access-control-expose-headers</code> header.</p> View source"},{"location":"Framework/Config/CORS/#Athena::Framework::Config::CORS#max_age","title":"<code>#max_age : Int32</code>","text":"<p>Number of seconds that the results of a preflight request can be cached.</p> <p>Maps to the <code>access-control-max-age</code> header.</p> View source"},{"location":"Framework/Config/ContentNegotiation/","title":"ContentNegotiation","text":""},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation","title":"struct <code>Athena::Framework::Config::ContentNegotiation</code> inherits <code>Struct</code>","text":"<p>Configuration options for <code>ATH::Listeners::Format</code>. See <code>.configure</code>.</p>"},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation-constructors","title":"Constructors","text":""},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation.new(rules)","title":"<code>.new(rules : Array(ATH::Config::ContentNegotiation::Rule))</code>","text":"View source"},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation.new(*)","title":"<code>.new(*rules : ATH::Config::ContentNegotiation::Rule)</code>","text":"View source"},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation-class-methods","title":"Class methods","text":""},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation.configure","title":"<code>.configure : self | ::Nil</code>","text":"<p>This method should be overridden in order to provide the configuration for <code>ATH::Listeners::Format</code>. See the external documentation for more details.</p> <p>By default it returns <code>nil</code>, which disables the listener.</p> <pre><code>def ATH::Config::ContentNegotiation.configure : ATH::Config::ContentNegotiation?\n  new(\n    # Setting fallback_format to json means that instead of considering\n    # the next rule in case of a priority mismatch, json will be used.\n    Rule.new(priorities: [\"json\", \"xml\"], host: \"api.example.com\", fallback_format: \"json\"),\n    # Setting fallback_format to false means that instead of considering\n    # the next rule in case of a priority mismatch, a 406 will be returned.\n    Rule.new(path: /^\\/image/, priorities: [\"jpeg\", \"gif\"], fallback_format: false),\n    # Setting fallback_format to nil (or not including it) means that\n    # in case of a priority mismatch the next rule will be considered.\n    Rule.new(path: /^\\/admin/, priorities: [\"xml\", \"html\"]),\n    # Setting a priority to */* basically means any format will be matched.\n    Rule.new(priorities: [\"text/html\", \"*/*\"], fallback_format: \"html\"),\n  )\nend\n</code></pre> View source"},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation-methods","title":"Methods","text":""},{"location":"Framework/Config/ContentNegotiation/#Athena::Framework::Config::ContentNegotiation#rules","title":"<code>#rules : Array(ATH::Config::ContentNegotiation::Rule)</code>","text":"<p>Returns the content negotiation rules that should be considered when determining the request's format.</p> View source"},{"location":"Framework/Config/ContentNegotiation/Rule/","title":"Rule","text":""},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule","title":"struct <code>Athena::Framework::Config::ContentNegotiation::Rule</code> inherits <code>Struct</code>","text":"<p>Represents a rule that should be considered when determine the request's format.</p> <p>Contains configuration options to control when the content negotiation logic should be applied.</p>"},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule-constructors","title":"Constructors","text":""},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule.new(path,host,priorities,fallback_format,methods,stop)","title":"<code>.new(path : Regex = /^\\//, host : Regex | String | Nil = nil, priorities : Array(String) | Nil = nil, fallback_format : String | Bool | Nil = false, methods : Array(String) | Nil = nil, stop : Bool = false)</code>","text":"View source"},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule-methods","title":"Methods","text":""},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule#fallback_format","title":"<code>#fallback_format : String | Bool | Nil</code>","text":"<p>Returns the format that should be used if a request does not allow for any of the formats within <code>#priorities</code>.</p> <p>Can be set to <code>nil</code> to check the next rule in case of a priority mismatch. Can be set to <code>false</code> to raise an <code>ATH::Exceptions::NotAcceptable</code> exception in case of a priority mismatch.</p> View source"},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule#host","title":"<code>#host : Regex | ::Nil</code>","text":"<p>Returns a <code>Regex</code> representing the hostname that this rule should be scoped to.</p> <p>parameters may be used to generalize this.</p> View source"},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule#methods","title":"<code>#methods : Array(String) | ::Nil</code>","text":"<p>Returns the methods that this rule should optionally be scoped to.</p> View source"},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule#path","title":"<code>#path : Regex</code>","text":"<p>Returns the a <code>Regex</code> representing the paths this rule should be scoped to.</p> View source"},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule#priorities","title":"<code>#priorities : Array(String) | ::Nil</code>","text":"<p>Returns the formats that should be considered for this set of routes. Must contain at least one format.</p> View source"},{"location":"Framework/Config/ContentNegotiation/Rule/#Athena::Framework::Config::ContentNegotiation::Rule#stop?","title":"<code>#stop? : Bool</code>","text":"<p>Determines if <code>ATH::Listeners::Format</code> should be enabled for this rule and any rule following it.</p> View source"},{"location":"Framework/Config/ViewHandler/","title":"ViewHandler","text":""},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler","title":"struct <code>Athena::Framework::Config::ViewHandler</code> inherits <code>Struct</code>","text":"<p>Configuration options for <code>ATH::Listeners::View</code>. See <code>.configure</code>.</p>"},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler-constructors","title":"Constructors","text":""},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler.configure","title":"<code>.configure : self</code>","text":"<p>This method should be overridden in order to provide configuration overrides for <code>ATH::View::ViewHandlerInterface</code>. See the external documentation for more details.</p> <p>Note</p> <p>The <code>#failed_validation_status</code> is currently not used. Included for future work.</p> <pre><code>def ATH::Config::ViewHandler.configure : ATH::Config::ViewHandler\n  new(\n    empty_content_status: :ok\n  )\nend\n</code></pre> View source"},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler.new(empty_content_status,failed_validation_status,emit_nil)","title":"<code>.new(empty_content_status : HTTP::Status = HTTP::Status::NO_CONTENT, failed_validation_status : HTTP::Status = HTTP::Status::UNPROCESSABLE_ENTITY, emit_nil : Bool = false)</code>","text":"<p>See <code>.configure</code>.</p> View source"},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler-methods","title":"Methods","text":""},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler#emit_nil?","title":"<code>#emit_nil? : Bool</code>","text":"<p>If <code>nil</code> values should be serialized.</p> View source"},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler#empty_content_status","title":"<code>#empty_content_status : HTTP::Status</code>","text":"<p>The <code>HTTP::Status</code> used when there is no response content.</p> View source"},{"location":"Framework/Config/ViewHandler/#Athena::Framework::Config::ViewHandler#failed_validation_status","title":"<code>#failed_validation_status : HTTP::Status</code>","text":"<p>The <code>HTTP::Status</code> used when validations fail.</p> <p>Currently not used. Included for future work.</p> View source"},{"location":"Framework/Console/","title":"Console","text":""},{"location":"Framework/Console/#Athena::Framework::Console","title":"module <code>Athena::Framework::Console</code>","text":""},{"location":"Framework/Console/Helper/","title":"Helper","text":""},{"location":"Framework/Console/Helper/#Athena::Framework::Console::Helper","title":"module <code>Athena::Framework::Console::Helper</code>","text":""},{"location":"Framework/Controller/","title":"Controller","text":""},{"location":"Framework/Controller/#Athena::Framework::Controller","title":"abstract class <code>Athena::Framework::Controller</code> inherits <code>Reference</code>","text":"<p>The core of any framework is routing; how a route is tied to an action. Athena takes an annotation based approach; an annotation, such as <code>ARTA::Get</code> is applied to an instance method of a controller class, which will be executed when that endpoint receives a request.</p> <p>Additional annotation also exist for defining a query parameter. See <code>ATHA::QueryParam</code> for more information.</p> <p>Child controllers must inherit from <code>ATH::Controller</code> (or an abstract child of it). Each request gets its own instance of the controller to better allow for DI via <code>Athena::DependencyInjection</code>.</p> <p>A route action can either return an <code>ATH::Response</code>, or some other type. If an <code>ATH::Response</code> is returned, then it is used directly. Otherwise an <code>ATH::Events::View</code> is emitted to convert the action result into an <code>ATH::Response</code>. By default, <code>ATH::Listeners::View</code> will JSON encode the value if it is not handled earlier by another listener.</p>"},{"location":"Framework/Controller/#Athena::Framework::Controller--example","title":"Example","text":"<p>The following controller shows examples of the various routing features of Athena. <code>ATH::Controller</code> also defines various macro DSLs, such as <code>ATH::Controller.get</code> to make defining routes seem more Sinatra/Kemal like. See the documentation on the macros for more details.</p> <pre><code>require \"athena\"\nrequire \"mime\"\n\n# The `ARTA::Route` annotation can also be applied to a controller class.\n# This can be useful for applying a common path prefix, defaults, requirements,\n# etc. to all actions in the controller.\n@[ARTA::Route(path: \"/athena\")]\nclass TestController &lt; ATH::Controller\n  # A GET endpoint returning an `ATH::Response`.\n  # Can be used to return raw data, such as HTML or CSS etc, in a one-off manor.\n  @[ARTA::Get(path: \"/index\")]\n  def index : ATH::Response\n    ATH::Response.new \"&lt;h1&gt;Welcome to my website!&lt;/h1&gt;\", headers: HTTP::Headers{\"content-type\" =&gt; MIME.from_extension(\".html\")}\n  end\n\n  # A GET endpoint returning an `ATH::StreamedResponse`.\n  # Can be used to stream the response content to the client;\n  # useful if the content is too large to fit into memory.\n  @[ARTA::Get(path: \"/users\")]\n  def users : ATH::Response\n    ATH::StreamedResponse.new headers: HTTP::Headers{\"content-type\" =&gt; \"application/json; charset=UTF-8\"} do |io|\n      User.all.to_json io\n    end\n  end\n\n  # A GET endpoint with no params returning a `String`.\n  #\n  # Action return type restrictions are required.\n  @[ARTA::Get(\"/me\")]\n  def get_me : String\n    \"Jim\"\n  end\n\n  # A GET endpoint with no params returning `Nil`.\n  # `Nil` return types are returned with a status\n  # of 204 no content\n  @[ARTA::Get(\"/no_content\")]\n  def get_no_content : Nil\n    # Do stuff\n  end\n\n  # A GET endpoint with two `Int32` params returning an `Int32`.\n  #\n  # The parameters of a route _MUST_ match the parameters of the action.\n  # Type restrictions on action parameters are required.\n  @[ARTA::Get(\"/add/{val1}/{val2}\")]\n  def add(val1 : Int32, val2 : Int32) : Int32\n    val1 + val2\n  end\n\n  # A GET endpoint with a required trailing slash, a `String` route param,\n  # and a required string query param that must match the given pattern; returning a `String`.\n  #\n  # Athena treats non `GET`/`HEAD` routes with a trailing slash as unique\n  # E.g. `POST /foo/bar/` versus `POST /foo/bar`.\n  # Be sure to keep you routes consistent!\n  #\n  # A non-nilable type denotes it as required. If the parameter is not supplied,\n  # and no default value is assigned, an `ATH::Exceptions::BadRequest` exception is raised.\n  @[ARTA::Get(\"/event/{event_name}/\")]\n  @[ATHA::QueryParam(\"time\", requirements: /\\d:\\d:\\d/)]\n  def event_time(event_name : String, time : String) : String\n    \"#{event_name} occurred at #{time}\"\n  end\n\n  # A GET endpoint with an optional query parameter and optional path param\n  # with a default value; returning a `NamedTuple(user_id : Int32?, page : Int32)`.\n  #\n  # A nilable type denotes it as optional.\n  # If the parameter is not supplied (or could not be converted),\n  # and no default value is assigned, it is `nil`.\n  @[ATHA::QueryParam(\"user_id\")]\n  @[ARTA::Get(\"/events/{page}\")]\n  def events(user_id : Int32?, page : Int32 = 1) : NamedTuple(user_id: Int32?, page: Int32)\n    {user_id: user_id, page: page}\n  end\n\n  # A GET endpoint with route parameter requirements.\n  # The parameter must match the supplied Regex or this route will not be matched.\n  #\n  # This feature can allow multiple routes to exist with parameters in the same location,\n  # but with different requirements.\n  @[ARTA::Get(\"/time/{time}/\", requirements: {\"time\" =&gt; /\\d{2}:\\d{2}:\\d{2}/})]\n  def get_constraint(time : String) : String\n    time\n  end\n\n  # A POST endpoint with a route param and accessing the request body; returning a `Bool`.\n  #\n  # It is recommended to use param converters to pass an actual object representing the data (assuming the body is JSON)\n  # to the route's action; however the raw request body can be accessed by typing an action argument as `ATH::Request`.\n  @[ARTA::Post(\"/test/{expected}\")]\n  def post_body(expected : String, request : ATH::Request) : Bool\n    expected == request.body.try &amp;.gets_to_end\n  end\n\n  # An endpoint may also have more than one route annotation applied to it.\n  # This can be useful in allowing for a route to support multiple aliases.\n  @[ARTA::Get(\"/users/{id}\")]\n  @[ARTA::Get(\"/people/{id}\")]\n  def get_user(id : Int64) : User\n    # Fetch the user\n    user = ...\n\n    user\n  end\nend\n\nATH.run\n\n# GET /athena/index                    # =&gt; &lt;h1&gt;Welcome to my website!&lt;/h1&gt;\n# GET /athena/users                    # =&gt; [{\"id\":1,...},...]\n# GET /athena/wakeup/17                # =&gt; Morning, Allison it is currently 2020-02-01 18:38:12 UTC.\n# GET /athena/me                       # =&gt; \"Jim\"\n# GET /athena/add/50/25                # =&gt; 75\n# GET /athena/event/foobar?time=1:1:1  # =&gt; \"foobar occurred at 1:1:1\"\n# GET /athena/event/foobar/?time=1:1:1 # =&gt; \"foobar occurred at 1:1:1\"\n# GET /athena/events                   # =&gt; {\"user_id\":null,\"page\":1}\n# GET /athena/events/17?user_id=19     # =&gt; {\"user_id\":19,\"page\":17}\n# GET /athena/time/12:45:30            # =&gt; \"12:45:30\"\n# GET /athena/time/12:aa:30            # =&gt; 404 not found\n# GET /athena/no_content               # =&gt; 204 no content\n# GET /athena/users/19                 # =&gt; {\"user_id\":19}\n# GET /athena/people/19                # =&gt; {\"user_id\":19}\n# POST /athena/test/foo, body: \"foo\"   # =&gt; true\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller-methods","title":"Methods","text":""},{"location":"Framework/Controller/#Athena::Framework::Controller#generate_url(route,params,reference_type)","title":"<code>#generate_url(route : String, params : Hash(String, _) = Hash(String, String | ::Nil).new, reference_type : ART::Generator::ReferenceType = :absolute_path) : String</code>","text":"<p>Generates a URL to the provided route with the provided params.</p> <p>See <code>ART::Generator::Interface#generate</code>.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller#generate_url(route,reference_type,**)","title":"<code>#generate_url(route : String, reference_type : ART::Generator::ReferenceType = :absolute_path, **params)</code>","text":"<p>Generates a URL to the provided route with the provided params.</p> <p>See <code>ART::Generator::Interface#generate</code>.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller#redirect(url,status)","title":"<code>#redirect(url : String | Path, status : HTTP::Status = HTTP::Status::FOUND) : ATH::RedirectResponse</code>","text":"<p>Returns an <code>ATH::RedirectResponse</code> to the provided url, optionally with the provided status.</p> <pre><code>class ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"redirect/google\")]\n  def redirect_to_google : ATH::RedirectResponse\n    self.redirect \"https://google.com\"\n  end\nend\n</code></pre> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller#redirect_to_route(route,params,status)","title":"<code>#redirect_to_route(route : String, params : Hash(String, _) = Hash(String, String | ::Nil).new, status : HTTP::Status = :found) : ATH::RedirectResponse</code>","text":"<p>Returns an <code>ATH::RedirectResponse</code> to the provided route with the provided params.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  # Define a route to redirect to, explicitly naming this route `add`.\n  # The default route name is controller + method down snake-cased; e.x. `example_controller_add`.\n  @[ARTA::Get(\"/add/{value1}/{value2}\", name: \"add\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false) : Int32\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\n\n  # Define a route that redirects to the `add` route with fixed parameters.\n  @[ARTA::Get(\"/\")]\n  def redirect : ATH::RedirectResponse\n    self.redirect_to_route \"add\", {\"value1\" =&gt; 8, \"value2\" =&gt; 2}\n  end\nend\n\nATH.run\n\n# GET / # =&gt; 10\n</code></pre> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller#redirect_to_route(route,status,**)","title":"<code>#redirect_to_route(route : String, status : HTTP::Status = :found, **params) : ATH::RedirectResponse</code>","text":"<p>Returns an <code>ATH::RedirectResponse</code> to the provided route with the provided params.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  # Define a route to redirect to, explicitly naming this route `add`.\n  # The default route name is controller + method down snake-cased; e.x. `example_controller_add`.\n  @[ARTA::Get(\"/add/{value1}/{value2}\", name: \"add\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false) : Int32\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\n\n  # Define a route that redirects to the `add` route with fixed parameters.\n  @[ARTA::Get(\"/\")]\n  def redirect : ATH::RedirectResponse\n    self.redirect_to_route \"add\", value1: 8, value2: 2\n  end\nend\n\nATH.run\n\n# GET / # =&gt; 10\n</code></pre> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller#redirect_view(url,status,headers)","title":"<code>#redirect_view(url : Status, status : HTTP::Status = HTTP::Status::FOUND, headers : HTTP::Headers = HTTP::Headers.new) : ATH::View</code>","text":"<p>Returns an <code>ATH::View</code> that'll redirect to the provided url, optionally with the provided status and headers.</p> <p>Is essentially the same as <code>#redirect</code>, but invokes the view layer.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller#route_redirect_view(route,params,status,headers)","title":"<code>#route_redirect_view(route : Status, params : Hash(String, _) = Hash(String, String | ::Nil).new, status : HTTP::Status = HTTP::Status::CREATED, headers : HTTP::Headers = HTTP::Headers.new) : ATH::View</code>","text":"<p>Returns an <code>ATH::View</code> that'll redirect to the provided route, optionally with the provided params, status, and headers.</p> <p>Is essentially the same as <code>#redirect_to_route</code>, but invokes the view layer.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller#view(data,status,headers)","title":"<code>#view(data = nil, status : HTTP::Status | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new) : ATH::View</code>","text":"<p>Returns an <code>ATH::View</code> with the provided data, and optionally status and headers.</p> <pre><code>@[ARTA::Get(\"/{name}\")]\ndef say_hello(name : String) : ATH::View(NamedTuple(greeting: String))\n  self.view({greeting: \"Hello #{name}\"}, :im_a_teapot)\nend\n</code></pre> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller-macros","title":"Macros","text":""},{"location":"Framework/Controller/#Athena::Framework::Controller:delete(path,*,**,&)","title":"<code>delete</code>","text":"<p>Helper DSL macro for creating <code>DELETE</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:delete(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:delete(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  delete \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller:get(path,*,**,&)","title":"<code>get</code>","text":"<p>Helper DSL macro for creating <code>GET</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:get(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:get(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  get \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller:head(path,*,**,&)","title":"<code>head</code>","text":"<p>Helper DSL macro for creating <code>HEAD</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:head(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:head(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  head \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller:link(path,*,**,&)","title":"<code>link</code>","text":"<p>Helper DSL macro for creating <code>LINK</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:link(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:link(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  link \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller:patch(path,*,**,&)","title":"<code>patch</code>","text":"<p>Helper DSL macro for creating <code>PATCH</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:patch(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:patch(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  patch \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller:post(path,*,**,&)","title":"<code>post</code>","text":"<p>Helper DSL macro for creating <code>POST</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:post(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:post(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  post \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller:put(path,*,**,&)","title":"<code>put</code>","text":"<p>Helper DSL macro for creating <code>PUT</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:put(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:put(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  put \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/#Athena::Framework::Controller:render(template)","title":"<code>render(template)</code>","text":"<p>Renders a template.</p> <p>Uses <code>ECR</code> to render the template, creating an <code>ATH::Response</code> with its rendered content and adding a <code>text/html</code> <code>content-type</code> header.</p> <p>The response can be modified further before returning it if needed.</p> <p>Variables used within the template must be defined within the action's body manually if they are not provided within the action's arguments.</p> <pre><code># greeting.ecr\nGreetings, &lt;%= name %&gt;!\n\n# example_controller.cr\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/{name}\")]\n  def greet(name : String) : ATH::Response\n    render \"greeting.ecr\"\n  end\nend\n\nATH.run\n\n# GET /Fred # =&gt; Greetings, Fred!\n</code></pre> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:render(template,layout)","title":"<code>render(template, layout)</code>","text":"<p>Renders a template within a layout. <pre><code># layout.ecr\n&lt;h1&gt;Content:&lt;/h1&gt; &lt;%= content -%&gt;\n\n# greeting.ecr\nGreetings, &lt;%= name %&gt;!\n\n# example_controller.cr\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/{name}\")]\n  def greet(name : String) : ATH::Response\n    render \"greeting.ecr\", \"layout.ecr\"\n  end\nend\n\nATH.run\n\n# GET /Fred # =&gt; &lt;h1&gt;Content:&lt;/h1&gt; Greetings, Fred!\n</code></pre></p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:unlink(path,*,**,&)","title":"<code>unlink</code>","text":"<p>Helper DSL macro for creating <code>UNLINK</code> actions.</p> <p>The first argument is the path that the action should handle; which maps to path on the HTTP method annotation. The second argument is a variable amount of arguments with a syntax similar to Crystal's <code>record</code>. There are also a few optional named arguments that map to the corresponding field on the HTTP method annotation.</p> <p>The macro simply defines a method based on the options passed to it. Additional annotations, such as for query params or a param converter can simply be added on top of the macro.</p> View source"},{"location":"Framework/Controller/#Athena::Framework::Controller:unlink(path,*,**,&)--optional-named-arguments","title":"Optional Named Arguments","text":"<ul> <li><code>return_type</code> - The return type to set for the action. Defaults to <code>String</code> if not provided.</li> <li><code>constraints</code> - Any constraints that should be applied to the route.</li> </ul>"},{"location":"Framework/Controller/#Athena::Framework::Controller:unlink(path,*,**,&)--example","title":"Example","text":"<pre><code>class ExampleController &lt; ATH::Controller\n  unlink \"values/{value1&lt;\\\\d+&gt;}/{value2&lt;\\\\d+\\\\.\\\\d+&gt;}\", value1 : Int32, value2 : Float64 do\n    \"Value1: #{value1} - Value2: #{value2}\"\n  end\nend\n</code></pre>"},{"location":"Framework/Controller/ArgumentResolver/","title":"ArgumentResolver","text":""},{"location":"Framework/Controller/ArgumentResolver/#Athena::Framework::Controller::ArgumentResolver","title":"struct <code>Athena::Framework::Controller::ArgumentResolver</code> inherits <code>Struct</code>","text":"<p>The default implementation of <code>ATH::Controller::ArgumentResolverInterface</code>.</p> Included modules <code>Athena::Framework::Controller::ArgumentResolverInterface</code>"},{"location":"Framework/Controller/ArgumentResolver/#Athena::Framework::Controller::ArgumentResolver-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ArgumentResolver/#Athena::Framework::Controller::ArgumentResolver.new(value_resolvers)","title":"<code>.new(value_resolvers : Array(ATHR::Interface))</code>","text":"View source"},{"location":"Framework/Controller/ArgumentResolver/#Athena::Framework::Controller::ArgumentResolver-methods","title":"Methods","text":""},{"location":"Framework/Controller/ArgumentResolver/#Athena::Framework::Controller::ArgumentResolver#get_arguments(request,route)","title":"<code>#get_arguments(request : ATH::Request, route : ATH::ActionBase) : Array</code>","text":"<p>Returns an array of arguments resolved from the provided request for the given route.</p> View source"},{"location":"Framework/Controller/ArgumentResolverInterface/","title":"ArgumentResolverInterface","text":""},{"location":"Framework/Controller/ArgumentResolverInterface/#Athena::Framework::Controller::ArgumentResolverInterface","title":"module <code>Athena::Framework::Controller::ArgumentResolverInterface</code>","text":"<p>Responsible for resolving the arguments that will be passed to a controller action.</p> <p>See the external documentation for more information.</p> Direct including types <code>Athena::Framework::Controller::ArgumentResolver</code>"},{"location":"Framework/Controller/ArgumentResolverInterface/#Athena::Framework::Controller::ArgumentResolverInterface-methods","title":"Methods","text":""},{"location":"Framework/Controller/ArgumentResolverInterface/#Athena::Framework::Controller::ArgumentResolverInterface#get_arguments(request,route)","title":"abstract <code>#get_arguments(request : ATH::Request, route : ATH::ActionBase) : Array</code>","text":"<p>Returns an array of arguments resolved from the provided request for the given route.</p> View source"},{"location":"Framework/Controller/ParameterMetadata/","title":"ParameterMetadata","text":""},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata","title":"struct <code>Athena::Framework::Controller::ParameterMetadata(T)</code> inherits <code>Struct</code>","text":"<p>Represents a controller action parameter. Stores metadata associated with it, such as its name, type, and default value if any.</p>"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata-methods","title":"Methods","text":""},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#annotation_configurations","title":"<code>#annotation_configurations : ACF::AnnotationConfigurations</code>","text":"<p>Returns annotation configurations registered via <code>Athena::Config.configuration_annotation</code> and applied to this parameter.</p> <p>These configurations could then be accessed within <code>ATHR::Interface</code>s and/or <code>ATH::Listeners</code>s.</p> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#default_value","title":"<code>#default_value : T</code>","text":"<p>Returns the default value for this parameter, raising an exception if it does not have one.</p> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#default_value?","title":"<code>#default_value? : T | ::Nil</code>","text":"<p>Returns the default value for this parameter, or <code>nil</code> if it does not have one.</p> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#first_type_of(klass)","title":"<code>#first_type_of(klass : Type.class) forall Type</code>","text":"<p>Returns the metaclass of the first matching type variable that is an <code>#instance_of?</code> the provided klass, or <code>nil</code> if none match. If this the <code>#type</code> is union, this would be the first viable type.</p> <pre><code>ATH::Controller::ParameterMetadata(Int32).new(\"foo\").first_type_of(Int32)                            # =&gt; Int32.class\nATH::Controller::ParameterMetadata(String | Int32 | Bool).new(\"foo\").first_type_of(Int32)            # =&gt; Int32.class\nATH::Controller::ParameterMetadata(String | Int8 | Float64 | Int64).new(\"foo\").first_type_of(Number) # =&gt; Float64.class\nATH::Controller::ParameterMetadata(String | Int32 | Bool).new(\"foo\").first_type_of(Float64)          # =&gt; nil\n</code></pre> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#has_default?","title":"<code>#has_default? : Bool</code>","text":"<p>Returns <code>true</code> if this parameter has a default value set, otherwise <code>false</code>.</p> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#instance_of?(klass)","title":"<code>#instance_of?(klass : Type.class) : Bool forall Type</code>","text":"<p>Returns <code>true</code> if this parameter's <code>#type</code> includes the provided klass.</p> <pre><code>ATH::Controller::ParameterMetadata(Int32).new(\"foo\").instance_of?(Int32)       # =&gt; true\nATH::Controller::ParameterMetadata(Int32 | Bool).new(\"foo\").instance_of?(Bool) # =&gt; true\nATH::Controller::ParameterMetadata(Int32).new(\"foo\").instance_of?(String)      # =&gt; false\n</code></pre> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#name","title":"<code>#name : String</code>","text":"<p>Returns the name of the parameter.</p> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#nilable?","title":"<code>#nilable? : Bool</code>","text":"<p>If <code>nil</code> is a valid value for the parameter.</p> View source"},{"location":"Framework/Controller/ParameterMetadata/#Athena::Framework::Controller::ParameterMetadata#type","title":"<code>#type : T.class</code>","text":"<p>The type of the parameter, i.e. what its type restriction is.</p> View source"},{"location":"Framework/Controller/ValueResolvers/","title":"ValueResolvers","text":""},{"location":"Framework/Controller/ValueResolvers/#Athena::Framework::Controller::ValueResolvers","title":"module <code>Athena::Framework::Controller::ValueResolvers</code>","text":"<p>This type includes all of the built-in resolvers that Athena uses to try and resolve an argument for a particular controller action parameter. They run in the following order:</p> <ol> <li> <p><code>ATHR::Enum</code> (105) - Attempts to resolve a value from <code>ATH::Request#attributes</code> into an enum member of the related type. Works well in conjunction with <code>ART::Requirement::Enum</code>.</p> </li> <li> <p><code>ATHR::Time</code> (105) - Attempts to resolve a value from the request attributes into a <code>::Time</code> instance, defaulting to RFC 3339. Format/location can be customized via the <code>ATHR::Time::Format</code> annotation.</p> </li> <li> <p><code>ATHR::UUID</code> (105) - Attempts to resolve a value from the request attributes into a <code>::UUID</code> instance.</p> </li> <li> <p><code>ATHR::RequestBody</code> (105) - If enabled, attempts to deserialize the request body into the type of the related parameter, running any validations, if any.</p> </li> <li> <p><code>ATHR::RequestAttribute</code> (100) - Provides a value stored in <code>ATH::Request#attributes</code> if one with the same name as the action parameter exists.</p> </li> <li> <p><code>ATHR::Request</code> (50) - Provides the current <code>ATH::Request</code> if the related parameter is typed as such.</p> </li> <li> <p><code>ATHR::DefaultValue</code> (-100) - Provides the default value of the parameter if it has one, or <code>nil</code> if it is nilable.</p> </li> </ol> <p>See each resolver for more detailed information. Custom resolvers may also be defined. See <code>ATHR::Interface</code> for more information.</p>"},{"location":"Framework/Controller/ValueResolvers/DefaultValue/","title":"DefaultValue","text":""},{"location":"Framework/Controller/ValueResolvers/DefaultValue/#Athena::Framework::Controller::ValueResolvers::DefaultValue","title":"struct <code>Athena::Framework::Controller::ValueResolvers::DefaultValue</code> inherits <code>Struct</code>","text":"<p>Resolves the default value of a controller action parameter if no other value was provided; using <code>nil</code> if the parameter does not have a default value, but is nilable.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/default\")]\n  def default(id : Int32 = 123) : Int32\n    id\n  end\n\n  @[ARTA::Get(\"/nilable\")]\n  def nilable(id : Int32?) : Int32?\n    id\n  end\nend\n\nATH.run\n\n# GET /default # =&gt; 123\n# GET /nilable # =&gt; null\n</code></pre> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface</code>"},{"location":"Framework/Controller/ValueResolvers/DefaultValue/#Athena::Framework::Controller::ValueResolvers::DefaultValue-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ValueResolvers/DefaultValue/#Athena::Framework::Controller::ValueResolvers::DefaultValue.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/DefaultValue/#Athena::Framework::Controller::ValueResolvers::DefaultValue-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/DefaultValue/#Athena::Framework::Controller::ValueResolvers::DefaultValue#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/DefaultValue/#Athena::Framework::Controller::ValueResolvers::DefaultValue#resolve(request,parameter)","title":"<code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata)</code>","text":"<p>Returns a value resolved from the provided request and parameter if possible, otherwise returns <code>nil</code> if no parameter could be resolved.</p> View source"},{"location":"Framework/Controller/ValueResolvers/Enum/","title":"Enum","text":""},{"location":"Framework/Controller/ValueResolvers/Enum/#Athena::Framework::Controller::ValueResolvers::Enum","title":"struct <code>Athena::Framework::Controller::ValueResolvers::Enum</code> inherits <code>Struct</code>","text":"<p>Handles resolving an Enum member from a string value that is stored in the request's <code>ATH::Request#attributes</code>. This resolver supports both numeric and string based parsing, returning a proper error response if the provided value does not map to any valid member.</p> <pre><code>require \"athena\"\n\nenum Color\n  Red\n  Blue\n  Green\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/numeric/{color}\")]\n  def get_color_numeric(color : Color) : Color\n    color\n  end\n\n  @[ARTA::Get(\"/string/{color}\")]\n  def get_color_string(color : Color) : Color\n    color\n  end\nend\n\nATH.run\n\n# GET /numeric/1 # =&gt; \"blue\"\n# GET /string/red # =&gt; \"red\"\n</code></pre> <p>Tip</p> <p>Checkout <code>ART::Requirement::Enum</code> for an easy way to restrict routing to an enum's members, or a subset of them.</p> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface</code>"},{"location":"Framework/Controller/ValueResolvers/Enum/#Athena::Framework::Controller::ValueResolvers::Enum-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ValueResolvers/Enum/#Athena::Framework::Controller::ValueResolvers::Enum.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/Enum/#Athena::Framework::Controller::ValueResolvers::Enum-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/Enum/#Athena::Framework::Controller::ValueResolvers::Enum#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/Enum/#Athena::Framework::Controller::ValueResolvers::Enum#resolve(request,parameter)","title":"<code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata(T)) : T | Nil forall T</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Controller/ValueResolvers/Interface/","title":"Interface","text":""},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface","title":"module <code>Athena::Framework::Controller::ValueResolvers::Interface</code>","text":"<p>Value resolvers handle resolving the argument(s) to pass to a controller action based on values stored within the <code>ATH::Request</code>, or some other source.</p> <p>Custom resolvers can be defined by creating a service that implements this interface, and is tagged with <code>ATHR::Interface::TAG</code>. The tag also accepts an optional priority field the determines the order in which the resolvers execute. The list of built in resolvers and their priorities can be found on the <code>ATH::Controller::ValueResolvers</code> module.</p> <p>Warning</p> <p>Resolvers that mutate a value already within the <code>ATH::Request#attributes</code>, such as one from a route or query parameter MUST have a priority <code>&gt;100</code> to ensure the custom logic is applied before the raw value is resolved via the <code>ATHR::RequestAttribute</code> resolver.</p> <p>The first resolver to return a value wins and no other resolvers will be executed for that particular parameter. The resolver should return <code>nil</code> to denote no value could be resolved, such as if the parameter is of the wrong type, does not have a specific annotation applied, or anything else that can be deduced from either parameter. If no resolver is able to resole a value for a specific parameter, an error is thrown and processing of the request ceases.</p> <p>For example:</p> <pre><code>@[ADI::Register(tags: [{name: ATHR::Interface::TAG, priority: 10}])]\nstruct CustomResolver\n  include ATHR::Interface\n\n  # :inherit:\n  def resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : MyCustomType?\n    # Return early if a value is unresolvable from the current *request* and/or *parameter*.\n    return if parameter.type != MyCustomType\n\n    # Return the resolved value. It could either come from the request itself, an injected service, or hard coded.\n    MyCustomType.new \"foo\"\n  end\nend\n</code></pre> <p>Now, given the following controller:</p> <pre><code>class ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  def root(my_obj : MyCustomType) : String\n    my_obj.name\n  end\nend\n\n# GET / # =&gt; \"foo\"\n</code></pre> <p>Since none of the built-in resolvers are applicable for this parameter type, nor is there a my_obj value in <code>ATH::Request#attributes</code>, assuming no customer listeners manually add it, the <code>CustomResolver</code> would take over and provide the value for that parameter.</p>"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface--configuration","title":"Configuration","text":"<p>In some cases, the request and parameter themselves may not be enough to know if a resolver should try to resolve a value or not. A naive example would be say you want to have a resolver that multiplies certain <code>Int32</code> parameters by <code>10</code>. It wouldn't be enough to just check if the parameter is an <code>Int32</code> as that leaves too much room for unexpected contexts to be resolved unexpectedly. For such cases a <code>.configuration</code> annotation type may be defined to allow marking the specific parameters the related resolver should apply to.</p> <p>For example:</p> <pre><code># The priority _MUST_ be `&gt;100` to ensure the value isnt preemptively resolved by the `ATHR::RequestAttribute` resolver.\n@[ADI::Register(tags: [{name: ATHR::Interface::TAG, priority: 110}])]\nstruct Multiply\n  include ATHR::Interface\n\n  configuration This\n\n  # :inherit:\n  def resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : Int32?\n    # Return early if the controller action parameter doesn't have the annotation.\n    return unless parameter.annotation_configurations.has? This\n\n    # Return early if the parameter type is not `Int32`.\n    return if parameter.type != Int32\n\n    request.attributes.get(parameter.name, Int32) * 10\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/{num}\")]\n  def multiply(\n    @[Multiply::This]\n    num : Int32\n  ) : Int32\n    num\n  end\nend\n\nATH.run\n\n# GET /10 # =&gt; 100\n</code></pre> <p>While this example is quite naive, this pattern is used as part of the <code>ATHR::RequestBody</code> to know if an object should be deserialized from the request body, or is intended be supplied some other way.</p>"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface--extra-data","title":"Extra Data","text":"<p>Another use case for this pattern is providing extra data on a per parameter basis. For example, say we wanted to allow customizing the multiplier instead of having it hard coded to <code>10</code>.</p> <p>In order to do this we can pass properties to the <code>.configuration</code> macro to define what we want to be configurable via the annotation. Next we can then use this value in our resolver, and when applying to a specific parameter:</p> <pre><code># The priority _MUST_ be `&gt;100` to ensure the value isnt preemptively resolved by the `ATHR::RequestAttribute` resolver.\n@[ADI::Register(tags: [{name: ATHR::Interface::TAG, priority: 110}])]\nstruct Multiply\n  include ATHR::Interface\n\n  configuration This, multiplier : Int32 = 10\n\n  # :inherit:\n  def resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : Int32?\n    # Return early if the controller action parameter doesn't have the annotation.\n    return unless (config = parameter.annotation_configurations[This]?)\n\n    # Return early if the parameter type is not `Int32`.\n    return if parameter.type != Int32\n\n    request.attributes.get(parameter.name, Int32) * config.multiplier\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/{num}\")]\n  def multiply(\n    @[Multiply::This(multiplier: 50)]\n    num : Int32\n  ) : Int32\n    num\n  end\nend\n\nATH.run\n\n# GET /10 # =&gt; 500\n</code></pre> <p>A more real-world example of this pattern is the <code>ATHR::Time</code> resolver which allows customizing the format and/or location that should be used to parse the datetime string.</p>"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface--handling-multiple-types","title":"Handling Multiple Types","text":"<p>When using an annotation to enable a particular resolver, it may be required to handle parameters of varying types. E.g. it should do one thing when enabled on an <code>Int32</code> parameter, while a different thing when applied to a <code>String</code> parameter. But both things are related enough to not warrant dedicated resolvers. Because the type of the parameter is stored within a generic type, it can be used to overload the <code>#resolve</code> method based on its type For example:</p> <pre><code># The priority _MUST_ be `&gt;100` to ensure the value isnt preemptively resolved by the `ATHR::RequestAttribute` resolver.\n@[ADI::Register(tags: [{name: ATHR::Interface::TAG, priority: 110}])]\nstruct MyResolver\n  include ATHR::Interface\n\n  configuration Enable\n\n  # :inherit:\n  def resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata(Int32)) : Int32?\n    return unless parameter.annotation_configurations.has? Enable\n\n    request.attributes.get(parameter.name, Int32) * 10\n  end\n\n  # :inherit:\n  def resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata(String)) : String?\n    return unless parameter.annotation_configurations.has? Enable\n\n    request.attributes.get(parameter.name, String).upcase\n  end\n\n  # :inherit:\n  #\n  # Fallback overload for types other than `Int32` and `String.\n  def resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : Nil\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/integer/{value}\")]\n  def integer(\n    @[MyResolver::Enable]\n    value : Int32\n  ) : Int32\n    value\n  end\n\n  @[ARTA::Get(\"/string/{value}\")]\n  def string(\n    @[MyResolver::Enable]\n    value : String\n  ) : String\n    value\n  end\nend\n\nATH.run\n\n# GET /integer/10  # =&gt; 100\n# GET /string/foo # =&gt; \"FOO\"\n</code></pre>"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface--free-vars","title":"Free Vars","text":"<p>If more precision is required, a free variable can be used to extract the type of the related parameter such that it can be used to generate the proper code.</p> <p>An example of this is how <code>ATHR::RequestBody</code> handles both <code>ASR::Serializable</code> and <code>JSON::Serializable</code> types via:</p> <pre><code>{% begin %}\n  {% if T.instance &lt;= ASR::Serializable %}\n    object = @serializer.deserialize T, body, :json\n  {% elsif T.instance &lt;= JSON::Serializable %}\n    object = T.from_json body\n  {% else %}\n    return\n  {% end %}\n{% end %}\n</code></pre> <p>This works well to make the compiler happy when previous methods are not enough.</p>"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface--strict-typing","title":"Strict Typing","text":"<p>In all of the examples so far, the resolvers could be applied to any parameter of any type and all of the logic to resolve a value would happen at runtime. In some cases a specific resolver may only support a single, or small subset of types. Such as how the <code>ATHR::RequestBody</code> resolver only allows <code>ASR::Serializable</code> or <code>JSON::Serializable</code> types. In this case, the <code>ATHR::Interface::Typed</code> module may be used to define the allowed parameter types.</p> <p>Warning</p> <p>Strict typing is ONLY supported when a configuration annotation is used to enable the resolver.</p> <pre><code>@[ADI::Register(tags: [{name: ATHR::Interface::TAG}])]\nstruct MyResolver\n  # Multiple types may also be supplied by providing it a comma separated list.\n  # If `nil` is a valid option, the `Nil` type should also be included.\n  include ATHR::Interface::Typed(String)\n\n  configuration Enable\n\n  # :inherit:\n  def resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : String?\n    return unless parameter.annotation_configurations.has? Enable\n\n    \"foo\"\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/integer\")]\n  def integer(\n    @[MyResolver::Enable]\n    value : Int32\n  ) : Int32\n    value\n  end\n\n  @[ARTA::Get(\"/string\")]\n  def string(\n    @[MyResolver::Enable]\n    value : String\n  ) : String\n    value\n  end\nend\n\nATH.run\n\n# Error: The annotation '@[MyResolver::Enable]' cannot be applied to 'ExampleController#integer:value : Int32'\n# since the 'MyResolver' resolver only supports parameters of type 'String'.\n</code></pre> <p>Since <code>MyResolver</code> was defined to only support <code>String</code> types, a compile time error is raised when its annotation is applied to a non <code>String</code> parameter. This feature pairs nicely with the free var section as it essentially allows scoping the possible types of <code>T</code> to the set of types defined as part of the module.</p> Direct including types <code>Athena::Framework::Controller::ValueResolvers::DefaultValue</code> <code>Athena::Framework::Controller::ValueResolvers::Enum</code> <code>Athena::Framework::Controller::ValueResolvers::Interface::Typed(*SupportedTypes)</code> <code>Athena::Framework::Controller::ValueResolvers::Request</code> <code>Athena::Framework::Controller::ValueResolvers::RequestAttribute</code> <code>Athena::Framework::Controller::ValueResolvers::Time</code> <code>Athena::Framework::Controller::ValueResolvers::UUID</code>"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface-constants","title":"Constants","text":""},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface::TAG","title":"<code>TAG = \"athena.controller.value_resolver\"</code>","text":"<p>The tag name for <code>ATHR::Interface</code> services.</p>"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface#resolve(request,parameter)","title":"abstract <code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata)</code>","text":"<p>Returns a value resolved from the provided request and parameter if possible, otherwise returns <code>nil</code> if no parameter could be resolved.</p> View source"},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface-macros","title":"Macros","text":""},{"location":"Framework/Controller/ValueResolvers/Interface/#Athena::Framework::Controller::ValueResolvers::Interface:configuration(name,*)","title":"<code>configuration(name, *args)</code>","text":"<p>Helper macro around <code>ACF.configuration_annotation</code> that allows defining resolver specific annotations. See the underlying macro and the configuration section for more information.</p> View source"},{"location":"Framework/Controller/ValueResolvers/Interface/Typed/","title":"Typed","text":""},{"location":"Framework/Controller/ValueResolvers/Interface/Typed/#Athena::Framework::Controller::ValueResolvers::Interface::Typed","title":"module <code>Athena::Framework::Controller::ValueResolvers::Interface::Typed(*SupportedTypes)</code>","text":"<p>Represents an <code>ATHR::Interface</code> that only supports a subset of types.</p> <p>See the strict typing section for more information.</p> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface</code> Direct including types <code>Athena::Framework::Controller::ValueResolvers::RequestBody</code>"},{"location":"Framework/Controller/ValueResolvers/Request/","title":"Request","text":""},{"location":"Framework/Controller/ValueResolvers/Request/#Athena::Framework::Controller::ValueResolvers::Request","title":"struct <code>Athena::Framework::Controller::ValueResolvers::Request</code> inherits <code>Struct</code>","text":"<p>Handles resolving a value for action parameters typed as <code>ATH::Request</code>.</p> <pre><code>@[ARTA::Get(\"/\")]\ndef get_request_path(request : ATH::Request) : String\n  request.path\nend\n</code></pre> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface</code>"},{"location":"Framework/Controller/ValueResolvers/Request/#Athena::Framework::Controller::ValueResolvers::Request-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ValueResolvers/Request/#Athena::Framework::Controller::ValueResolvers::Request.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/Request/#Athena::Framework::Controller::ValueResolvers::Request-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/Request/#Athena::Framework::Controller::ValueResolvers::Request#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/Request/#Athena::Framework::Controller::ValueResolvers::Request#resolve(request,parameter)","title":"<code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : ATH::Request | Nil</code>","text":"<p>Returns a value resolved from the provided request and parameter if possible, otherwise returns <code>nil</code> if no parameter could be resolved.</p> View source"},{"location":"Framework/Controller/ValueResolvers/RequestAttribute/","title":"RequestAttribute","text":""},{"location":"Framework/Controller/ValueResolvers/RequestAttribute/#Athena::Framework::Controller::ValueResolvers::RequestAttribute","title":"struct <code>Athena::Framework::Controller::ValueResolvers::RequestAttribute</code> inherits <code>Struct</code>","text":"<p>Handles resolving a value that is stored in the request's <code>ATH::Request#attributes</code>. This includes any path/query parameters, custom types values stored via an <code>AED::EventListenerInterface</code>, or extra <code>defaults</code> stored within the routing annotation.</p> <pre><code>@[ARTA::Get(\"/{id}\")]\ndef get_id(id : Int32) : Int32\n  id\nend\n</code></pre> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface</code>"},{"location":"Framework/Controller/ValueResolvers/RequestAttribute/#Athena::Framework::Controller::ValueResolvers::RequestAttribute-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ValueResolvers/RequestAttribute/#Athena::Framework::Controller::ValueResolvers::RequestAttribute.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/RequestAttribute/#Athena::Framework::Controller::ValueResolvers::RequestAttribute-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/RequestAttribute/#Athena::Framework::Controller::ValueResolvers::RequestAttribute#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/RequestAttribute/#Athena::Framework::Controller::ValueResolvers::RequestAttribute#resolve(request,parameter)","title":"<code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata)</code>","text":"<p>Returns a value resolved from the provided request and parameter if possible, otherwise returns <code>nil</code> if no parameter could be resolved.</p> View source"},{"location":"Framework/Controller/ValueResolvers/RequestBody/","title":"RequestBody","text":""},{"location":"Framework/Controller/ValueResolvers/RequestBody/#Athena::Framework::Controller::ValueResolvers::RequestBody","title":"struct <code>Athena::Framework::Controller::ValueResolvers::RequestBody</code> inherits <code>Struct</code>","text":"<p>Attempts to resolve the value of any parameter with the <code>ATHR::RequestBody::Extract</code> annotation by deserializing the request body into an object of the type of the related parameter. Also handles running any validations defined on it, if it is <code>AVD::Validatable</code>. Requires the type of the related parameter to include either <code>ASR::Serializable</code> or <code>JSON::Serializable</code>.</p> <pre><code>require \"athena\"\n\n# A type representing the structure of the request body.\nstruct UserCreate\n  # Include some modules to tell Athena this type can be deserialized and validated\n  include AVD::Validatable\n  include JSON::Serializable\n\n  # Assert the user's name is not blank.\n  @[Assert::NotBlank]\n  getter first_name : String\n\n  # Assert the user's name is not blank.\n  @[Assert::NotBlank]\n  getter last_name : String\n\n  # Assert the user's email is not blank and is a valid HTMl5 email.\n  @[Assert::NotBlank]\n  @[Assert::Email(:html5)]\n  getter email : String\nend\n\nclass UserController &lt; ATH::Controller\n  @[ARTA::Post(\"/user\")]\n  @[ATHA::View(status: :created)]\n  def new_user(\n    @[ATHR::RequestBody::Extract]\n    user_create : UserCreate\n  ) : UserCreate\n    # Use the provided UserCreate instance to create an actual User DB record.\n    # For purposes of this example, just return the instance.\n\n    user_create\n  end\nend\n\nATH.run\n</code></pre> <p>Making a request to the <code>/user</code> endpoint with the following payload:</p> <pre><code>{\n  \"first_name\": \"George\",\n  \"last_name\": \"\",\n  \"email\": \"dietrich.app\"\n}\n</code></pre> <p>Would return the response:</p> <pre><code>{\n  \"code\": 422,\n  \"message\": \"Validation failed\",\n  \"errors\": [\n    {\n      \"property\": \"last_name\",\n      \"message\": \"This value should not be blank.\",\n      \"code\": \"0d0c3254-3642-4cb0-9882-46ee5918e6e3\"\n    },\n    {\n      \"property\": \"email\",\n      \"message\": \"This value is not a valid email address.\",\n      \"code\": \"ad9d877d-9ad1-4dd7-b77b-e419934e5910\"\n    }\n  ]\n}\n</code></pre> <p>While a valid request would return this response body, with a 201 status code:</p> <pre><code>{\n  \"first_name\": \"George\",\n  \"last_name\": \"Dietrich\",\n  \"email\": \"george@dietrich.app\"\n}\n</code></pre> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface::Typed</code>"},{"location":"Framework/Controller/ValueResolvers/RequestBody/#Athena::Framework::Controller::ValueResolvers::RequestBody-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ValueResolvers/RequestBody/#Athena::Framework::Controller::ValueResolvers::RequestBody.new(serializer,validator)","title":"<code>.new(serializer : ASR::SerializerInterface, validator : AVD::Validator::ValidatorInterface)</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/RequestBody/#Athena::Framework::Controller::ValueResolvers::RequestBody-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/RequestBody/#Athena::Framework::Controller::ValueResolvers::RequestBody#resolve(request,parameter)","title":"<code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata(T)) : T | Nil forall T</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Controller/ValueResolvers/RequestBody/Extract/","title":"Extract","text":""},{"location":"Framework/Controller/ValueResolvers/RequestBody/Extract/#Athena::Framework::Controller::ValueResolvers::RequestBody::Extract","title":"annotation <code>Athena::Framework::Controller::ValueResolvers::RequestBody::Extract</code>","text":"<p>Enables the <code>ATHR::RequestBody</code> resolver for the parameter this annotation is applied to. See the related resolver documentation for more information.</p>"},{"location":"Framework/Controller/ValueResolvers/Time/","title":"Time","text":""},{"location":"Framework/Controller/ValueResolvers/Time/#Athena::Framework::Controller::ValueResolvers::Time","title":"struct <code>Athena::Framework::Controller::ValueResolvers::Time</code> inherits <code>Struct</code>","text":"<p>Attempts to parse a date(time) string into a <code>::Time</code> instance.</p> <p>Optionally allows specifying the format and location to use when parsing the string via the <code>ATHR::Time::Format</code> annotation. If no format is specified, defaults to RFC 3339. Defaults to <code>UTC</code> if no location is specified with the annotation.</p> <p>Raises an <code>ATH::Exceptions::BadRequest</code> if the date(time) string could not be parsed.</p> <p>Tip</p> <p>The format can be anything supported via Time::Format.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(path: \"/event/{start_time}/{end_time}\")]\n  def event(\n    @[ATHR::Time::Format(\"%F\", location: Time::Location.load(\"Europe/Berlin\"))]\n    start_time : Time,\n    end_time : Time\n  ) : Nil\n    start_time # =&gt; 2020-04-07 00:00:00.0 +02:00 Europe/Berlin\n    end_time   # =&gt; 2020-04-08 12:34:56.0 UTC\n  end\nend\n\nATH.run\n\n# GET /event/2020-04-07/2020-04-08T12:34:56Z\n</code></pre> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface</code>"},{"location":"Framework/Controller/ValueResolvers/Time/#Athena::Framework::Controller::ValueResolvers::Time-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ValueResolvers/Time/#Athena::Framework::Controller::ValueResolvers::Time.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/Time/#Athena::Framework::Controller::ValueResolvers::Time-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/Time/#Athena::Framework::Controller::ValueResolvers::Time#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/Time/#Athena::Framework::Controller::ValueResolvers::Time#resolve(request,parameter)","title":"<code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : ::Time | Nil</code>","text":"<p>Returns a value resolved from the provided request and parameter if possible, otherwise returns <code>nil</code> if no parameter could be resolved.</p> View source"},{"location":"Framework/Controller/ValueResolvers/Time/Format/","title":"Format","text":""},{"location":"Framework/Controller/ValueResolvers/Time/Format/#Athena::Framework::Controller::ValueResolvers::Time::Format","title":"annotation <code>Athena::Framework::Controller::ValueResolvers::Time::Format</code>","text":"<p>Allows customing the time format and/or location used to parse the string datetime as part of the <code>ATHR::Time</code> resolver. See the related resolver documentation for more information.</p>"},{"location":"Framework/Controller/ValueResolvers/UUID/","title":"UUID","text":""},{"location":"Framework/Controller/ValueResolvers/UUID/#Athena::Framework::Controller::ValueResolvers::UUID","title":"struct <code>Athena::Framework::Controller::ValueResolvers::UUID</code> inherits <code>Struct</code>","text":"<p>Handles resolving a UUID from a string value that is stored in the request's <code>ATH::Request#attributes</code>.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/uuid/{uuid}\")]\n  def get_uuid(uuid : UUID) : String\n    \"Version: #{uuid.version} - Variant: #{uuid.variant}\"\n  end\nend\n\nATH.run\n\n# GET /uuid/b115c7a5-0a13-47b4-b4ac-55b3e2686946 # =&gt; \"Version: V4 - Variant: RFC4122\"\n</code></pre> <p>Tip</p> <p>Checkout <code>ART::Requirement</code> for an easy way to restrict/validate the version of the UUID that is allowed.</p> Included modules <code>Athena::Framework::Controller::ValueResolvers::Interface</code>"},{"location":"Framework/Controller/ValueResolvers/UUID/#Athena::Framework::Controller::ValueResolvers::UUID-constructors","title":"Constructors","text":""},{"location":"Framework/Controller/ValueResolvers/UUID/#Athena::Framework::Controller::ValueResolvers::UUID.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/UUID/#Athena::Framework::Controller::ValueResolvers::UUID-methods","title":"Methods","text":""},{"location":"Framework/Controller/ValueResolvers/UUID/#Athena::Framework::Controller::ValueResolvers::UUID#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Controller/ValueResolvers/UUID/#Athena::Framework::Controller::ValueResolvers::UUID#resolve(request,parameter)","title":"<code>#resolve(request : ATH::Request, parameter : ATH::Controller::ParameterMetadata) : ::UUID | Nil</code>","text":"<p>Returns a value resolved from the provided request and parameter if possible, otherwise returns <code>nil</code> if no parameter could be resolved.</p> View source"},{"location":"Framework/ErrorRenderer/","title":"ErrorRenderer","text":""},{"location":"Framework/ErrorRenderer/#Athena::Framework::ErrorRenderer","title":"struct <code>Athena::Framework::ErrorRenderer</code> inherits <code>Struct</code>","text":"<p>The default <code>ATH::ErrorRendererInterface</code>, JSON serializes the exception.</p> Included modules <code>Athena::Framework::ErrorRendererInterface</code>"},{"location":"Framework/ErrorRenderer/#Athena::Framework::ErrorRenderer-constructors","title":"Constructors","text":""},{"location":"Framework/ErrorRenderer/#Athena::Framework::ErrorRenderer.new(debug)","title":"<code>.new(debug : Bool)</code>","text":"View source"},{"location":"Framework/ErrorRenderer/#Athena::Framework::ErrorRenderer-methods","title":"Methods","text":""},{"location":"Framework/ErrorRenderer/#Athena::Framework::ErrorRenderer#render(exception)","title":"<code>#render(exception : Exception) : ATH::Response</code>","text":"<p>Renders the given exception into an <code>ATH::Response</code>.</p> View source"},{"location":"Framework/ErrorRendererInterface/","title":"ErrorRendererInterface","text":""},{"location":"Framework/ErrorRendererInterface/#Athena::Framework::ErrorRendererInterface","title":"module <code>Athena::Framework::ErrorRendererInterface</code>","text":"<p>An <code>ATH::ErrorRendererInterface</code> converts an <code>::Exception</code> into an <code>ATH::Response</code>.</p> <p>By default, exceptions are JSON serialized via <code>ATH::ErrorRenderer</code>. However, it can be overridden to allow rendering errors differently, such as via HTML.</p> <pre><code>require \"athena\"\n\n# Alias this service to be used when the `ATH::ErrorRendererInterface` type is encountered.\n@[ADI::Register(alias: ATH::ErrorRendererInterface)]\nstruct Athena::Framework::CustomErrorRenderer\n  include Athena::Framework::ErrorRendererInterface\n\n  # :inherit:\n  def render(exception : ::Exception) : ATH::Response\n    if exception.is_a? ATH::Exceptions::HTTPException\n      status = exception.status\n      headers = exception.headers\n    else\n      status = HTTP::Status::INTERNAL_SERVER_ERROR\n      headers = HTTP::Headers.new\n    end\n\n    body = &lt;&lt;-HTML\n      &lt;html&gt;\n        &lt;head&gt;\n          &lt;title&gt;Uh oh&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n          &lt;h1&gt;Uh oh, something went wrong&lt;/h1&gt;\n        &lt;/body&gt;\n      &lt;/html&gt;\n    HTML\n\n    headers[\"content-type\"] = \"text/html\"\n\n    ATH::Response.new body, status, headers\n  end\nend\n\nclass TestController &lt; ATH::Controller\n  get \"/\" do\n    raise \"some error\"\n  end\nend\n\nATH.run\n\n# GET / # =&gt;   &lt;html&gt;&lt;head&gt;&lt;title&gt;Uh oh&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Uh oh, something went wrong&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre> Direct including types <code>Athena::Framework::ErrorRenderer</code>"},{"location":"Framework/ErrorRendererInterface/#Athena::Framework::ErrorRendererInterface-methods","title":"Methods","text":""},{"location":"Framework/ErrorRendererInterface/#Athena::Framework::ErrorRendererInterface#render(exception)","title":"abstract <code>#render(exception : Exception) : ATH::Response</code>","text":"<p>Renders the given exception into an <code>ATH::Response</code>.</p> View source"},{"location":"Framework/Events/","title":"Events","text":""},{"location":"Framework/Events/#Athena::Framework::Events","title":"module <code>Athena::Framework::Events</code>","text":"<p>The <code>AED::Event</code> that are emitted via <code>Athena::EventDispatcher</code> to handle a request during its life-cycle. Custom events can also be defined and dispatched within a controller, listener, or some other service.</p> <p>See each specific event and the external documentation for more information.</p>"},{"location":"Framework/Events/Action/","title":"Action","text":""},{"location":"Framework/Events/Action/#Athena::Framework::Events::Action","title":"class <code>Athena::Framework::Events::Action</code> inherits <code>Athena::EventDispatcher::Event</code>","text":"<p>Emitted after <code>ATH::Events::Request</code> and the related <code>ATH::Action</code> has been resolved, but before it has been executed.</p> <p>See the external documentation for more information.</p> Included modules <code>Athena::Framework::Events::RequestAware</code>"},{"location":"Framework/Events/Action/#Athena::Framework::Events::Action-constructors","title":"Constructors","text":""},{"location":"Framework/Events/Action/#Athena::Framework::Events::Action.new(request,action)","title":"<code>.new(request : ATH::Request, action : ATH::ActionBase)</code>","text":"View source"},{"location":"Framework/Events/Action/#Athena::Framework::Events::Action-methods","title":"Methods","text":""},{"location":"Framework/Events/Action/#Athena::Framework::Events::Action#action","title":"<code>#action : ATH::ActionBase</code>","text":"<p>The related <code>ATH::Action</code> that will be used to handle the current request.</p> View source"},{"location":"Framework/Events/Exception/","title":"Exception","text":""},{"location":"Framework/Events/Exception/#Athena::Framework::Events::Exception","title":"class <code>Athena::Framework::Events::Exception</code> inherits <code>Athena::EventDispatcher::Event</code>","text":"<p>Emitted when an exception occurs. See <code>ATH::Exceptions</code> for more information on how exception handling works in Athena.</p> <p>This event can be listened on to recover from errors or to modify the exception before it's rendered.</p> <p>See the external documentation for more information.</p> Included modules <code>Athena::Framework::Events::RequestAware</code> <code>Athena::Framework::Events::SettableResponse</code>"},{"location":"Framework/Events/Exception/#Athena::Framework::Events::Exception-constructors","title":"Constructors","text":""},{"location":"Framework/Events/Exception/#Athena::Framework::Events::Exception.new(request,exception)","title":"<code>.new(request : ATH::Request, exception : ::Exception)</code>","text":"View source"},{"location":"Framework/Events/Exception/#Athena::Framework::Events::Exception-methods","title":"Methods","text":""},{"location":"Framework/Events/Exception/#Athena::Framework::Events::Exception#exception","title":"<code>#exception : ::Exception</code>","text":"<p>The <code>::Exception</code> associated with <code>self</code>.</p> <p>Can be replaced by an <code>ATH::Listeners::Error</code>.</p> View source"},{"location":"Framework/Events/Exception/#Athena::Framework::Events::Exception#exception=(exception)","title":"<code>#exception=(exception : ::Exception)</code>","text":"<p>The <code>::Exception</code> associated with <code>self</code>.</p> <p>Can be replaced by an <code>ATH::Listeners::Error</code>.</p> View source"},{"location":"Framework/Events/Request/","title":"Request","text":""},{"location":"Framework/Events/Request/#Athena::Framework::Events::Request","title":"class <code>Athena::Framework::Events::Request</code> inherits <code>Athena::EventDispatcher::Event</code>","text":"<p>Emitted very early in the request's life-cycle; before the corresponding <code>ATH::Action</code> (if any) has been resolved.</p> <p>This event can be listened on in order to:</p> <ul> <li>Add information to the request, via its <code>ATH::Request#attributes</code></li> <li>Return a response immediately if there is enough information available; <code>ATH::Listeners::CORS</code> is an example of this</li> </ul> <p>Note</p> <p>If your listener logic requires that the the corresponding <code>ATH::Action</code> has been resolved, use <code>ATH::Events::Action</code> instead.</p> <p>See the external documentation for more information.</p> Included modules <code>Athena::Framework::Events::RequestAware</code> <code>Athena::Framework::Events::SettableResponse</code>"},{"location":"Framework/Events/RequestAware/","title":"RequestAware","text":""},{"location":"Framework/Events/RequestAware/#Athena::Framework::Events::RequestAware","title":"module <code>Athena::Framework::Events::RequestAware</code>","text":"<p>Represents an event that has access to the current request object.</p> Direct including types <code>Athena::Framework::Events::Action</code> <code>Athena::Framework::Events::Exception</code> <code>Athena::Framework::Events::Request</code> <code>Athena::Framework::Events::Response</code> <code>Athena::Framework::Events::Terminate</code> <code>Athena::Framework::Events::View</code>"},{"location":"Framework/Events/RequestAware/#Athena::Framework::Events::RequestAware-constructors","title":"Constructors","text":""},{"location":"Framework/Events/RequestAware/#Athena::Framework::Events::RequestAware.new(request)","title":"<code>.new(request : ATH::Request)</code>","text":"View source"},{"location":"Framework/Events/RequestAware/#Athena::Framework::Events::RequestAware-methods","title":"Methods","text":""},{"location":"Framework/Events/RequestAware/#Athena::Framework::Events::RequestAware#request","title":"<code>#request : ATH::Request</code>","text":"<p>Returns the current request object.</p> View source"},{"location":"Framework/Events/Response/","title":"Response","text":""},{"location":"Framework/Events/Response/#Athena::Framework::Events::Response","title":"class <code>Athena::Framework::Events::Response</code> inherits <code>Athena::EventDispatcher::Event</code>","text":"<p>Emitted after the route's action has been executed, but before the response has been returned to the client.</p> <p>This event can be listened on to modify the response object further before it is returned; such as adding headers/cookies, compressing the response, etc.</p> <p>See the external documentation for more information.</p> Included modules <code>Athena::Framework::Events::RequestAware</code>"},{"location":"Framework/Events/Response/#Athena::Framework::Events::Response-constructors","title":"Constructors","text":""},{"location":"Framework/Events/Response/#Athena::Framework::Events::Response.new(request,response)","title":"<code>.new(request : ATH::Request, response : ATH::Response)</code>","text":"View source"},{"location":"Framework/Events/Response/#Athena::Framework::Events::Response-methods","title":"Methods","text":""},{"location":"Framework/Events/Response/#Athena::Framework::Events::Response#response","title":"<code>#response : ATH::Response</code>","text":"<p>The response object.</p> View source"},{"location":"Framework/Events/Response/#Athena::Framework::Events::Response#response=(response)","title":"<code>#response=(response : ATH::Response)</code>","text":"<p>The response object.</p> View source"},{"location":"Framework/Events/SettableResponse/","title":"SettableResponse","text":""},{"location":"Framework/Events/SettableResponse/#Athena::Framework::Events::SettableResponse","title":"module <code>Athena::Framework::Events::SettableResponse</code>","text":"<p>Represents an event where an <code>ATH::Response</code> can be set on <code>self</code> to handle the original <code>ATH::Request</code>.</p> <p>Warning</p> <p>Once <code>#response=</code> is called, propagation stops; i.e. listeners with lower priority will not be executed.</p> Direct including types <code>Athena::Framework::Events::Exception</code> <code>Athena::Framework::Events::Request</code> <code>Athena::Framework::Events::View</code>"},{"location":"Framework/Events/SettableResponse/#Athena::Framework::Events::SettableResponse-methods","title":"Methods","text":""},{"location":"Framework/Events/SettableResponse/#Athena::Framework::Events::SettableResponse#response","title":"<code>#response : ATH::Response | ::Nil</code>","text":"<p>The response object, if any.</p> View source"},{"location":"Framework/Events/SettableResponse/#Athena::Framework::Events::SettableResponse#response=(response)","title":"<code>#response=(response : ATH::Response) : Nil</code>","text":"<p>Sets the response that will be returned for the current <code>ATH::Request</code> being handled.</p> <p>Propagation of <code>self</code> will stop once <code>#response=</code> is called.</p> View source"},{"location":"Framework/Events/Terminate/","title":"Terminate","text":""},{"location":"Framework/Events/Terminate/#Athena::Framework::Events::Terminate","title":"class <code>Athena::Framework::Events::Terminate</code> inherits <code>Athena::EventDispatcher::Event</code>","text":"<p>Emitted very late in the request's life-cycle, after the response has been sent.</p> <p>This event can be listened on to perform tasks that are not required to finish before the response is sent; such as sending emails, or other \"heavy\" tasks.</p> <p>See the external documentation for more information.</p> Included modules <code>Athena::Framework::Events::RequestAware</code>"},{"location":"Framework/Events/Terminate/#Athena::Framework::Events::Terminate-constructors","title":"Constructors","text":""},{"location":"Framework/Events/Terminate/#Athena::Framework::Events::Terminate.new(request,response)","title":"<code>.new(request : ATH::Request, response : ATH::Response)</code>","text":"View source"},{"location":"Framework/Events/Terminate/#Athena::Framework::Events::Terminate-methods","title":"Methods","text":""},{"location":"Framework/Events/Terminate/#Athena::Framework::Events::Terminate#response","title":"<code>#response : ATH::Response</code>","text":"<p>The response object.</p> View source"},{"location":"Framework/Events/View/","title":"View","text":""},{"location":"Framework/Events/View/#Athena::Framework::Events::View","title":"class <code>Athena::Framework::Events::View</code> inherits <code>Athena::EventDispatcher::Event</code>","text":"<p>Emitted after the route's action has been executed, but only if it does NOT return an <code>ATH::Response</code>.</p> <p>This event can be listened on to handle converting a non <code>ATH::Response</code> into an <code>ATH::Response</code>.</p> <p>See <code>ATH::Listeners::View</code> and the external documentation for more information.</p> Included modules <code>Athena::Framework::Events::RequestAware</code> <code>Athena::Framework::Events::SettableResponse</code>"},{"location":"Framework/Events/View/#Athena::Framework::Events::View-constructors","title":"Constructors","text":""},{"location":"Framework/Events/View/#Athena::Framework::Events::View.new(request,action_result)","title":"<code>.new(request : ATH::Request, action_result : _)</code>","text":"View source"},{"location":"Framework/Events/View/#Athena::Framework::Events::View-methods","title":"Methods","text":""},{"location":"Framework/Events/View/#Athena::Framework::Events::View#action_result","title":"<code>#action_result</code>","text":"<p>Returns the value returned from the related controller action.</p> View source"},{"location":"Framework/Events/View/#Athena::Framework::Events::View#action_result=(value)","title":"<code>#action_result=(value : _) : Nil</code>","text":"<p>Overrides the return value of the related controller action.</p> <p>Can be used to mutate the controller action's returned value within a listener context; such as for pagination.</p> View source"},{"location":"Framework/Exceptions/","title":"Exceptions","text":""},{"location":"Framework/Exceptions/#Athena::Framework::Exceptions","title":"module <code>Athena::Framework::Exceptions</code>","text":"<p>Exception handling in Athena is similar to exception handling in any Crystal program, with the addition of a new unique exception type, <code>ATH::Exceptions::HTTPException</code>.</p> <p>When an exception is raised, Athena emits the <code>ATH::Events::Exception</code> event to allow an opportunity for it to be handled. If the exception goes unhandled, i.e. no listener set an <code>ATH::Response</code> on the event, then the request is finished and the exception is reraised. Otherwise, that response is returned, setting the status and merging the headers on the exceptions if it is an <code>ATH::Exceptions::HTTPException</code>. See <code>ATH::Listeners::Error</code> and <code>ATH::ErrorRendererInterface</code> for more information on how exceptions are handled by default.</p> <p>To provide the best response to the client, non <code>ATH::Exceptions::HTTPException</code> should be rescued and converted into a corresponding <code>ATH::Exceptions::HTTPException</code>. Custom HTTP errors can also be defined by inheriting from <code>ATH::Exceptions::HTTPException</code> or a child type. A use case for this could be allowing for additional data/context to be included within the exception that ultimately could be used in a <code>ATH::Events::Exception</code> listener.</p>"},{"location":"Framework/Exceptions/BadGateway/","title":"BadGateway","text":""},{"location":"Framework/Exceptions/BadGateway/#Athena::Framework::Exceptions::BadGateway","title":"class <code>Athena::Framework::Exceptions::BadGateway</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/BadGateway/#Athena::Framework::Exceptions::BadGateway-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/BadGateway/#Athena::Framework::Exceptions::BadGateway.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/BadRequest/","title":"BadRequest","text":""},{"location":"Framework/Exceptions/BadRequest/#Athena::Framework::Exceptions::BadRequest","title":"class <code>Athena::Framework::Exceptions::BadRequest</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/BadRequest/#Athena::Framework::Exceptions::BadRequest-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/BadRequest/#Athena::Framework::Exceptions::BadRequest.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/Conflict/","title":"Conflict","text":""},{"location":"Framework/Exceptions/Conflict/#Athena::Framework::Exceptions::Conflict","title":"class <code>Athena::Framework::Exceptions::Conflict</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/Conflict/#Athena::Framework::Exceptions::Conflict-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/Conflict/#Athena::Framework::Exceptions::Conflict.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/Forbidden/","title":"Forbidden","text":""},{"location":"Framework/Exceptions/Forbidden/#Athena::Framework::Exceptions::Forbidden","title":"class <code>Athena::Framework::Exceptions::Forbidden</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/Forbidden/#Athena::Framework::Exceptions::Forbidden-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/Forbidden/#Athena::Framework::Exceptions::Forbidden.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/Gone/","title":"Gone","text":""},{"location":"Framework/Exceptions/Gone/#Athena::Framework::Exceptions::Gone","title":"class <code>Athena::Framework::Exceptions::Gone</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/Gone/#Athena::Framework::Exceptions::Gone-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/Gone/#Athena::Framework::Exceptions::Gone.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/HTTPException/","title":"HTTPException","text":""},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException","title":"class <code>Athena::Framework::Exceptions::HTTPException</code> inherits <code>Exception</code>","text":"<p>Represents an HTTP error.</p> <p>Each child represents a specific HTTP error with the associated status code. Also optionally allows adding headers to the resulting response.</p> <p>Can be used directly/inherited from to represent non-typical HTTP errors/codes.</p> Direct known subclasses <code>Athena::Framework::Exceptions::BadGateway</code> <code>Athena::Framework::Exceptions::BadRequest</code> <code>Athena::Framework::Exceptions::Conflict</code> <code>Athena::Framework::Exceptions::Forbidden</code> <code>Athena::Framework::Exceptions::Gone</code> <code>Athena::Framework::Exceptions::LengthRequired</code> <code>Athena::Framework::Exceptions::MethodNotAllowed</code> <code>Athena::Framework::Exceptions::NotAcceptable</code> <code>Athena::Framework::Exceptions::NotFound</code> <code>Athena::Framework::Exceptions::NotImplemented</code> <code>Athena::Framework::Exceptions::PreconditionFailed</code> <code>Athena::Framework::Exceptions::ServiceUnavailable</code> <code>Athena::Framework::Exceptions::TooManyRequests</code> <code>Athena::Framework::Exceptions::Unauthorized</code> <code>Athena::Framework::Exceptions::UnprocessableEntity</code> <code>Athena::Framework::Exceptions::UnsupportedMediaType</code>"},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException.new(status,message,cause,headers)","title":"<code>.new(status : HTTP::Status, message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"<p>Instantiates <code>self</code> with the given status and message.</p> <p>Optionally includes cause, and headers.</p> View source"},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException.new(status_code,message,cause,headers)","title":"<code>.new(status_code : Int32, message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"<p>Instantiates <code>self</code> with the given status_code and message.</p> <p>Optionally includes cause, and headers.</p> View source"},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException-methods","title":"Methods","text":""},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException#headers","title":"<code>#headers : HTTP::Headers</code>","text":"<p>Any HTTP response headers associated with <code>self</code>.</p> <p>Some HTTP errors use response headers to give additional information about <code>self</code>.</p> View source"},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException#headers=(headers)","title":"<code>#headers=(headers : HTTP::Headers)</code>","text":"<p>Any HTTP response headers associated with <code>self</code>.</p> <p>Some HTTP errors use response headers to give additional information about <code>self</code>.</p> View source"},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException#status","title":"<code>#status : HTTP::Status</code>","text":"<p>The <code>HTTP::Status</code> associated with <code>self</code>.</p> View source"},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException#status_code","title":"<code>#status_code : Int32</code>","text":"<p>Returns the HTTP status code of <code>#status</code>.</p> View source"},{"location":"Framework/Exceptions/HTTPException/#Athena::Framework::Exceptions::HTTPException#to_json(builder)","title":"<code>#to_json(builder : JSON::Builder) : Nil</code>","text":"<p>Serializes <code>self</code> to JSON in the format of <code>{\"code\":400,\"message\":\"Exception message\"}</code></p> View source"},{"location":"Framework/Exceptions/InvalidParameter/","title":"InvalidParameter","text":""},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter","title":"class <code>Athena::Framework::Exceptions::InvalidParameter</code> inherits <code>Athena::Framework::Exceptions::UnprocessableEntity</code>","text":""},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter.new(parameter,violations,message,cause,headers)","title":"<code>.new(parameter : ATH::Params::ParamInterface, violations : AVD::Violation::ConstraintViolationListInterface, message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter.with_violations(parameter,violations)","title":"<code>.with_violations(parameter : ATH::Params::ParamInterface, violations : AVD::Violation::ConstraintViolationListInterface) : self</code>","text":"View source"},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter-methods","title":"Methods","text":""},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter#parameter","title":"<code>#parameter : ATH::Params::ParamInterface</code>","text":"View source"},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter#to_json(builder)","title":"<code>#to_json(builder : JSON::Builder) : Nil</code>","text":"<p>Serializes <code>self</code> to JSON in the format of <code>{\"code\":400,\"message\":\"Exception message\"}</code></p> View source"},{"location":"Framework/Exceptions/InvalidParameter/#Athena::Framework::Exceptions::InvalidParameter#violations","title":"<code>#violations : AVD::Violation::ConstraintViolationListInterface</code>","text":"View source"},{"location":"Framework/Exceptions/LengthRequired/","title":"LengthRequired","text":""},{"location":"Framework/Exceptions/LengthRequired/#Athena::Framework::Exceptions::LengthRequired","title":"class <code>Athena::Framework::Exceptions::LengthRequired</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/LengthRequired/#Athena::Framework::Exceptions::LengthRequired-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/LengthRequired/#Athena::Framework::Exceptions::LengthRequired.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/MethodNotAllowed/","title":"MethodNotAllowed","text":""},{"location":"Framework/Exceptions/MethodNotAllowed/#Athena::Framework::Exceptions::MethodNotAllowed","title":"class <code>Athena::Framework::Exceptions::MethodNotAllowed</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/MethodNotAllowed/#Athena::Framework::Exceptions::MethodNotAllowed-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/MethodNotAllowed/#Athena::Framework::Exceptions::MethodNotAllowed.new(allow,message,cause,headers)","title":"<code>.new(allow : Array(String), message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/NotAcceptable/","title":"NotAcceptable","text":""},{"location":"Framework/Exceptions/NotAcceptable/#Athena::Framework::Exceptions::NotAcceptable","title":"class <code>Athena::Framework::Exceptions::NotAcceptable</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/NotAcceptable/#Athena::Framework::Exceptions::NotAcceptable-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/NotAcceptable/#Athena::Framework::Exceptions::NotAcceptable.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/NotFound/","title":"NotFound","text":""},{"location":"Framework/Exceptions/NotFound/#Athena::Framework::Exceptions::NotFound","title":"class <code>Athena::Framework::Exceptions::NotFound</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/NotFound/#Athena::Framework::Exceptions::NotFound-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/NotFound/#Athena::Framework::Exceptions::NotFound.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/NotImplemented/","title":"NotImplemented","text":""},{"location":"Framework/Exceptions/NotImplemented/#Athena::Framework::Exceptions::NotImplemented","title":"class <code>Athena::Framework::Exceptions::NotImplemented</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/NotImplemented/#Athena::Framework::Exceptions::NotImplemented-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/NotImplemented/#Athena::Framework::Exceptions::NotImplemented.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/PreconditionFailed/","title":"PreconditionFailed","text":""},{"location":"Framework/Exceptions/PreconditionFailed/#Athena::Framework::Exceptions::PreconditionFailed","title":"class <code>Athena::Framework::Exceptions::PreconditionFailed</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/PreconditionFailed/#Athena::Framework::Exceptions::PreconditionFailed-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/PreconditionFailed/#Athena::Framework::Exceptions::PreconditionFailed.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/ServiceUnavailable/","title":"ServiceUnavailable","text":""},{"location":"Framework/Exceptions/ServiceUnavailable/#Athena::Framework::Exceptions::ServiceUnavailable","title":"class <code>Athena::Framework::Exceptions::ServiceUnavailable</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/ServiceUnavailable/#Athena::Framework::Exceptions::ServiceUnavailable-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/ServiceUnavailable/#Athena::Framework::Exceptions::ServiceUnavailable.new(message,retry_after,cause,headers)","title":"<code>.new(message : String, retry_after : Number | String | Nil = nil, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"<p>See <code>Athena::Framework::Exceptions::HTTPException#new</code>.</p> <p>If retry_after is provided, adds a <code>retry-after</code> header that represents the number of seconds or HTTP-date after which the request may be retried.</p> View source"},{"location":"Framework/Exceptions/StopFormatListener/","title":"StopFormatListener","text":""},{"location":"Framework/Exceptions/StopFormatListener/#Athena::Framework::Exceptions::StopFormatListener","title":"class <code>Athena::Framework::Exceptions::StopFormatListener</code> inherits <code>Exception</code>","text":""},{"location":"Framework/Exceptions/TooManyRequests/","title":"TooManyRequests","text":""},{"location":"Framework/Exceptions/TooManyRequests/#Athena::Framework::Exceptions::TooManyRequests","title":"class <code>Athena::Framework::Exceptions::TooManyRequests</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/TooManyRequests/#Athena::Framework::Exceptions::TooManyRequests-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/TooManyRequests/#Athena::Framework::Exceptions::TooManyRequests.new(message,retry_after,cause,headers)","title":"<code>.new(message : String, retry_after : Number | String | Nil = nil, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"<p>See <code>Athena::Framework::Exceptions::HTTPException#new</code>.</p> <p>If retry_after is provided, adds a <code>retry-after</code> header that represents the number of seconds or HTTP-date after which the request may be retried.</p> View source"},{"location":"Framework/Exceptions/Unauthorized/","title":"Unauthorized","text":""},{"location":"Framework/Exceptions/Unauthorized/#Athena::Framework::Exceptions::Unauthorized","title":"class <code>Athena::Framework::Exceptions::Unauthorized</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/Unauthorized/#Athena::Framework::Exceptions::Unauthorized-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/Unauthorized/#Athena::Framework::Exceptions::Unauthorized.new(message,challenge,cause,headers)","title":"<code>.new(message : String, challenge : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"<p>See <code>Athena::Framework::Exceptions::HTTPException#new</code>.</p> <p>Includes a <code>www-authenticate</code> header with the provided challenge.</p> View source"},{"location":"Framework/Exceptions/UnprocessableEntity/","title":"UnprocessableEntity","text":""},{"location":"Framework/Exceptions/UnprocessableEntity/#Athena::Framework::Exceptions::UnprocessableEntity","title":"class <code>Athena::Framework::Exceptions::UnprocessableEntity</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":"Direct known subclasses <code>Athena::Framework::Exceptions::InvalidParameter</code> <code>Athena::Validator::Exceptions::ValidationFailed</code>"},{"location":"Framework/Exceptions/UnprocessableEntity/#Athena::Framework::Exceptions::UnprocessableEntity-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/UnprocessableEntity/#Athena::Framework::Exceptions::UnprocessableEntity.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/Exceptions/UnsupportedMediaType/","title":"UnsupportedMediaType","text":""},{"location":"Framework/Exceptions/UnsupportedMediaType/#Athena::Framework::Exceptions::UnsupportedMediaType","title":"class <code>Athena::Framework::Exceptions::UnsupportedMediaType</code> inherits <code>Athena::Framework::Exceptions::HTTPException</code>","text":""},{"location":"Framework/Exceptions/UnsupportedMediaType/#Athena::Framework::Exceptions::UnsupportedMediaType-constructors","title":"Constructors","text":""},{"location":"Framework/Exceptions/UnsupportedMediaType/#Athena::Framework::Exceptions::UnsupportedMediaType.new(message,cause,headers)","title":"<code>.new(message : String, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/HeaderUtils/","title":"HeaderUtils","text":""},{"location":"Framework/HeaderUtils/#Athena::Framework::HeaderUtils","title":"module <code>Athena::Framework::HeaderUtils</code>","text":"<p>Includes various <code>HTTP</code> header utility methods.</p>"},{"location":"Framework/HeaderUtils/#Athena::Framework::HeaderUtils-class-methods","title":"Class methods","text":""},{"location":"Framework/HeaderUtils/#Athena::Framework::HeaderUtils.make_disposition(disposition,filename,fallback_filename)","title":"<code>.make_disposition(disposition : ATH::BinaryFileResponse::ContentDisposition, filename : String, fallback_filename : String | Nil = nil) : String</code>","text":"<p>Generates a <code>HTTP</code> content-disposition header value with the provided disposition and filename.</p> <p>If filename contains non <code>ASCII</code> characters, a sanitized version will be used as part of the <code>filename</code> directive, while an encoded version of it will be used as the <code>filename*</code> directive. The fallback_filename argument can be used to customize the <code>filename</code> directive value in this case.</p> <pre><code>ATH::HeaderUtils.make_disposition :attachment, \"download.txt\"         # =&gt; attachment; filename=\"download.txt\"\nATH::HeaderUtils.make_disposition :attachment, \"f\u00f6\u00f6.html\"             # =&gt; attachment; filename=\"f__.html\"; filename*=UTF-8''f%C3%B6%C3%B6.html\nATH::HeaderUtils.make_disposition :attachment, \"f\u00f6\u00f6.html\", \"foo.html\" # =&gt; attachment; filename=\"foo.html\"; filename*=UTF-8''f%C3%B6%C3%B6.html\n</code></pre> <p>This method can be used to enable downloads of dynamically generated files. I.e. that can't be handled via a static file event listener.</p> <pre><code>ATH::Response.new(\n  file_contents,\n  headers: HTTP::Headers{\"content-disposition\" =&gt; ATH::HeaderUtils.make_disposition(:attachment, \"foo.pdf\")}\n)\n</code></pre> <p>Tip</p> <p>Checkout the external documentation for an example of how to serve static files.</p> View source"},{"location":"Framework/HeaderUtils/#Athena::Framework::HeaderUtils.parse(header)","title":"<code>.parse(header : String) : Hash(String, String | Bool)</code>","text":"View source"},{"location":"Framework/HeaderUtils/#Athena::Framework::HeaderUtils.to_string(io,collection,separator)","title":"<code>.to_string(io : IO, collection : Hash, separator : String | Char) : Nil</code>","text":"<p>Joins a key/value pair collection for use within an <code>HTTP</code> header; writing the data to the provided io.</p> <p>The key and value of each entry is joined with <code>=</code>, quoting the value if needed. All entries are then joined by the provided separator.</p> View source"},{"location":"Framework/HeaderUtils/#Athena::Framework::HeaderUtils.to_string(collection,separator)","title":"<code>.to_string(collection : Hash, separator : String | Char) : String</code>","text":"<p>Joins a key/value pair collection into a string for use within an <code>HTTP</code> header.</p> <p>The key and value of each entry is joined with <code>=</code>, quoting the value if needed. All entries are then joined by the provided separator.</p> <pre><code>ATH::HeaderUtils.to_string({\"foo\" =&gt; \"bar\", \"key\" =&gt; true}, \", \")          # =&gt; foo=bar, key\nATH::HeaderUtils.to_string({\"foo\" =&gt; %q(\"foo\\ bar\"), \"key\" =&gt; true}, \", \") # =&gt; foo=\\\"foo\\\\\\ bar\\\", key\n</code></pre> View source"},{"location":"Framework/HeaderUtils/#Athena::Framework::HeaderUtils.to_string(separator,**)","title":"<code>.to_string(separator : String | Char, **parts) : String</code>","text":"<p>Joins the provided key/value parts into a string for use within an <code>HTTP</code> header.</p> <p>The key and value of each entry is joined with <code>=</code>, quoting the value if needed. All entries are then joined by the provided separator.</p> View source"},{"location":"Framework/Listeners/","title":"Listeners","text":""},{"location":"Framework/Listeners/#Athena::Framework::Listeners","title":"module <code>Athena::Framework::Listeners</code>","text":"<p>The <code>AED::EventListenerInterface</code> that act upon <code>ATH::Events</code> to handle a request. Custom listeners can also be defined, see <code>AED::EventListenerInterface</code>.</p> <p>See each listener and the external documentation for more information.</p>"},{"location":"Framework/Listeners/CORS/","title":"CORS","text":""},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS","title":"struct <code>Athena::Framework::Listeners::CORS</code> inherits <code>Struct</code>","text":"<p>Supports Cross-Origin Resource Sharing (CORS) requests.</p> <p>Handles CORS preflight <code>OPTIONS</code> requests as well as adding CORS headers to each response. See <code>ATH::Config::CORS</code> for information on configuring the listener.</p> <p>Tip</p> <p>Set your Log::Severity to <code>TRACE</code> to help debug the listener.</p> Included modules <code>Athena::EventDispatcher::EventListenerInterface</code>"},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS-constants","title":"Constants","text":""},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS::SAFELISTED_HEADERS","title":"<code>SAFELISTED_HEADERS = [\"accept\", \"accept-language\", \"content-language\", \"content-type\", \"origin\"]</code>","text":"<p>The CORS-safelisted request-headers.</p>"},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS::SAFELISTED_METHODS","title":"<code>SAFELISTED_METHODS = [\"GET\", \"POST\", \"HEAD\"]</code>","text":"<p>The CORS-safelisted methods.</p>"},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS-constructors","title":"Constructors","text":""},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS.new(config)","title":"<code>.new(config : ATH::Config::CORS | Nil)</code>","text":"View source"},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS-methods","title":"Methods","text":""},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS#on_request(event)","title":"<code>#on_request(event : ATH::Events::Request) : Nil</code>","text":"View source"},{"location":"Framework/Listeners/CORS/#Athena::Framework::Listeners::CORS#on_response(event)","title":"<code>#on_response(event : ATH::Events::Response) : Nil</code>","text":"View source"},{"location":"Framework/Listeners/Error/","title":"Error","text":""},{"location":"Framework/Listeners/Error/#Athena::Framework::Listeners::Error","title":"struct <code>Athena::Framework::Listeners::Error</code> inherits <code>Struct</code>","text":"<p>Handles an exception by converting it into an <code>ATH::Response</code> via an <code>ATH::ErrorRendererInterface</code>.</p> <p>This listener defines a <code>log_exception</code> protected method that determines how the exception gets logged. Non <code>ATH::Exceptions::HTTPException</code>s and server errors are logged as errors. Validation errors (<code>ATH::Exceptions::UnprocessableEntity</code>) are logged as notice. Everything else is logged as a warning. The method can be redefined if different logic is desired.</p> <pre><code>struct ATH::Listeners::Error\n  # :inherit:\n  protected def log_exception(exception : Exception, &amp; : -&gt; String) : Nil\n    # Don't log anything if an exception is some specific type.\n    return if exception.is_a? MyException\n\n    # Exception types could also include modules to act as interfaces to determine their level, E.g. `include NoticeException`.\n    if exception.is_a? NoticeException\n      Log.notice(exception: exception) { yield }\n      return\n    end\n\n    # Otherwise fallback to the default implementation.\n    previous_def\n  end\nend\n</code></pre> Included modules <code>Athena::EventDispatcher::EventListenerInterface</code>"},{"location":"Framework/Listeners/Error/#Athena::Framework::Listeners::Error-constructors","title":"Constructors","text":""},{"location":"Framework/Listeners/Error/#Athena::Framework::Listeners::Error.new(error_renderer)","title":"<code>.new(error_renderer : ATH::ErrorRendererInterface)</code>","text":"View source"},{"location":"Framework/Listeners/Error/#Athena::Framework::Listeners::Error-methods","title":"Methods","text":""},{"location":"Framework/Listeners/Error/#Athena::Framework::Listeners::Error#on_exception(event)","title":"<code>#on_exception(event : ATH::Events::Exception) : Nil</code>","text":"View source"},{"location":"Framework/Listeners/Format/","title":"Format","text":""},{"location":"Framework/Listeners/Format/#Athena::Framework::Listeners::Format","title":"struct <code>Athena::Framework::Listeners::Format</code> inherits <code>Struct</code>","text":"<p>Attempts to determine the best format for the current request based on its Accept <code>HTTP</code> header and the format priority configuration.</p> <p><code>ATH::Request::FORMATS</code> is used to determine the related format from the request's <code>MIME</code> type.</p> <p>See the negotiation component for more information.</p> Included modules <code>Athena::EventDispatcher::EventListenerInterface</code>"},{"location":"Framework/Listeners/Format/#Athena::Framework::Listeners::Format-constructors","title":"Constructors","text":""},{"location":"Framework/Listeners/Format/#Athena::Framework::Listeners::Format.new(config,format_negotiator)","title":"<code>.new(config : ATH::Config::ContentNegotiation | Nil, format_negotiator : ATH::View::FormatNegotiator)</code>","text":"View source"},{"location":"Framework/Listeners/Format/#Athena::Framework::Listeners::Format-methods","title":"Methods","text":""},{"location":"Framework/Listeners/Format/#Athena::Framework::Listeners::Format#on_request(event)","title":"<code>#on_request(event : ATH::Events::Request) : Nil</code>","text":"View source"},{"location":"Framework/Listeners/ParamFetcher/","title":"ParamFetcher","text":""},{"location":"Framework/Listeners/ParamFetcher/#Athena::Framework::Listeners::ParamFetcher","title":"struct <code>Athena::Framework::Listeners::ParamFetcher</code> inherits <code>Struct</code>","text":"Included modules <code>Athena::EventDispatcher::EventListenerInterface</code>"},{"location":"Framework/Listeners/ParamFetcher/#Athena::Framework::Listeners::ParamFetcher-constructors","title":"Constructors","text":""},{"location":"Framework/Listeners/ParamFetcher/#Athena::Framework::Listeners::ParamFetcher.new(param_fetcher)","title":"<code>.new(param_fetcher : ATH::Params::ParamFetcherInterface)</code>","text":"View source"},{"location":"Framework/Listeners/ParamFetcher/#Athena::Framework::Listeners::ParamFetcher-methods","title":"Methods","text":""},{"location":"Framework/Listeners/ParamFetcher/#Athena::Framework::Listeners::ParamFetcher#on_action(event)","title":"<code>#on_action(event : ATH::Events::Action) : Nil</code>","text":"View source"},{"location":"Framework/Listeners/Routing/","title":"Routing","text":""},{"location":"Framework/Listeners/Routing/#Athena::Framework::Listeners::Routing","title":"struct <code>Athena::Framework::Listeners::Routing</code> inherits <code>Struct</code>","text":"<p>Sets the related <code>ATH::Action</code> on the current request via an <code>ART::RequestMatcherInterface</code>.</p> Included modules <code>Athena::EventDispatcher::EventListenerInterface</code>"},{"location":"Framework/Listeners/Routing/#Athena::Framework::Listeners::Routing-constructors","title":"Constructors","text":""},{"location":"Framework/Listeners/Routing/#Athena::Framework::Listeners::Routing.new(matcher,request_store,request_context)","title":"<code>.new(matcher : ART::Matcher::URLMatcherInterface | ART::Matcher::RequestMatcherInterface, request_store : ATH::RequestStore, request_context : ART::RequestContext | Nil = nil)</code>","text":"View source"},{"location":"Framework/Listeners/Routing/#Athena::Framework::Listeners::Routing-methods","title":"Methods","text":""},{"location":"Framework/Listeners/Routing/#Athena::Framework::Listeners::Routing#on_request(event)","title":"<code>#on_request(event : ATH::Events::Request) : Nil</code>","text":"View source"},{"location":"Framework/Listeners/View/","title":"View","text":""},{"location":"Framework/Listeners/View/#Athena::Framework::Listeners::View","title":"struct <code>Athena::Framework::Listeners::View</code> inherits <code>Struct</code>","text":"<p>Listens on the <code>ATH::Events::View</code> event to convert a non <code>ATH::Response</code> into an <code>ATH::Response</code>. Allows creating format agnostic controllers by allowing them to return format agnostic data that is later used to render the content in the expected format.</p> <p>See the negotiation component for more information.</p> Included modules <code>Athena::EventDispatcher::EventListenerInterface</code>"},{"location":"Framework/Listeners/View/#Athena::Framework::Listeners::View-constructors","title":"Constructors","text":""},{"location":"Framework/Listeners/View/#Athena::Framework::Listeners::View.new(view_handler)","title":"<code>.new(view_handler : ATH::View::ViewHandlerInterface)</code>","text":"View source"},{"location":"Framework/Listeners/View/#Athena::Framework::Listeners::View-methods","title":"Methods","text":""},{"location":"Framework/Listeners/View/#Athena::Framework::Listeners::View#on_view(event)","title":"<code>#on_view(event : ATH::Events::View) : Nil</code>","text":"View source"},{"location":"Framework/ParameterBag/","title":"ParameterBag","text":""},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag","title":"struct <code>Athena::Framework::ParameterBag</code> inherits <code>Struct</code>","text":"<p>A container for storing key/value pairs. Can be used to store arbitrary data within the context of a request. It can be accessed via <code>ATH::Request#attributes</code>.</p>"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag--example","title":"Example","text":"<p>For example, an artbirary value can be stored in the attributes, and later provided as an action argument.</p> <pre><code>require \"athena\"\n\n# Define a request listener to add our value before the action is executed.\n@[ADI::Register]\nstruct TestListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def on_request(event : ATH::Events::Request) : Nil\n    # Store our value within the request's attributes, restricted to a `String`.\n    event.request.attributes.set \"my_arg\", \"foo\", String\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  # Define an action parameter with the same name of the parameter stored in attributes.\n  #\n  # The argument to pass is resolved via `ATHR::RequestAttribute`.\n  get \"/\", my_arg : String do\n    my_arg\n  end\nend\n\nATH.run\n\n# GET / # =&gt; \"foo\"\n</code></pre>"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag-constructors","title":"Constructors","text":""},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag-methods","title":"Methods","text":""},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Bool.class) : Bool</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Bool</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : String.class) : String</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>String</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Float32.class) : Float32</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Float32</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Float64.class) : Float64</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Float64</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Int128.class) : Int128</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int128</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Int16.class) : Int16</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int16</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Int32.class) : Int32</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int32</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Int64.class) : Int64</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int64</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : Int8.class) : Int8</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int8</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : UInt128.class) : UInt128</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt128</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : UInt16.class) : UInt16</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt16</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : UInt32.class) : UInt32</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt32</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : UInt64.class) : UInt64</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt64</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,_type)","title":"<code>#get(name : String, _type : UInt8.class) : UInt8</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt8</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name,type)","title":"<code>#get(name : String, type : T.class) : T forall T</code>","text":"<p>Returns the value of the parameter with the provided name, casted to the provided type.</p> <p>Raises a <code>KeyError</code> if no parameter with that name exists.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get(name)","title":"<code>#get(name : String)</code>","text":"<p>Returns the value of the parameter with the provided name.</p> <p>Raises a <code>KeyError</code> if no parameter with that name exists.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Bool | ::Nil).class) : Bool | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Bool</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (String | ::Nil).class) : String | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>String</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Float32 | ::Nil).class) : Float32 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Float32</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Float64 | ::Nil).class) : Float64 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Float64</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Int128 | ::Nil).class) : Int128 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int128</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Int16 | ::Nil).class) : Int16 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int16</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Int32 | ::Nil).class) : Int32 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int32</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Int64 | ::Nil).class) : Int64 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int64</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (Int8 | ::Nil).class) : Int8 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>Int8</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (UInt128 | ::Nil).class) : UInt128 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt128</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (UInt16 | ::Nil).class) : UInt16 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt16</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (UInt32 | ::Nil).class) : UInt32 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt32</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (UInt64 | ::Nil).class) : UInt64 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt64</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,_type)","title":"<code>#get?(name : String, _type : (UInt8 | ::Nil).class) : UInt8 | Nil</code>","text":"<p>Returns the value of the parameter with the provided name as a <code>UInt8</code>, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name,type)","title":"<code>#get?(name : String, type : (T | ::Nil).class) : T | Nil forall T</code>","text":"<p>Returns the value of the parameter with the provided name casted to the provided type if it exists, otherwise <code>nil</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#get?(name)","title":"<code>#get?(name : String)</code>","text":"<p>Returns the value of the parameter with the provided name if it exists, otherwise <code>nil</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#has?(name,type)","title":"<code>#has?(name : String, type : T.class) : Bool forall T</code>","text":"<p>Returns <code>true</code> if a parameter with the provided name exists and is of the provided type, otherwise <code>false</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#has?(name)","title":"<code>#has?(name : String) : Bool</code>","text":"<p>Returns <code>true</code> if a parameter with the provided name exists, otherwise <code>false</code>.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#remove(name)","title":"<code>#remove(name : String) : Nil</code>","text":"<p>Removes the parameter with the provided name.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#set(name,value,type)","title":"<code>#set(name : String, value : T, type : T.class) : Nil forall T</code>","text":"<p>Sets a parameter with the provided name to value, restricted to the given type.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#set(name,value)","title":"<code>#set(name : String, value : T) : Nil forall T</code>","text":"<p>Sets a parameter with the provided name to value.</p> View source"},{"location":"Framework/ParameterBag/#Athena::Framework::ParameterBag#set(hash)","title":"<code>#set(hash : Hash) : Nil</code>","text":"View source"},{"location":"Framework/Parameters/","title":"Parameters","text":""},{"location":"Framework/Parameters/#Athena::Framework::Parameters","title":"struct <code>Athena::Framework::Parameters</code> inherits <code>Struct</code>","text":"<p>Encompasses parameters related to the <code>Athena::Framework</code> component.</p> <p>For a higher level introduction to using parameters, see the external documentation.</p>"},{"location":"Framework/Parameters/#Athena::Framework::Parameters-constructors","title":"Constructors","text":""},{"location":"Framework/Parameters/#Athena::Framework::Parameters.configure","title":"<code>.configure : self</code>","text":"<p>This method should be overridden in order to customize the parameters for the <code>Athena::Framework</code> component. See the external documentation for more details.</p> <pre><code># Returns an `ATH::Parameters` instance with customized parameter values.\ndef ATH::Parameters.configure\n  new(\n    base_uri: \"https://myapp.com\",\n  )\nend\n</code></pre> View source"},{"location":"Framework/Parameters/#Athena::Framework::Parameters.new(base_uri)","title":"<code>.new(base_uri : URI | String | Nil = nil)</code>","text":"View source"},{"location":"Framework/Parameters/#Athena::Framework::Parameters-methods","title":"Methods","text":""},{"location":"Framework/Parameters/#Athena::Framework::Parameters#base_uri","title":"<code>#base_uri : URI | ::Nil</code>","text":"<p>Returns an optional <code>URI</code> instance for use within <code>ART::Generator::Interface#generate</code>.</p> View source"},{"location":"Framework/Parameters/Framework/","title":"Framework","text":""},{"location":"Framework/Parameters/Framework/#Athena::Framework::Parameters::Framework","title":"struct <code>Athena::Framework::Parameters::Framework</code> inherits <code>Struct</code>","text":""},{"location":"Framework/Parameters/Framework/#Athena::Framework::Parameters::Framework-constructors","title":"Constructors","text":""},{"location":"Framework/Parameters/Framework/#Athena::Framework::Parameters::Framework.configure","title":"<code>.configure : self</code>","text":"View source"},{"location":"Framework/Parameters/Framework/#Athena::Framework::Parameters::Framework.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Parameters/Framework/#Athena::Framework::Parameters::Framework-methods","title":"Methods","text":""},{"location":"Framework/Parameters/Framework/#Athena::Framework::Parameters::Framework#debug","title":"<code>#debug : Bool</code>","text":"<p>Returns <code>true</code> if the application was built without the <code>--release</code> flag, otherwise <code>false</code>.</p> View source"},{"location":"Framework/Parameters/Framework/#Athena::Framework::Parameters::Framework#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Params/","title":"Params","text":""},{"location":"Framework/Params/#Athena::Framework::Params","title":"module <code>Athena::Framework::Params</code>","text":"<p>Namespace for types related to request parameter processing.</p> <p>See <code>ATHA::QueryParam</code> and <code>ATHA::RequestParam</code>.</p>"},{"location":"Framework/Params/Param/","title":"Param","text":""},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param","title":"abstract struct <code>Athena::Framework::Params::Param</code> inherits <code>Struct</code>","text":"<p>Base implementation of <code>ATH::Params::ParamInterface</code>.</p> Direct known subclasses <code>Athena::Framework::Params::ScalarParam</code>"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param-constructors","title":"Constructors","text":""},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param.new(name,has_default,incompatibles,strict,nilable,key,description)","title":"<code>.new(name : String, has_default : Bool = false, incompatibles : Array(String) | Nil = nil, strict : Bool = true, nilable : Bool = false, key : String | Nil = nil, description : String | Nil = nil)</code>","text":"View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param-methods","title":"Methods","text":""},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#constraints","title":"<code>#constraints : Array(AVD::Constraint)</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#description","title":"<code>#description : String | ::Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#has_default?","title":"<code>#has_default? : Bool</code>","text":"<p>If this parameter has a default value.</p> View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#incompatibles","title":"<code>#incompatibles : Array(String) | ::Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#key","title":"<code>#key : String</code>","text":"<p>Returns the key that should be used to access <code>self</code> from a given request.</p> <p>Defaults to <code>#name</code>, but may be customized. See the \"Key\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#name","title":"<code>#name : String</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#nilable?","title":"<code>#nilable? : Bool</code>","text":"<p>If <code>nil</code> is a valid value for the param.</p> View source"},{"location":"Framework/Params/Param/#Athena::Framework::Params::Param#strict?","title":"<code>#strict? : Bool</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Params/ParamFetcher/","title":"ParamFetcher","text":""},{"location":"Framework/Params/ParamFetcher/#Athena::Framework::Params::ParamFetcher","title":"class <code>Athena::Framework::Params::ParamFetcher</code> inherits <code>Reference</code>","text":"<p>Basic implementation of <code>ATH::Params::ParamFetcherInterface</code>.</p> <p>Warning</p> <p>May only be used after the related <code>ATH::Action</code> has been resolved.</p> Included modules <code>Athena::Framework::Params::ParamFetcherInterface</code>"},{"location":"Framework/Params/ParamFetcher/#Athena::Framework::Params::ParamFetcher-constructors","title":"Constructors","text":""},{"location":"Framework/Params/ParamFetcher/#Athena::Framework::Params::ParamFetcher.new(request_store,validator)","title":"<code>.new(request_store : ATH::RequestStore, validator : AVD::Validator::ValidatorInterface)</code>","text":"View source"},{"location":"Framework/Params/ParamFetcher/#Athena::Framework::Params::ParamFetcher-methods","title":"Methods","text":""},{"location":"Framework/Params/ParamFetcher/#Athena::Framework::Params::ParamFetcher#each(strict,&)","title":"<code>#each(strict : Bool | Nil = nil, &amp;) : Nil</code>","text":"<p>Yields the name and value of each <code>ATH::Params::ParamInterface</code> related to the current <code>ATH::Action#params</code>.</p> <p>Optionally allows determining if the params should be validated strictly. See the \"Strict\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/ParamFetcher/#Athena::Framework::Params::ParamFetcher#get(name,strict)","title":"<code>#get(name : String, strict : Bool | Nil = nil)</code>","text":"<p>Returns the value of the parameter with the provided name.</p> <p>Optionally allows determining if the params should be validated strictly. See the \"Strict\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/ParamFetcherInterface/","title":"ParamFetcherInterface","text":""},{"location":"Framework/Params/ParamFetcherInterface/#Athena::Framework::Params::ParamFetcherInterface","title":"module <code>Athena::Framework::Params::ParamFetcherInterface</code>","text":"<p>Provides an API to fetch parameters from the current request.</p> Direct including types <code>Athena::Framework::Params::ParamFetcher</code>"},{"location":"Framework/Params/ParamFetcherInterface/#Athena::Framework::Params::ParamFetcherInterface-methods","title":"Methods","text":""},{"location":"Framework/Params/ParamFetcherInterface/#Athena::Framework::Params::ParamFetcherInterface#each(strict,&)","title":"abstract <code>#each(strict : Bool | Nil = nil, &amp; : String, _ -&gt; Nil) : Nil</code>","text":"<p>Yields the name and value of each <code>ATH::Params::ParamInterface</code> related to the current <code>ATH::Action#params</code>.</p> <p>Optionally allows determining if the params should be validated strictly. See the \"Strict\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/ParamFetcherInterface/#Athena::Framework::Params::ParamFetcherInterface#get(name,strict)","title":"abstract <code>#get(name : String, strict : Bool | Nil = nil)</code>","text":"<p>Returns the value of the parameter with the provided name.</p> <p>Optionally allows determining if the params should be validated strictly. See the \"Strict\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/ParamInterface/","title":"ParamInterface","text":""},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface","title":"module <code>Athena::Framework::Params::ParamInterface</code>","text":"<p>Represents a request parameter; e.x. query param, form data, a file, etc.</p> <p>See <code>ATHA::QueryParam</code> and <code>ATHA::RequestParam</code>.</p> Direct including types <code>Athena::Framework::Params::QueryParam(T)</code> <code>Athena::Framework::Params::RequestParam(T)</code>"},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface-methods","title":"Methods","text":""},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface#constraints","title":"abstract <code>#constraints : Array(AVD::Constraint)</code>","text":"<p>Returns the <code>AVD::Constraint</code>s that should be used to validate the parameter's value.</p> View source"},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface#default","title":"abstract <code>#default</code>","text":"<p>Returns the value that should be used if <code>#strict?</code> is false and the parameter was not provided, defaulting to <code>nil</code>.</p> View source"},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface#description","title":"abstract <code>#description : String | ::Nil</code>","text":"<p>Returns a human readable summary of what the parameter is used for. In the future this may be used to supplement auto generated endpoint documentation.</p> View source"},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface#extract_value(request,default)","title":"abstract <code>#extract_value(request : ATH::Request, default : _ = nil)</code>","text":"<p>Returns the <code>self</code>'s value from the provided request, or default if it was not present.</p> View source"},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface#incompatibles","title":"abstract <code>#incompatibles : Array(String) | ::Nil</code>","text":"<p>Returns the parameters that may not be present at the same time as <code>self</code>. See the \"Incompatibilities\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface#name","title":"abstract <code>#name : String</code>","text":"<p>Returns the name of the parameter, maps to the controller action parameter name.</p> View source"},{"location":"Framework/Params/ParamInterface/#Athena::Framework::Params::ParamInterface#strict?","title":"abstract <code>#strict? : Bool</code>","text":"<p>Denotes whether <code>self</code> should be processed strictly. See the \"Strict\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/QueryParam/","title":"QueryParam","text":""},{"location":"Framework/Params/QueryParam/#Athena::Framework::Params::QueryParam","title":"struct <code>Athena::Framework::Params::QueryParam(T)</code> inherits <code>Athena::Framework::Params::ScalarParam</code>","text":"<p>Represents a request's query parameter. See <code>ATHA::QueryParam</code>.</p> Included modules <code>Athena::Framework::Params::ParamInterface</code>"},{"location":"Framework/Params/QueryParam/#Athena::Framework::Params::QueryParam-constructors","title":"Constructors","text":""},{"location":"Framework/Params/QueryParam/#Athena::Framework::Params::QueryParam.new(name,has_default,incompatibles,requirements,map,is_nilable,strict,key,description,default,type,converter)","title":"<code>.new(name : String, has_default : Bool = false, incompatibles : Array(String) | Nil = nil, requirements : AVD::Constraint | Array(AVD::Constraint) | Regex | Nil = nil, map : Bool = false, is_nilable : Bool = false, strict : Bool = true, key : String | Nil = nil, description : String | Nil = nil, default : T | Nil = nil, type : T.class = T, converter : Nil | Nil = nil)</code>","text":"View source"},{"location":"Framework/Params/QueryParam/#Athena::Framework::Params::QueryParam-methods","title":"Methods","text":""},{"location":"Framework/Params/QueryParam/#Athena::Framework::Params::QueryParam#default","title":"<code>#default : T | ::Nil</code>","text":"<p>Returns the value that should be used if <code>#strict?</code> is false and the parameter was not provided, defaulting to <code>nil</code>.</p>"},{"location":"Framework/Params/QueryParam/#Athena::Framework::Params::QueryParam#extract_value(request,default)","title":"<code>#extract_value(request : ATH::Request, default : _ = nil)</code>","text":"<p>Returns the <code>self</code>'s value from the provided request, or default if it was not present.</p> View source"},{"location":"Framework/Params/QueryParam/#Athena::Framework::Params::QueryParam#type","title":"<code>#type : T.class</code>","text":"<p>The type of the parameter, i.e. what its type restriction is.</p>"},{"location":"Framework/Params/RequestParam/","title":"RequestParam","text":""},{"location":"Framework/Params/RequestParam/#Athena::Framework::Params::RequestParam","title":"struct <code>Athena::Framework::Params::RequestParam(T)</code> inherits <code>Athena::Framework::Params::ScalarParam</code>","text":"<p>Represents form data with a request's body. See <code>ATHA::RequestParam</code>.</p> Included modules <code>Athena::Framework::Params::ParamInterface</code>"},{"location":"Framework/Params/RequestParam/#Athena::Framework::Params::RequestParam-constructors","title":"Constructors","text":""},{"location":"Framework/Params/RequestParam/#Athena::Framework::Params::RequestParam.new(name,has_default,incompatibles,requirements,map,is_nilable,strict,key,description,default,type,converter)","title":"<code>.new(name : String, has_default : Bool = false, incompatibles : Array(String) | Nil = nil, requirements : AVD::Constraint | Array(AVD::Constraint) | Regex | Nil = nil, map : Bool = false, is_nilable : Bool = false, strict : Bool = true, key : String | Nil = nil, description : String | Nil = nil, default : T | Nil = nil, type : T.class = T, converter : Nil | Nil = nil)</code>","text":"View source"},{"location":"Framework/Params/RequestParam/#Athena::Framework::Params::RequestParam-methods","title":"Methods","text":""},{"location":"Framework/Params/RequestParam/#Athena::Framework::Params::RequestParam#default","title":"<code>#default : T | ::Nil</code>","text":"<p>Returns the value that should be used if <code>#strict?</code> is false and the parameter was not provided, defaulting to <code>nil</code>.</p>"},{"location":"Framework/Params/RequestParam/#Athena::Framework::Params::RequestParam#extract_value(request,default)","title":"<code>#extract_value(request : ATH::Request, default : _ = nil)</code>","text":"<p>Returns the <code>self</code>'s value from the provided request, or default if it was not present.</p> View source"},{"location":"Framework/Params/RequestParam/#Athena::Framework::Params::RequestParam#type","title":"<code>#type : T.class</code>","text":"<p>The type of the parameter, i.e. what its type restriction is.</p>"},{"location":"Framework/Params/ScalarParam/","title":"ScalarParam","text":""},{"location":"Framework/Params/ScalarParam/#Athena::Framework::Params::ScalarParam","title":"abstract struct <code>Athena::Framework::Params::ScalarParam</code> inherits <code>Athena::Framework::Params::Param</code>","text":"<p>Extension of <code>ATH::Params::Param</code> that allows for more granular validation of scalar parameters.</p> Direct known subclasses <code>Athena::Framework::Params::QueryParam(T)</code> <code>Athena::Framework::Params::RequestParam(T)</code>"},{"location":"Framework/Params/ScalarParam/#Athena::Framework::Params::ScalarParam-constructors","title":"Constructors","text":""},{"location":"Framework/Params/ScalarParam/#Athena::Framework::Params::ScalarParam.new(name,has_default,incompatibles,requirements,map,strict,nilable,key,description)","title":"<code>.new(name : String, has_default : Bool = false, incompatibles : Array(String) | Nil = nil, requirements : AVD::Constraint | Array(AVD::Constraint) | Regex | Nil = nil, map : Bool = false, strict : Bool = true, nilable : Bool = false, key : String | Nil = nil, description : String | Nil = nil)</code>","text":"View source"},{"location":"Framework/Params/ScalarParam/#Athena::Framework::Params::ScalarParam-methods","title":"Methods","text":""},{"location":"Framework/Params/ScalarParam/#Athena::Framework::Params::ScalarParam#constraints","title":"<code>#constraints : Array(AVD::Constraint)</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/Params/ScalarParam/#Athena::Framework::Params::ScalarParam#map?","title":"<code>#map? : Bool</code>","text":"<p>Denotes whether the <code>#requirements</code> should be applied to the whole value, or to each item a part of the value.</p> <p>See the \"Map\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/Params/ScalarParam/#Athena::Framework::Params::ScalarParam#requirements","title":"<code>#requirements : AVD::Constraint | Array(AVD::Constraint) | Regex | Nil</code>","text":"<p>Returns the requirements that the value is required to pass in order to be considered valid.</p> <p>See the \"Requirements\" section of <code>ATHA::QueryParam</code>.</p> View source"},{"location":"Framework/RedirectResponse/","title":"RedirectResponse","text":""},{"location":"Framework/RedirectResponse/#Athena::Framework::RedirectResponse","title":"class <code>Athena::Framework::RedirectResponse</code> inherits <code>Athena::Framework::Response</code>","text":"<p>Represents an HTTP response that does a redirect.</p> <p>Can be used as an easier way to handle redirects as well as providing type safety that a route should redirect.</p> <pre><code>require \"athena\"\n\nclass RedirectController &lt; ATH::Controller\n  @[ARTA::Get(path: \"/go_to_crystal\")]\n  def redirect_to_crystal : ATH::RedirectResponse\n    ATH::RedirectResponse.new \"https://crystal-lang.org\"\n  end\nend\n\nATH.run\n\n# GET /go_to_crystal # =&gt; (redirected to https://crystal-lang.org)\n</code></pre>"},{"location":"Framework/RedirectResponse/#Athena::Framework::RedirectResponse-constructors","title":"Constructors","text":""},{"location":"Framework/RedirectResponse/#Athena::Framework::RedirectResponse.new(url,status,headers)","title":"<code>.new(url : String | Path | URI, status : HTTP::Status | Int32 = HTTP::Status::FOUND, headers : HTTP::Headers | ATH::Response::Headers = ATH::Response::Headers.new)</code>","text":"<p>Creates a response that should redirect to the provided url with the provided status, defaults to 302.</p> <p>An ArgumentError is raised if url is blank, or if status is not a valid redirection status code.</p> View source"},{"location":"Framework/RedirectResponse/#Athena::Framework::RedirectResponse-methods","title":"Methods","text":""},{"location":"Framework/RedirectResponse/#Athena::Framework::RedirectResponse#url","title":"<code>#url : String</code>","text":"<p>The url that the request will be redirected to.</p> View source"},{"location":"Framework/Request/","title":"Request","text":""},{"location":"Framework/Request/#Athena::Framework::Request","title":"class <code>Athena::Framework::Request</code> inherits <code>Reference</code>","text":"<p>Wraps an HTTP::Request instance to provide additional functionality.</p> <p>Forwards all additional methods to the wrapped <code>HTTP::Request</code> instance.</p>"},{"location":"Framework/Request/#Athena::Framework::Request-constants","title":"Constants","text":""},{"location":"Framework/Request/#Athena::Framework::Request::FORMATS","title":"<code>FORMATS = {\"atom\" =&gt; Set {\"application/atom+xml\"}, \"css\" =&gt; Set {\"text/css\"}, \"csv\" =&gt; Set {\"text/csv\"}, \"form\" =&gt; Set {\"application/x-www-form-urlencoded\"}, \"html\" =&gt; Set {\"text/html\", \"application/xhtml+xml\"}, \"js\" =&gt; Set {\"application/javascript\", \"application/x-javascript\", \"text/javascript\"}, \"json\" =&gt; Set {\"application/json\", \"application/x-json\"}, \"jsonld\" =&gt; Set {\"application/ld+json\"}, \"rdf\" =&gt; Set {\"application/rdf+xml\"}, \"rss\" =&gt; Set {\"application/rss+xml\"}, \"txt\" =&gt; Set {\"text/plain\"}, \"xml\" =&gt; Set {\"text/xml\", \"application/xml\", \"application/x-xml\"}}</code>","text":"<p>Represents the supported built in formats; mapping the format name to its valid <code>MIME</code> type(s).</p> <p>Additional formats may be registered via <code>.register_format</code>.</p>"},{"location":"Framework/Request/#Athena::Framework::Request-constructors","title":"Constructors","text":""},{"location":"Framework/Request/#Athena::Framework::Request.new(method,path,headers,body,version)","title":"<code>.new(method : String, path : String, headers : HTTP::Headers | Nil = nil, body : String | Bytes | IO | Nil = nil, version : String = \"HTTP/1.1\") : self</code>","text":"View source"},{"location":"Framework/Request/#Athena::Framework::Request.new(request)","title":"<code>.new(request : self) : self</code>","text":"View source"},{"location":"Framework/Request/#Athena::Framework::Request.new(request)","title":"<code>.new(request : HTTP::Request)</code>","text":"View source"},{"location":"Framework/Request/#Athena::Framework::Request-class-methods","title":"Class methods","text":""},{"location":"Framework/Request/#Athena::Framework::Request.mime_types(format)","title":"<code>.mime_types(format : String) : Set(String)</code>","text":"<p>Returns the <code>MIME</code> types for the provided format.</p> <pre><code>ATH::Request.mime_types \"txt\" # =&gt; Set{\"text/plain\"}\n</code></pre> View source"},{"location":"Framework/Request/#Athena::Framework::Request.register_format(format,mime_types)","title":"<code>.register_format(format : String, mime_types : Indexable(String)) : Nil</code>","text":"<p>Registers the provided format with the provided mime_types. Can also be used to change the mime_types supported for an existing format.</p> <pre><code>ATH::Request.register_format \"some_format\", {\"some/mimetype\"}\n</code></pre> View source"},{"location":"Framework/Request/#Athena::Framework::Request-methods","title":"Methods","text":""},{"location":"Framework/Request/#Athena::Framework::Request#action","title":"<code>#action : ATH::ActionBase</code>","text":"<p>The <code>ATH::Action</code> object associated with this request.</p> <p>Will only be set if a route was able to be resolved as part of <code>ATH::Listeners::Routing</code>.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#action?","title":"<code>#action? : ATH::ActionBase | ::Nil</code>","text":"<p>The <code>ATH::Action</code> object associated with this request.</p> <p>Will only be set if a route was able to be resolved as part of <code>ATH::Listeners::Routing</code>.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#attributes","title":"<code>#attributes : ATH::ParameterBag</code>","text":"<p>See <code>ATH::ParameterBag</code>.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#format(mime_type)","title":"<code>#format(mime_type : String) : String | Nil</code>","text":"<p>Returns the format for the provided mime_type.</p> <pre><code>request.format \"text/plain\" # =&gt; \"txt\"\n</code></pre> View source"},{"location":"Framework/Request/#Athena::Framework::Request#hostname","title":"<code>#hostname : String | ::Nil</code>","text":"<p>Returns the host name the request originated from.</p> <p>Todo</p> <p>Support reading the <code>#hostname</code> from the <code>X-Forwarded-Host</code> header if trusted.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#mime_type(format)","title":"<code>#mime_type(format : String) : String | Nil</code>","text":"<p>Returns the first <code>MIME</code> type for the provided format if defined, otherwise returns <code>nil</code>.</p> <pre><code>request.mime_type \"txt\" # =&gt; \"text/plain\"\n</code></pre> View source"},{"location":"Framework/Request/#Athena::Framework::Request#request","title":"<code>#request : HTTP::Request</code>","text":"<p>Returns the raw wrapped <code>HTTP::Request</code> instance.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#request_data","title":"<code>#request_data</code>","text":"<p>Returns an <code>HTTP::Params</code> instance based on this request's form data body.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#request_format(default)","title":"<code>#request_format(default : String | Nil = \"json\") : String | Nil</code>","text":"<p>Returns the format for this request.</p> <p>First checks if a format was explicitly set via <code>#request_format=</code>. Next, will check for the <code>_format</code> request <code>#attributes</code>, finally falling back on the provided default.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#request_format=(request_format)","title":"<code>#request_format=(request_format : String | Nil)</code>","text":"<p>Sets the <code>#request_format</code> to the explicitly passed format.</p> View source"},{"location":"Framework/Request/#Athena::Framework::Request#safe?","title":"<code>#safe? : Bool</code>","text":"<p>Returns <code>true</code> if this request's <code>#method</code> is safe. Otherwise returns <code>false</code>.</p> View source"},{"location":"Framework/RequestMatcher/","title":"RequestMatcher","text":""},{"location":"Framework/RequestMatcher/#Athena::Framework::RequestMatcher","title":"class <code>Athena::Framework::RequestMatcher</code> inherits <code>Reference</code>","text":"<p>Verifies that all checks match against an <code>ATH::Request</code> instance.</p> <pre><code>matcher = ATH::RequestMatcher.new(\n  ATH::RequestMatcher::Path.new(%r(/admin/foo)),\n  ATH::RequestMatcher::Method.new(\"GET\"),\n)\n\nmatcher.matches?(ATH::Request.new \"GET\", \"/admin/foo\")  # =&gt; true\nmatcher.matches?(ATH::Request.new \"POST\", \"/admin/foo\") # =&gt; false\n</code></pre> Included modules <code>Athena::Framework::RequestMatcher::Interface</code>"},{"location":"Framework/RequestMatcher/#Athena::Framework::RequestMatcher-constructors","title":"Constructors","text":""},{"location":"Framework/RequestMatcher/#Athena::Framework::RequestMatcher.new(matchers)","title":"<code>.new(matchers : Iterable(ATH::RequestMatcher::Interface))</code>","text":"View source"},{"location":"Framework/RequestMatcher/#Athena::Framework::RequestMatcher.new(*)","title":"<code>.new(*matchers : ATH::RequestMatcher::Interface)</code>","text":"View source"},{"location":"Framework/RequestMatcher/#Athena::Framework::RequestMatcher-methods","title":"Methods","text":""},{"location":"Framework/RequestMatcher/#Athena::Framework::RequestMatcher#matches?(request)","title":"<code>#matches?(request : ATH::Request) : Bool</code>","text":"<p>Decides whether the rule(s) implemented by the strategy matches the provided request.</p> View source"},{"location":"Framework/RequestMatcher/Attributes/","title":"Attributes","text":""},{"location":"Framework/RequestMatcher/Attributes/#Athena::Framework::RequestMatcher::Attributes","title":"struct <code>Athena::Framework::RequestMatcher::Attributes</code> inherits <code>Struct</code>","text":"<p>Checks if all specified <code>ATH::Request#attributes</code> match the provided patterns.</p> Included modules <code>Athena::Framework::RequestMatcher::Interface</code>"},{"location":"Framework/RequestMatcher/Attributes/#Athena::Framework::RequestMatcher::Attributes-constructors","title":"Constructors","text":""},{"location":"Framework/RequestMatcher/Attributes/#Athena::Framework::RequestMatcher::Attributes.new(regexes)","title":"<code>.new(regexes : Hash(String, Regex))</code>","text":"View source"},{"location":"Framework/RequestMatcher/Attributes/#Athena::Framework::RequestMatcher::Attributes-methods","title":"Methods","text":""},{"location":"Framework/RequestMatcher/Attributes/#Athena::Framework::RequestMatcher::Attributes#matches?(request)","title":"<code>#matches?(request : ATH::Request) : Bool</code>","text":"<p>Decides whether the rule(s) implemented by the strategy matches the provided request.</p> View source"},{"location":"Framework/RequestMatcher/Hostname/","title":"Hostname","text":""},{"location":"Framework/RequestMatcher/Hostname/#Athena::Framework::RequestMatcher::Hostname","title":"struct <code>Athena::Framework::RequestMatcher::Hostname</code> inherits <code>Struct</code>","text":"<p>Checks if the <code>ATH::Request#hostname</code> matches the allowed pattern.</p> Included modules <code>Athena::Framework::RequestMatcher::Interface</code>"},{"location":"Framework/RequestMatcher/Hostname/#Athena::Framework::RequestMatcher::Hostname-constructors","title":"Constructors","text":""},{"location":"Framework/RequestMatcher/Hostname/#Athena::Framework::RequestMatcher::Hostname.new(regex)","title":"<code>.new(regex : Regex)</code>","text":"View source"},{"location":"Framework/RequestMatcher/Hostname/#Athena::Framework::RequestMatcher::Hostname-methods","title":"Methods","text":""},{"location":"Framework/RequestMatcher/Hostname/#Athena::Framework::RequestMatcher::Hostname#matches?(request)","title":"<code>#matches?(request : ATH::Request) : Bool</code>","text":"<p>Decides whether the rule(s) implemented by the strategy matches the provided request.</p> View source"},{"location":"Framework/RequestMatcher/Interface/","title":"Interface","text":""},{"location":"Framework/RequestMatcher/Interface/#Athena::Framework::RequestMatcher::Interface","title":"module <code>Athena::Framework::RequestMatcher::Interface</code>","text":"<p>Represents a strategy that can be used to match an <code>ATH::Request</code>. This interface can be used as a generic way to determine if some logic should be enabled for a given request based on the configured rules.</p> Direct including types <code>Athena::Framework::RequestMatcher</code> <code>Athena::Framework::RequestMatcher::Attributes</code> <code>Athena::Framework::RequestMatcher::Hostname</code> <code>Athena::Framework::RequestMatcher::Method</code> <code>Athena::Framework::RequestMatcher::Path</code>"},{"location":"Framework/RequestMatcher/Interface/#Athena::Framework::RequestMatcher::Interface-methods","title":"Methods","text":""},{"location":"Framework/RequestMatcher/Interface/#Athena::Framework::RequestMatcher::Interface#matches?(request)","title":"abstract <code>#matches?(request : ATH::Request) : Bool</code>","text":"<p>Decides whether the rule(s) implemented by the strategy matches the provided request.</p> View source"},{"location":"Framework/RequestMatcher/Method/","title":"Method","text":""},{"location":"Framework/RequestMatcher/Method/#Athena::Framework::RequestMatcher::Method","title":"struct <code>Athena::Framework::RequestMatcher::Method</code> inherits <code>Struct</code>","text":"<p>Checks if the <code>ATH::Request#method</code> is allowed.</p> Included modules <code>Athena::Framework::RequestMatcher::Interface</code>"},{"location":"Framework/RequestMatcher/Method/#Athena::Framework::RequestMatcher::Method-constructors","title":"Constructors","text":""},{"location":"Framework/RequestMatcher/Method/#Athena::Framework::RequestMatcher::Method.new(methods)","title":"<code>.new(methods : Enumerable(String))</code>","text":"View source"},{"location":"Framework/RequestMatcher/Method/#Athena::Framework::RequestMatcher::Method.new(*)","title":"<code>.new(*methods : String)</code>","text":"View source"},{"location":"Framework/RequestMatcher/Method/#Athena::Framework::RequestMatcher::Method-methods","title":"Methods","text":""},{"location":"Framework/RequestMatcher/Method/#Athena::Framework::RequestMatcher::Method#matches?(request)","title":"<code>#matches?(request : ATH::Request) : Bool</code>","text":"<p>Decides whether the rule(s) implemented by the strategy matches the provided request.</p> View source"},{"location":"Framework/RequestMatcher/Path/","title":"Path","text":""},{"location":"Framework/RequestMatcher/Path/#Athena::Framework::RequestMatcher::Path","title":"struct <code>Athena::Framework::RequestMatcher::Path</code> inherits <code>Struct</code>","text":"<p>Checks if the <code>ATH::Request#path</code> matches the allowed pattern.</p> Included modules <code>Athena::Framework::RequestMatcher::Interface</code>"},{"location":"Framework/RequestMatcher/Path/#Athena::Framework::RequestMatcher::Path-constructors","title":"Constructors","text":""},{"location":"Framework/RequestMatcher/Path/#Athena::Framework::RequestMatcher::Path.new(regex)","title":"<code>.new(regex : Regex)</code>","text":"View source"},{"location":"Framework/RequestMatcher/Path/#Athena::Framework::RequestMatcher::Path-methods","title":"Methods","text":""},{"location":"Framework/RequestMatcher/Path/#Athena::Framework::RequestMatcher::Path#matches?(request)","title":"<code>#matches?(request : ATH::Request) : Bool</code>","text":"<p>Decides whether the rule(s) implemented by the strategy matches the provided request.</p> View source"},{"location":"Framework/RequestStore/","title":"RequestStore","text":""},{"location":"Framework/RequestStore/#Athena::Framework::RequestStore","title":"class <code>Athena::Framework::RequestStore</code> inherits <code>Reference</code>","text":"<p>Stores the current <code>ATH::Request</code> object.</p> <p>Can be injected to access the request from a non controller context.</p> <pre><code>require \"athena\"\n\n@[ADI::Register(public: true)]\nclass ExampleController &lt; ATH::Controller\n  def initialize(@request_store : ATH::RequestStore); end\n\n  get \"/\" do\n    @request_store.method\n  end\nend\n\nATH.run\n\n# GET / # =&gt; GET\n</code></pre>"},{"location":"Framework/RequestStore/#Athena::Framework::RequestStore-methods","title":"Methods","text":""},{"location":"Framework/RequestStore/#Athena::Framework::RequestStore#request","title":"<code>#request : ATH::Request</code>","text":""},{"location":"Framework/RequestStore/#Athena::Framework::RequestStore#request=(request)","title":"<code>#request=(request : ATH::Request)</code>","text":"View source"},{"location":"Framework/RequestStore/#Athena::Framework::RequestStore#request?","title":"<code>#request? : ATH::Request | ::Nil</code>","text":""},{"location":"Framework/Response/","title":"Response","text":""},{"location":"Framework/Response/#Athena::Framework::Response","title":"class <code>Athena::Framework::Response</code> inherits <code>Reference</code>","text":"<p>Represents an <code>HTTP</code> response that should be returned to the client.</p> <p>Contains the content, status, and headers that should be applied to the actual <code>HTTP::Server::Response</code>. This type is used to allow the content, status, and headers to be mutated by <code>ATH::Listeners</code> before being returned to the client.</p> <p>The <code>#content</code> is written all at once to the server response's <code>IO</code>.</p> Direct known subclasses <code>Athena::Framework::BinaryFileResponse</code> <code>Athena::Framework::RedirectResponse</code> <code>Athena::Framework::StreamedResponse</code>"},{"location":"Framework/Response/#Athena::Framework::Response-constructors","title":"Constructors","text":""},{"location":"Framework/Response/#Athena::Framework::Response.new(content,status,headers)","title":"<code>.new(content : String | Nil = nil, status : HTTP::Status | Int32 = HTTP::Status::OK, headers : HTTP::Headers | ATH::Response::Headers = ATH::Response::Headers.new)</code>","text":"<p>Creates a new response with optional content, status, and headers arguments.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response-methods","title":"Methods","text":""},{"location":"Framework/Response/#Athena::Framework::Response#charset","title":"<code>#charset : String</code>","text":"<p>Returns the character set this response is encoded as.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#charset=(charset)","title":"<code>#charset=(charset : String)</code>","text":"<p>Returns the character set this response is encoded as.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#content","title":"<code>#content : String</code>","text":"<p>Returns the contents of this response.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#content=(content)","title":"<code>#content=(content : String | Nil)</code>","text":"<p>Sets the response content.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#etag","title":"<code>#etag : String | ::Nil</code>","text":"<p>Returns the value of the <code>etag</code> header if set, otherwise <code>nil</code>.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#headers","title":"<code>#headers : ATH::Response::Headers</code>","text":"<p>Returns the response headers of this response.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#last_modified","title":"<code>#last_modified : Time | ::Nil</code>","text":"<p>Returns a <code>Time</code>representing the <code>last-modified</code> header if set, otherwise <code>nil</code>.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#last_modified=(time)","title":"<code>#last_modified=(time : Time | Nil = nil) : Nil</code>","text":"<p>Updates the <code>last-modified</code> header to the provided time. Removes the header if time is <code>nil</code>.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#send(request,response)","title":"<code>#send(request : ATH::Request, response : HTTP::Server::Response) : Nil</code>","text":"<p>Sends <code>self</code> to the client based on the provided context.</p> <p>How the content gets written can be customized via an <code>ATH::Response::Writer</code>.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#set_etag(etag,weak)","title":"<code>#set_etag(etag : String | Nil = nil, weak : Bool = false) : Nil</code>","text":"<p>Updates the <code>etag</code> header to the provided, optionally weak, etag. Removes the header if etag is <code>nil</code>.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#set_public","title":"<code>#set_public : Nil</code>","text":"<p>Marks <code>self</code> as \"public\".</p> <p>Adds the <code>public</code> <code>cache-control</code> directive and removes the <code>private</code> directive.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#status","title":"<code>#status : HTTP::Status</code>","text":"<p>Returns the <code>HTTP::Status</code> of this response.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#status=(code)","title":"<code>#status=(code : HTTP::Status | Int32) : Nil</code>","text":"<p>Sets the <code>HTTP::Status</code> of this response.</p> View source"},{"location":"Framework/Response/#Athena::Framework::Response#writer=(writer)","title":"<code>#writer=(writer : ATH::Response::Writer)</code>","text":"<p>See <code>ATH::Response::Writer</code>.</p> View source"},{"location":"Framework/Response/DirectWriter/","title":"DirectWriter","text":""},{"location":"Framework/Response/DirectWriter/#Athena::Framework::Response::DirectWriter","title":"struct <code>Athena::Framework::Response::DirectWriter</code> inherits <code>Athena::Framework::Response::Writer</code>","text":"<p>The default <code>ATH::Response::Writer</code> for an <code>ATH::Response</code>.</p> <p>Writes directly to the output <code>IO</code>.</p>"},{"location":"Framework/Response/DirectWriter/#Athena::Framework::Response::DirectWriter-methods","title":"Methods","text":""},{"location":"Framework/Response/DirectWriter/#Athena::Framework::Response::DirectWriter#write(output,&)","title":"<code>#write(output : IO, &amp; : IO -&gt; Nil) : Nil</code>","text":"<p>Accepts an output <code>IO</code> that the content of the response should be written to.</p> <p>The output <code>IO</code> is yielded directly.</p> View source"},{"location":"Framework/Response/Headers/","title":"Headers","text":""},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers","title":"class <code>Athena::Framework::Response::Headers</code> inherits <code>Reference</code>","text":"<p>Wraps an HTTP::Headers instance to provide additional functionality.</p> <p>Forwards all additional methods to the wrapped <code>HTTP::Headers</code> instance.</p>"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers-constructors","title":"Constructors","text":""},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers.new(headers)","title":"<code>.new(headers : self) : self</code>","text":"<p>Utility constructor to allow calling <code>.new</code> with a union of <code>self</code> and <code>HTTP::Headers</code>.</p> <p>Returns the provided headers object.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers.new(headers)","title":"<code>.new(headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"<p>Creates a new <code>self</code>, including the data from the provided headers.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers-methods","title":"Methods","text":""},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#<<(cookie)","title":"<code>#&lt;&lt;(cookie : HTTP::Cookie) : Nil</code>","text":"<p>Adds the provided cookie to the <code>#cookies</code> container.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#==(other)","title":"<code>#==(other : HTTP::Headers) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> is equal to the provided <code>HTTP::Headers</code> instance. Otherwise returns <code>false</code>.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#[]=(key,value)","title":"<code>#[]=(key : String, value : HTTP::Cookie) : Nil</code>","text":"<p>Sets a cookie with the provided key and value.</p> <p>Note</p> <p>The key and cookie name must match.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#[]=(key,value)","title":"<code>#[]=(key : String, value : Array(String)) : Nil</code>","text":"<p>Sets a header with the provided key to the provided value.</p> <p>Note</p> <p>This method will override the value of the provided key.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#[]=(key,value)","title":"<code>#[]=(key : String, value : String) : Nil</code>","text":"<p>Sets a header with the provided key to the provided value.</p> <p>Note</p> <p>This method will override the value of the provided key.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#[]=(key,value)","title":"<code>#[]=(key : String, value : _) : Nil</code>","text":"<p>Sets a header with the provided key to the provided value.</p> <p>Note</p> <p>This method will override the value of the provided key.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#add(key,value)","title":"<code>#add(key : String, value : String) : Nil</code>","text":"<p>Adds the provided value to the the provided key.</p> <p>Note</p> <p>This method will concatenate the value to the provided key.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#add_cache_control_directive(directive,value)","title":"<code>#add_cache_control_directive(directive : String, value : String | Bool = true)</code>","text":"<p>Adds the provided directive; updating the <code>cache-control</code> header.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#cookies","title":"<code>#cookies : HTTP::Cookies</code>","text":"<p>Returns an HTTP::Cookies instance that stores cookies related to <code>self</code>.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#date(key,default)","title":"<code>#date(key : String = \"date\", default : Time | Nil = nil) : Time | Nil</code>","text":"<p>Returns a <code>Time</code> instance by parsing the datetime string from the header with the provided key.</p> <p>Returns the provided default if no value with the provided key exists, or if parsing its value fails.</p> <pre><code>time = HTTP.format_time Time.utc 2021, 4, 7, 12, 0, 0\nheaders = ATH::Response::Headers{\"date\" =&gt; time}\n\nheaders.date                 # =&gt; 2021-04-07 12:00:00.0 UTC\nheaders.date \"foo\"           # =&gt; nil\nheaders.date \"foo\", Time.utc # =&gt; 2021-05-02 14:32:35.257505806 UTC\n</code></pre> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#delete(key)","title":"<code>#delete(key : String) : Nil</code>","text":"<p>Deletes the header with the provided key.</p> <p>Clears the <code>#cookies</code> instance if key is <code>set-cookie</code>.</p> <p>Clears the <code>cache-control</code> header if key is <code>cache-control</code>.</p> <p>Reinitializes the <code>date</code> header if key is <code>date</code>.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#get_cache_control_directive(directive)","title":"<code>#get_cache_control_directive(directive : String) : String | Bool | Nil</code>","text":"<p>Returns the provided directive from the <code>cache-control</code> header, or <code>nil</code> if it is not set.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#has_cache_control_directive?(directive)","title":"<code>#has_cache_control_directive?(directive : String) : Bool</code>","text":"<p>Returns <code>true</code> if the current <code>cache-control</code> header has the provided directive. Otherwise returns <code>false</code>.</p> View source"},{"location":"Framework/Response/Headers/#Athena::Framework::Response::Headers#remove_cache_control_directive(directive)","title":"<code>#remove_cache_control_directive(directive : String) : Nil</code>","text":"<p>Removes the provided directive from the <code>cache-control</code> header.</p> View source"},{"location":"Framework/Response/Writer/","title":"Writer","text":""},{"location":"Framework/Response/Writer/#Athena::Framework::Response::Writer","title":"abstract struct <code>Athena::Framework::Response::Writer</code> inherits <code>Struct</code>","text":"<p>Determines how the content of an <code>ATH::Response</code> will be written to the requests' response <code>IO</code>.</p> <p>By default the content is written directly to the requests' response <code>IO</code> via <code>ATH::Response::DirectWriter</code>. However, custom writers can be implemented to customize that behavior. The most common use case would be for compression.</p> <p>Writers can also be defined as services and injected into a listener if they require additional external dependencies.</p>"},{"location":"Framework/Response/Writer/#Athena::Framework::Response::Writer--example","title":"Example","text":"<pre><code>require \"athena\"\nrequire \"compress/gzip\"\n\n# Define a custom writer to gzip the response\nstruct GzipWriter &lt; ATH::Response::Writer\n  def write(output : IO, &amp; : IO -&gt; Nil) : Nil\n    Compress::Gzip::Writer.open(output) do |gzip_io|\n      yield gzip_io\n    end\n  end\nend\n\n# Define a new event listener to handle applying this writer\n@[ADI::Register]\nstruct CompressionListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener(priority: -256)]\n  def on_response(event : ATH::Events::Response) : Nil\n    # If the request supports gzip encoding\n    if event.request.headers.includes_word?(\"accept-encoding\", \"gzip\")\n      # Change the `ATH::Response` object's writer to be our `GzipWriter`\n      event.response.writer = GzipWriter.new\n\n      # Set the encoding of the response to gzip\n      event.response.headers[\"content-encoding\"] = \"gzip\"\n    end\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/users\")]\n  def users : Array(User)\n    User.all\n  end\nend\n\nATH.run\n\n# GET /users # =&gt; [{\"id\":1,...},...] (gzipped)\n</code></pre> Direct known subclasses <code>Athena::Framework::Response::DirectWriter</code>"},{"location":"Framework/Response/Writer/#Athena::Framework::Response::Writer-constructors","title":"Constructors","text":""},{"location":"Framework/Response/Writer/#Athena::Framework::Response::Writer.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Response/Writer/#Athena::Framework::Response::Writer-methods","title":"Methods","text":""},{"location":"Framework/Response/Writer/#Athena::Framework::Response::Writer#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Framework/Response/Writer/#Athena::Framework::Response::Writer#write(output,&)","title":"abstract <code>#write(output : IO, &amp; : IO -&gt; Nil) : Nil</code>","text":"<p>Accepts an output <code>IO</code> that the content of the response should be written to.</p> View source"},{"location":"Framework/RouteHandler/","title":"RouteHandler","text":""},{"location":"Framework/RouteHandler/#Athena::Framework::RouteHandler","title":"struct <code>Athena::Framework::RouteHandler</code> inherits <code>Struct</code>","text":"<p>The entry-point into <code>Athena::Framework</code>.</p> <p>Emits events that handle a given request and returns the resulting <code>ATH::Response</code>.</p>"},{"location":"Framework/RouteHandler/#Athena::Framework::RouteHandler-constructors","title":"Constructors","text":""},{"location":"Framework/RouteHandler/#Athena::Framework::RouteHandler.new(event_dispatcher,request_store,argument_resolver,controller_resolver)","title":"<code>.new(event_dispatcher : AED::EventDispatcherInterface, request_store : ATH::RequestStore, argument_resolver : ATH::Controller::ArgumentResolverInterface, controller_resolver : ATH::ControllerResolverInterface)</code>","text":"View source"},{"location":"Framework/RouteHandler/#Athena::Framework::RouteHandler-methods","title":"Methods","text":""},{"location":"Framework/RouteHandler/#Athena::Framework::RouteHandler#handle(request)","title":"<code>#handle(request : HTTP::Request) : ATH::Response</code>","text":"View source"},{"location":"Framework/RouteHandler/#Athena::Framework::RouteHandler#handle(request)","title":"<code>#handle(request : ATH::Request) : ATH::Response</code>","text":"View source"},{"location":"Framework/RouteHandler/#Athena::Framework::RouteHandler#terminate(request,response)","title":"<code>#terminate(request : ATH::Request, response : ATH::Response) : Nil</code>","text":"<p>Terminates a request/response lifecycle.</p> <p>Should be called after sending the response to the client.</p> View source"},{"location":"Framework/Routing/","title":"Routing","text":""},{"location":"Framework/Routing/#Athena::Framework::Routing","title":"module <code>Athena::Framework::Routing</code>","text":""},{"location":"Framework/Spec/","title":"Spec","text":""},{"location":"Framework/Spec/#Athena::Framework::Spec","title":"module <code>Athena::Framework::Spec</code>","text":"<p>A set of testing utilities/types to aid in testing <code>Athena::Framework</code> related types.</p>"},{"location":"Framework/Spec/#Athena::Framework::Spec--getting-started","title":"Getting Started","text":"<p>Require this module in your <code>spec_helper.cr</code> file.</p> <pre><code># This also requires \"spec\" and \"athena-spec\".\nrequire \"athena/spec\"\n</code></pre> <p>Add <code>Athena::Spec</code> as a development dependency, then run a <code>shards install</code>. See the individual types for more information.</p>"},{"location":"Framework/Spec/APITestCase/","title":"APITestCase","text":""},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase","title":"abstract struct <code>Athena::Framework::Spec::APITestCase</code> inherits <code>Athena::Framework::Spec::WebTestCase</code>","text":"<p>A <code>WebTestCase</code> implementation with the intent of testing API controllers. Can be extended to add additional application specific configuration, such as setting up an authenticated user to make the request as.</p>"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase--usage","title":"Usage","text":"<p>Say we want to test the following controller:</p> <pre><code>class ExampleController &lt; ATH::Controller\n  @[ATHA::QueryParam(\"negative\")]\n  @[ARTA::Get(\"/add/{value1}/{value2}\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false) : Int32\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\nend\n</code></pre> <p>We can define a struct inheriting from <code>self</code> to implement our test logic:</p> <pre><code>struct ExampleControllerTest &lt; ATH::Spec::APITestCase\n  def test_add_positive : Nil\n    self.get(\"/add/5/3\").body.should eq \"8\"\n  end\n\n  def test_add_negative : Nil\n    self.get(\"/add/5/3?negative=true\").body.should eq \"-8\"\n  end\nend\n</code></pre> <p>The <code>#request</code> method is used to make our requests to the API, then we run are assertions against the resulting <code>HTTP::Server::Response</code>. A key thing to point out is that there is no <code>HTTP::Server</code> involved, thus resulting in more performant specs.</p> <p>Tip</p> <p>Checkout the built in expecations to make testing easier.</p> <p>Attention</p> <p>Be sure to call <code>Athena::Spec.run_all</code> to your <code>spec_helper.cr</code> to ensure all test case instances are executed.</p>"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase--mocking-external-dependencies","title":"Mocking External Dependencies","text":"<p>The previous example was quite simple. However, most likely a controller is going to have dependencies on various other services; such as an API client to make requests to a third party API. By default each test will be executed with the same services as it would normally, i.e. those requests to the third party API would actually be made. To solve this we can create a mock implementation of the API client and make it so that implementation is injected when the test runs.</p> <pre><code># Create an example API client.\n@[ADI::Register]\nclass APIClient\n  def fetch_latest_data : String\n    # Assume this method actually makes an `HTTP` request to get the latest data.\n    \"DATA\"\n  end\nend\n\n# Define a mock implementation of our APIClient that does not make a request and just returns mock data.\nclass MockAPIClient &lt; APIClient\n  def fetch_latest_data : String\n    # This could also be an instance variable that gets set when this mock is created.\n    \"MOCK_DATA\"\n  end\nend\n\n# Enable our API client to be replaced in the service container.\nclass ADI::Spec::MockableServiceContainer\n  # Use the block version of the `property` macro to use our mocked client by default, while still allowing it to be replaced at runtime.\n  #\n  # The block version of `getter` could also be used if you don't need to set it at runtime.\n  # The `setter` macro could be also if you only want to allow replacing it at runtime.\n  property(api_client) { MockAPIClient.new }\nend\n\n@[ADI::Register]\nclass ExampleServiceController &lt; ATH::Controller\n  def initialize(@api_client : APIClient); end\n\n  @[ARTA::Post(\"/sync\")]\n  def sync_data : String\n    # Use the injected api client to get the latest data to sync.\n    data = @api_client.fetch_latest_data\n\n    # ...\n\n    data\n  end\nend\n\nstruct ExampleServiceControllerTest &lt; ATH::Spec::APITestCase\n  def initialize\n    super\n\n    # Our API client could also have been replaced at runtime;\n    # such as if you wanted provide it what data it should return on a test by test basis.\n    # self.client.container.api_client = MockAPIClient.new\n  end\n\n  def test_sync_data : Nil\n    self.post(\"/sync\").body.should eq %(\"MOCK_DATA\")\n  end\nend\n</code></pre> <p>Tip</p> <p>See <code>ADI::Spec::MockableServiceContainer</code> for more details on mocking services.</p> <p>Each <code>test_*</code> method has its own service container instance. Any services that are mutated/replaced within the <code>initialize</code> method will affect all <code>test_*</code> methods. However, services can also be mutated/replaced within specific <code>test_*</code> methods to scope it that particular test; just be sure that you do it before calling <code>#request</code>.</p>"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase-constructors","title":"Constructors","text":""},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase-methods","title":"Methods","text":""},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#client","title":"<code>#client : ATH::Spec::HTTPBrowser</code>","text":"<p>Returns a reference to the <code>AbstractBrowser</code> being used for the test.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#delete(path,headers)","title":"<code>#delete(path : String, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>DELETE</code> request to the provided path, optionally with the provided headers.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#get(path,headers)","title":"<code>#get(path : String, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>GET</code> request to the provided path, optionally with the provided headers.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#head(path,headers)","title":"<code>#head(path : String, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>HEAD</code> request to the provided path, optionally with the provided headers.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#link(path,headers)","title":"<code>#link(path : String, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>LINK</code> request to the provided path, optionally with the provided headers.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#patch(path,body,headers)","title":"<code>#patch(path : String, body : String | Bytes | IO | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>PATCH</code> request to the provided path, optionally with the provided body and headers.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#post(path,body,headers)","title":"<code>#post(path : String, body : String | Bytes | IO | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>POST</code> request to the provided path, optionally with the provided body and headers.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#put(path,body,headers)","title":"<code>#put(path : String, body : String | Bytes | IO | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>PUT</code> request to the provided path, optionally with the provided body and headers.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#request(method,path,body,headers)","title":"<code>#request(method : String, path : String, body : String | Bytes | IO | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>See <code>AbstractBrowser#request</code>.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#request(request)","title":"<code>#request(request : HTTP::Request | ATH::Request) : HTTP::Server::Response</code>","text":"<p>See <code>AbstractBrowser#request</code>.</p> View source"},{"location":"Framework/Spec/APITestCase/#Athena::Framework::Spec::APITestCase#unlink(path,headers)","title":"<code>#unlink(path : String, headers : HTTP::Headers = HTTP::Headers.new) : HTTP::Server::Response</code>","text":"<p>Makes a <code>UNLINK</code> request to the provided path, optionally with the provided headers.</p> View source"},{"location":"Framework/Spec/AbstractBrowser/","title":"AbstractBrowser","text":""},{"location":"Framework/Spec/AbstractBrowser/#Athena::Framework::Spec::AbstractBrowser","title":"abstract class <code>Athena::Framework::Spec::AbstractBrowser</code> inherits <code>Reference</code>","text":"<p>Simulates a browser to make requests to some destination.</p> <p>Note</p> <p>Currently just acts as a client to make <code>HTTP</code> requests. This type exists to allow for introduction of other functionality in the future.</p> Direct known subclasses <code>Athena::Framework::Spec::HTTPBrowser</code>"},{"location":"Framework/Spec/AbstractBrowser/#Athena::Framework::Spec::AbstractBrowser-methods","title":"Methods","text":""},{"location":"Framework/Spec/AbstractBrowser/#Athena::Framework::Spec::AbstractBrowser#request(method,path,headers,body)","title":"<code>#request(method : String, path : String, headers : HTTP::Headers, body : String | Bytes | IO | Nil) : HTTP::Server::Response</code>","text":"<p>Makes an HTTP request with the provided method, at the provided path, with the provided body and/or headers and returns the resulting response.</p> View source"},{"location":"Framework/Spec/AbstractBrowser/#Athena::Framework::Spec::AbstractBrowser#request(request)","title":"<code>#request(request : ATH::Request | HTTP::Request) : HTTP::Server::Response</code>","text":"<p>Makes an HTTP request with the provided request, returning the resulting response.</p> View source"},{"location":"Framework/Spec/AbstractBrowser/#Athena::Framework::Spec::AbstractBrowser#request","title":"<code>#request : ATH::Request</code>","text":"View source"},{"location":"Framework/Spec/AbstractBrowser/#Athena::Framework::Spec::AbstractBrowser#response","title":"<code>#response : HTTP::Server::Response</code>","text":"View source"},{"location":"Framework/Spec/Expectations/","title":"Expectations","text":""},{"location":"Framework/Spec/Expectations/#Athena::Framework::Spec::Expectations","title":"module <code>Athena::Framework::Spec::Expectations</code>","text":"<p><code>ATH::Spec</code> includes a set of custom spec expectations for making it easier to test certain aspects of the application. These expectations are exposed via helper methods within the modules defined within this namespace. See each module for more information.</p>"},{"location":"Framework/Spec/Expectations/HTTP/","title":"HTTP","text":""},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP","title":"module <code>Athena::Framework::Spec::Expectations::HTTP</code>","text":"<p>Provides expectation helper method for making assertions about the <code>ATH::Request</code> and/or <code>HTTP::Server::Response</code> of a controller action. For example asserting the response is successful, has a specific header/cookie (value), and/or if the request has an attribute with a specific value.</p> <pre><code>struct ExampleControllerTest &lt; ATH::Spec::APITestCase\n  def test_root : Nil\n    self.get \"/\"\n\n    self.assert_response_is_successful\n  end\nend\n</code></pre> <p>Some expectations will also print more information upon failure to make it easier to understand why it failed. <code>#assert_response_is_successful</code> for example will include the response status, headers, and body as well as the exception that caused the failure if applicable.</p> Direct including types <code>Athena::Framework::Spec::WebTestCase</code>"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP-methods","title":"Methods","text":""},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_cookie_has_value(name,value,path,domain,description,*,file,line)","title":"<code>#assert_cookie_has_value(name : String, value : String, path : String | Nil = nil, domain : String | Nil = nil, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the value of the cookie with the provided name, and optionally path and domain, equals that of the provided value</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_request_attribute_equals(name,value,description,*,file,line)","title":"<code>#assert_request_attribute_equals(name : String, value : _, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the request attribute with the provided name equals the provided value.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_format_equals(format,description,*,file,line)","title":"<code>#assert_response_format_equals(format : String, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the format of the response equals the provided format.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_has_cookie(name,path,domain,description,*,file,line)","title":"<code>#assert_response_has_cookie(name : String, path : String | Nil = nil, domain : String | Nil = nil, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response has a cookie with the provided name, and optionally path and domain.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_has_header(name,description,*,file,line)","title":"<code>#assert_response_has_header(name : String, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response has a header with the provided name.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_has_status(status,description,*,file,line)","title":"<code>#assert_response_has_status(status : ::HTTP::Status | Int32, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response has the same status as the one provided.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_header_equals(name,value,description,*,file,line)","title":"<code>#assert_response_header_equals(name : String, value : String, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the value of the header with the provided name, equals that of the provided value.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_header_not_equals(name,value,description,*,file,line)","title":"<code>#assert_response_header_not_equals(name : String, value : String, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the value of the header with the provided name, does not equal that of the provided value.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_is_successful(description,*,file,line)","title":"<code>#assert_response_is_successful(description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response returns with a successful? status code.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_is_unprocessable(description,*,file,line)","title":"<code>#assert_response_is_unprocessable(description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response returns with status of <code>422 Unprocessable Entity</code>.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_not_has_cookie(name,path,domain,description,*,file,line)","title":"<code>#assert_response_not_has_cookie(name : String, path : String | Nil = nil, domain : String | Nil = nil, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response does not have a cookie with the provided name, and optionally path and domain.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_not_has_header(name,description,*,file,line)","title":"<code>#assert_response_not_has_header(name : String, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response does not have a header with the provided name.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_response_redirects(location,status,description,*,file,line)","title":"<code>#assert_response_redirects(location : String | Nil = nil, status : ::HTTP::Status | Int32 | Nil = nil, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the response returns with a redirection? status code. Optionally allows also asserting the <code>location</code> header is that of the provided location, and/or the status is equal to the provided status.</p> View source"},{"location":"Framework/Spec/Expectations/HTTP/#Athena::Framework::Spec::Expectations::HTTP#assert_route_equals(name,parameters,description,*,file,line)","title":"<code>#assert_route_equals(name : String, parameters : Hash | Nil = nil, description : String | Nil = nil, *, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts the request was matched against the route with the provided name.</p> View source"},{"location":"Framework/Spec/HTTPBrowser/","title":"HTTPBrowser","text":""},{"location":"Framework/Spec/HTTPBrowser/#Athena::Framework::Spec::HTTPBrowser","title":"class <code>Athena::Framework::Spec::HTTPBrowser</code> inherits <code>Athena::Framework::Spec::AbstractBrowser</code>","text":"<p>Simulates a browser and makes a requests to <code>ATH::RouteHandler</code>.</p>"},{"location":"Framework/Spec/HTTPBrowser/#Athena::Framework::Spec::HTTPBrowser-methods","title":"Methods","text":""},{"location":"Framework/Spec/HTTPBrowser/#Athena::Framework::Spec::HTTPBrowser#container","title":"<code>#container : ADI::Spec::MockableServiceContainer</code>","text":"<p>Returns a reference to an <code>ADI::Spec::MockableServiceContainer</code> to allow configuring the container before a test.</p> View source"},{"location":"Framework/Spec/WebTestCase/","title":"WebTestCase","text":""},{"location":"Framework/Spec/WebTestCase/#Athena::Framework::Spec::WebTestCase","title":"abstract struct <code>Athena::Framework::Spec::WebTestCase</code> inherits <code>Athena::Spec::TestCase</code>","text":"<p>Base <code>ASPEC::TestCase</code> for web based integration tests.</p> <p>Note</p> <p>Currently only <code>API</code> based tests are supported. This type exists to allow for introduction of other types in the future.</p> Included modules <code>Athena::Framework::Spec::Expectations::HTTP</code> Direct known subclasses <code>Athena::Framework::Spec::APITestCase</code>"},{"location":"Framework/Spec/WebTestCase/#Athena::Framework::Spec::WebTestCase-constructors","title":"Constructors","text":""},{"location":"Framework/Spec/WebTestCase/#Athena::Framework::Spec::WebTestCase.new","title":"<code>.new</code>","text":"View source"},{"location":"Framework/Spec/WebTestCase/#Athena::Framework::Spec::WebTestCase-methods","title":"Methods","text":""},{"location":"Framework/Spec/WebTestCase/#Athena::Framework::Spec::WebTestCase#create_client","title":"<code>#create_client : AbstractBrowser</code>","text":"<p>Returns the <code>AbstractBrowser</code> instance to which requests should be made against.</p> View source"},{"location":"Framework/StreamedResponse/","title":"StreamedResponse","text":""},{"location":"Framework/StreamedResponse/#Athena::Framework::StreamedResponse","title":"class <code>Athena::Framework::StreamedResponse</code> inherits <code>Athena::Framework::Response</code>","text":"<p>Represents an <code>ATH::Response</code> whose content should be streamed to the client as opposed to being written all at once. This can be useful in cases where the response content is too large to fit into memory.</p> <p>The content is stored in a proc that gets called when <code>self</code> is being written to the response IO. How the output gets written can be customized via an <code>ATH::Response::Writer</code>.</p>"},{"location":"Framework/StreamedResponse/#Athena::Framework::StreamedResponse-constructors","title":"Constructors","text":""},{"location":"Framework/StreamedResponse/#Athena::Framework::StreamedResponse.new(status,headers,&)","title":"<code>.new(status : HTTP::Status | Int32 = HTTP::Status::OK, headers : HTTP::Headers | ATH::Response::Headers = ATH::Response::Headers.new, &amp;block : IO -&gt; Nil)</code>","text":"<p>Creates a new response with optional status, and headers arguments.</p> <p>The block is captured and called when <code>self</code> is being written to the response's <code>IO</code>. This can be useful to reduce memory overhead when needing to return large responses.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/users\")]\n  def users : ATH::Response\n    ATH::StreamedResponse.new headers: HTTP::Headers{\"content-type\" =&gt; \"application/json; charset=UTF-8\"} do |io|\n      User.all.to_json io\n    end\n  end\nend\n\nATH.run\n\n# GET /users # =&gt; [{\"id\":1,...},...]\n</code></pre> View source"},{"location":"Framework/StreamedResponse/#Athena::Framework::StreamedResponse.new(callback,status,headers)","title":"<code>.new(callback : Proc(IO, Nil), status : HTTP::Status | Int32 = HTTP::Status::OK, headers : HTTP::Headers | ATH::Response::Headers = ATH::Response::Headers.new)</code>","text":"<p>Creates a new response with the provided callback and optional status, and headers arguments.</p> <p>The proc is called when <code>self</code> is being written to the response's <code>IO</code>.</p> View source"},{"location":"Framework/StreamedResponse/#Athena::Framework::StreamedResponse-methods","title":"Methods","text":""},{"location":"Framework/StreamedResponse/#Athena::Framework::StreamedResponse#content=(callback)","title":"<code>#content=(callback : Proc(IO, Nil))</code>","text":"<p>Updates the callback of <code>self</code>.</p> View source"},{"location":"Framework/View/","title":"View","text":""},{"location":"Framework/View/#Athena::Framework::View","title":"class <code>Athena::Framework::View(T)</code> inherits <code>Reference</code>","text":"<p>An <code>ATH::View</code> represents an <code>ATH::Response</code>, but in a format agnostic way.</p> <p>Returning a <code>ATH::View</code> is essentially the same as returning the data directly; but allows customizing the response status and headers without needing to render the response body within the controller as an <code>ATH::Response</code>.</p> <pre><code>require \"athena\"\n\nclass HelloController &lt; ATH::Controller\n  @[ARTA::Get(\"/{name}\")]\n  def say_hello(name : String) : NamedTuple(greeting: String)\n    {greeting: \"Hello #{name}\"}\n  end\n\n  @[ARTA::Get(\"/view/{name}\")]\n  def say_hello_view(name : String) : ATH::View(NamedTuple(greeting: String))\n    self.view({greeting: \"Hello #{name}\"}, :im_a_teapot)\n  end\nend\n\nATH.run\n\n# GET /Fred      # =&gt; 200 {\"greeting\":\"Hello Fred\"}\n# GET /view/Fred # =&gt; 418 {\"greeting\":\"Hello Fred\"}\n</code></pre> <p>See the negotiation component for more information.</p> Included modules <code>Athena::Framework::ViewBase</code>"},{"location":"Framework/View/#Athena::Framework::View-constructors","title":"Constructors","text":""},{"location":"Framework/View/#Athena::Framework::View.create_redirect(url,status,headers)","title":"<code>.create_redirect(url : String, status : HTTP::Status = HTTP::Status::FOUND, headers : HTTP::Headers = HTTP::Headers.new) : self</code>","text":"<p>Creates a view instance that'll redirect to the provided url. See <code>#location</code>.</p> <p>Optionally allows setting the underlying status and/or headers.</p> View source"},{"location":"Framework/View/#Athena::Framework::View.create_route_redirect(route,params,status,headers)","title":"<code>.create_route_redirect(route : String, params : Hash(String, _) = Hash(String, String | ::Nil).new, status : HTTP::Status = HTTP::Status::FOUND, headers : HTTP::Headers = HTTP::Headers.new) : self</code>","text":"<p>Creates a view instance that'll redirect to the provided route. See <code>#route</code>.</p> <p>Optionally allows setting the underlying route params, status, and/or headers.</p> View source"},{"location":"Framework/View/#Athena::Framework::View.new(data,status,headers)","title":"<code>.new(data : T | Nil = nil, status : HTTP::Status | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Framework/View/#Athena::Framework::View-methods","title":"Methods","text":""},{"location":"Framework/View/#Athena::Framework::View#context","title":"<code>#context : ATH::View::Context</code>","text":"View source"},{"location":"Framework/View/#Athena::Framework::View#context=(context)","title":"<code>#context=(context : ATH::View::Context)</code>","text":"View source"},{"location":"Framework/View/#Athena::Framework::View#data","title":"<code>#data : T</code>","text":"<p>The response data.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#data=(data)","title":"<code>#data=(data : T)</code>","text":"<p>The response data.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#format","title":"<code>#format : String | ::Nil</code>","text":"<p>The format the view should be rendered in.</p> <p>The format must be registered with the <code>ATH::Request::FORMATS</code> hash; either as a built in format, or a custom one that has registered via <code>ATH::Request.register_format</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#format=(format)","title":"<code>#format=(format : String | Nil)</code>","text":"<p>The format the view should be rendered in.</p> <p>The format must be registered with the <code>ATH::Request::FORMATS</code> hash; either as a built in format, or a custom one that has registered via <code>ATH::Request.register_format</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#headers","title":"<code>#headers : ATH::Response::Headers</code>","text":"<p>Returns the headers of the underlying <code>#response</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#headers=(headers)","title":"<code>#headers=(headers : HTTP::Headers) : Nil</code>","text":"<p>Sets the headers that should be returned as part of the underlying <code>#response</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#location","title":"<code>#location : String | ::Nil</code>","text":"<p>Returns the <code>URL</code> that the current request should be redirected to.</p> <p>See the Location header documentation.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#location=(location)","title":"<code>#location=(location : String) : Nil</code>","text":"<p>Sets the redirect <code>#location</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#response","title":"<code>#response : ATH::Response</code>","text":"<p>The wrapped <code>ATH::Response</code> instance.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#response=(response)","title":"<code>#response=(response : ATH::Response)</code>","text":"<p>The wrapped <code>ATH::Response</code> instance.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#return_type","title":"<code>#return_type : T.class</code>","text":"<p>Returns the type of the data represented by <code>self</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#route","title":"<code>#route : String | ::Nil</code>","text":"<p>Returns the name of the route the current request should be redirected to.</p> <p>See the URL Generation documentation.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#route=(route)","title":"<code>#route=(route : String) : Nil</code>","text":"<p>Sets the redirect <code>#route</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#route_params","title":"<code>#route_params : Hash(String, String | ::Nil)</code>","text":"<p>The parameters that should be used when constructing the redirect <code>#route</code> URL.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#route_params=(route_params)","title":"<code>#route_params=(route_params : Hash(String, String | Nil))</code>","text":"<p>The parameters that should be used when constructing the redirect <code>#route</code> URL.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#set_header(name,value)","title":"<code>#set_header(name : String, value : String) : Nil</code>","text":"<p>Adds the provided header name and value to the underlying <code>#response</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#set_header(name,value)","title":"<code>#set_header(name : String, value : _) : Nil</code>","text":"<p>Adds the provided header name and value to the underlying <code>#response</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#status","title":"<code>#status : HTTP::Status | ::Nil</code>","text":"<p>The <code>HTTP::Status</code> of the underlying <code>#response</code>.</p> View source"},{"location":"Framework/View/#Athena::Framework::View#status=(status)","title":"<code>#status=(status : HTTP::Status | Nil)</code>","text":"<p>The <code>HTTP::Status</code> of the underlying <code>#response</code>.</p> View source"},{"location":"Framework/View/ConfigurableViewHandlerInterface/","title":"ConfigurableViewHandlerInterface","text":""},{"location":"Framework/View/ConfigurableViewHandlerInterface/#Athena::Framework::View::ConfigurableViewHandlerInterface","title":"module <code>Athena::Framework::View::ConfigurableViewHandlerInterface</code>","text":"<p>Specialized <code>ATH::View::ViewHandlerInterface</code> that allows controlling various serialization <code>ATH::View::Context</code> aspects dynamically.</p> Included modules <code>Athena::Framework::View::ViewHandlerInterface</code> Direct including types <code>Athena::Framework::View::ViewHandler</code>"},{"location":"Framework/View/ConfigurableViewHandlerInterface/#Athena::Framework::View::ConfigurableViewHandlerInterface-methods","title":"Methods","text":""},{"location":"Framework/View/ConfigurableViewHandlerInterface/#Athena::Framework::View::ConfigurableViewHandlerInterface#emit_nil=(emit_nil)","title":"abstract <code>#emit_nil=(emit_nil : Bool) : Nil</code>","text":"<p>Determines if properties with <code>nil</code> values should be emitted.</p> View source"},{"location":"Framework/View/ConfigurableViewHandlerInterface/#Athena::Framework::View::ConfigurableViewHandlerInterface#serialization_groups=(groups)","title":"abstract <code>#serialization_groups=(groups : Enumerable(String)) : Nil</code>","text":"<p>Sets the groups that should be used as part of <code>ASR::ExclusionStrategies::Groups</code>.</p> View source"},{"location":"Framework/View/ConfigurableViewHandlerInterface/#Athena::Framework::View::ConfigurableViewHandlerInterface#serialization_version=(version)","title":"abstract <code>#serialization_version=(version : SemanticVersion) : Nil</code>","text":"<p>Sets the version that should be used as part of <code>ASR::ExclusionStrategies::Version</code>.</p> View source"},{"location":"Framework/View/Context/","title":"Context","text":""},{"location":"Framework/View/Context/#Athena::Framework::View::Context","title":"class <code>Athena::Framework::View::Context</code> inherits <code>Reference</code>","text":"<p>Represents (de)serialization options in a serializer agnostic way.</p>"},{"location":"Framework/View/Context/#Athena::Framework::View::Context-methods","title":"Methods","text":""},{"location":"Framework/View/Context/#Athena::Framework::View::Context#add_exclusion_strategy(strategy)","title":"<code>#add_exclusion_strategy(strategy : ASR::ExclusionStrategies::ExclusionStrategyInterface) : self</code>","text":"<p>Adds the provided strategy to the <code>#exclusion_strategies</code> array.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#add_group(group)","title":"<code>#add_group(group : String) : self</code>","text":"<p>Adds the provided group to the <code>#groups</code> array.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#add_groups(groups)","title":"<code>#add_groups(groups : Enumerable(String)) : self</code>","text":"<p>Adds the provided groups to the <code>#groups</code> array.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#add_groups(*)","title":"<code>#add_groups(*groups : String) : self</code>","text":"<p>Adds the provided groups to the <code>#groups</code> array.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#emit_nil=(emit_nil)","title":"<code>#emit_nil=(emit_nil : Bool | Nil)</code>","text":"<p>Determines if properties with <code>nil</code> values should be emitted.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#emit_nil?","title":"<code>#emit_nil? : Bool | ::Nil</code>","text":"<p>Determines if properties with <code>nil</code> values should be emitted.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#exclusion_strategies","title":"<code>#exclusion_strategies</code>","text":"<p>Returns any <code>ASR::ExclusionStrategies::ExclusionStrategyInterface</code> that should be used by the serializer.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#groups","title":"<code>#groups : Set(String) | ::Nil</code>","text":"<p>Returns the groups that can be used to create different \"views\" of an object.</p> <p><code>ASR::ExclusionStrategies::Groups</code> is an example of this.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#groups=(groups)","title":"<code>#groups=(groups : Enumerable(String)) : self</code>","text":"<p>Sets the <code>#groups</code> array to the provided groups.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#version","title":"<code>#version : SemanticVersion | ::Nil</code>","text":"<p>Represents the version of an object. Can be used to control what properties are serialized based on the version.</p> <p><code>ASR::ExclusionStrategies::Version</code> is an example of this.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#version=(version)","title":"<code>#version=(version : SemanticVersion | Nil)</code>","text":"<p>Represents the version of an object. Can be used to control what properties are serialized based on the version.</p> <p><code>ASR::ExclusionStrategies::Version</code> is an example of this.</p> View source"},{"location":"Framework/View/Context/#Athena::Framework::View::Context#version=(version)","title":"<code>#version=(version : String) : self</code>","text":"<p>Sets the <code>#version</code> to the provided version.</p> View source"},{"location":"Framework/View/FormatHandlerInterface/","title":"FormatHandlerInterface","text":""},{"location":"Framework/View/FormatHandlerInterface/#Athena::Framework::View::FormatHandlerInterface","title":"module <code>Athena::Framework::View::FormatHandlerInterface</code>","text":"<p>Represents custom logic that should be applied for a specific format in order to render an <code>ATH::View</code> into an <code>ATH::Response</code> that is not handled by default by Athena. E.g. <code>HTML</code>.</p> <pre><code># Register our handler as a service.\n@[ADI::Register]\nclass HTMLFormatHandler\n  # Implement the interface.\n  include Athena::Framework::View::FormatHandlerInterface\n\n  # :inherit:\n  #\n  # Turn the provided data into a response that can be returned to the client.\n  def call(view_handler : ATH::View::ViewHandlerInterface, view : ATH::ViewBase, request : ATH::Request, format : String) : ATH::Response\n    ATH::Response.new \"&lt;h1&gt;#{view.data}&lt;/h1&gt;\", headers: HTTP::Headers{\"content-type\" =&gt; \"text/html\"}\n  end\n\n  # :inherit:\n  #\n  # Specify that `self` handles the `HTML` format.\n  def format : String\n    \"html\"\n  end\nend\n</code></pre> <p>The implementation for <code>HTML</code> for example could use <code>.to_s</code> as depicted here, or utilize a templating engine, possibly taking advantage of custom annotations to allow specifying the related template name.</p>"},{"location":"Framework/View/FormatHandlerInterface/#Athena::Framework::View::FormatHandlerInterface-constants","title":"Constants","text":""},{"location":"Framework/View/FormatHandlerInterface/#Athena::Framework::View::FormatHandlerInterface::TAG","title":"<code>TAG = \"athena.format_handler\"</code>","text":""},{"location":"Framework/View/FormatHandlerInterface/#Athena::Framework::View::FormatHandlerInterface-methods","title":"Methods","text":""},{"location":"Framework/View/FormatHandlerInterface/#Athena::Framework::View::FormatHandlerInterface#call(view_handler,view,request,format)","title":"abstract <code>#call(view_handler : ATH::View::ViewHandlerInterface, view : ATH::View, request : ATH::Request, format : String) : ATH::Response</code>","text":"<p>Responsible for returning an <code>ATH::Response</code> for the provided view and request in the provided format.</p> <p>The <code>ATH::View::ViewHandlerInterface</code> is also provided to ease response creation.</p> View source"},{"location":"Framework/View/FormatHandlerInterface/#Athena::Framework::View::FormatHandlerInterface#format","title":"abstract <code>#format : String</code>","text":"<p>Returns the format that <code>self</code> handles.</p> <p>The format must be registered with the <code>ATH::Request::FORMATS</code> hash; either as a built in format, or a custom one that has registered via <code>ATH::Request.register_format</code>.</p> View source"},{"location":"Framework/View/FormatNegotiator/","title":"FormatNegotiator","text":""},{"location":"Framework/View/FormatNegotiator/#Athena::Framework::View::FormatNegotiator","title":"class <code>Athena::Framework::View::FormatNegotiator</code> inherits <code>Athena::Negotiation::Negotiator</code>","text":"<p>An extension of <code>ANG::Negotiator</code> that supports resolving the format based on an applications <code>ATH::Config::ContentNegotiation</code> rules.</p> <p>See the negotiation component for more information.</p>"},{"location":"Framework/View/FormatNegotiator/#Athena::Framework::View::FormatNegotiator-constructors","title":"Constructors","text":""},{"location":"Framework/View/FormatNegotiator/#Athena::Framework::View::FormatNegotiator.new(request_store,config,mime_types)","title":"<code>.new(request_store : ATH::RequestStore, config : ATH::Config::ContentNegotiation | Nil, mime_types : Hash(String, Array(String)) = Hash(String, Array(String)).new)</code>","text":"View source"},{"location":"Framework/View/FormatNegotiator/#Athena::Framework::View::FormatNegotiator-methods","title":"Methods","text":""},{"location":"Framework/View/FormatNegotiator/#Athena::Framework::View::FormatNegotiator#best(header,priorities,strict)","title":"<code>#best(header : String, priorities : Indexable(String) | Nil = nil, strict : Bool = false) : HeaderType | Nil</code>","text":"<p>:inherit: ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Framework/View/ViewHandler/","title":"ViewHandler","text":""},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler","title":"class <code>Athena::Framework::View::ViewHandler</code> inherits <code>Reference</code>","text":"<p>Default implementation of <code>ATH::View::ConfigurableViewHandlerInterface</code>.</p> Included modules <code>Athena::Framework::View::ConfigurableViewHandlerInterface</code>"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler-constructors","title":"Constructors","text":""},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler.new(config,url_generator,serializer,request_store,format_handlers)","title":"<code>.new(config : ATH::Config::ViewHandler, url_generator : ART::Generator::Interface, serializer : ASR::SerializerInterface, request_store : ATH::RequestStore, format_handlers : Array(Athena::Framework::View::FormatHandlerInterface))</code>","text":"View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler-methods","title":"Methods","text":""},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#create_redirect_response(view,location,format)","title":"<code>#create_redirect_response(view : ATH::ViewBase, location : String, format : String) : ATH::Response</code>","text":"<p>Creates an <code>ATH::Response</code> based on the provided view that'll redirect to the provided location.</p> <p>location may either be a <code>URL</code> or the name of a route.</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#create_response(view,request,format)","title":"<code>#create_response(view : ATH::ViewBase, request : ATH::Request, format : String) : ATH::Response</code>","text":"<p>Creates an <code>ATH::Response</code> based on the provided view and request.</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#emit_nil=(emit_nil)","title":"<code>#emit_nil=(emit_nil : Bool) : Nil</code>","text":"<p>Determines if properties with <code>nil</code> values should be emitted.</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#handle(view,request)","title":"<code>#handle(view : ATH::ViewBase, request : ATH::Request | Nil = nil) : ATH::Response</code>","text":"<p>Handles the conversion of the provided view into an <code>ATH::Response</code>.</p> <p>If no request is provided, it is fetched from <code>ATH::RequestStore</code>.</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#register_handler(format,handler)","title":"<code>#register_handler(format : String, handler : ATH::View::ViewHandlerInterface::HandlerType) : Nil</code>","text":"<p>Registers the provided handler to handle the provided format.</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#serialization_groups=(groups)","title":"<code>#serialization_groups=(groups : Enumerable(String)) : Nil</code>","text":"<p>Sets the groups that should be used as part of <code>ASR::ExclusionStrategies::Groups</code>.</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#serialization_version=(version)","title":"<code>#serialization_version=(version : String) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#serialization_version=(version)","title":"<code>#serialization_version=(version : SemanticVersion) : Nil</code>","text":"<p>Sets the version that should be used as part of <code>ASR::ExclusionStrategies::Version</code>.</p> View source"},{"location":"Framework/View/ViewHandler/#Athena::Framework::View::ViewHandler#supports?(format)","title":"<code>#supports?(format : String) : Bool</code>","text":"<p>Determines if <code>self</code> can handle the provided format.</p> <p>First checks if a custom format handler supports the provided format, otherwise falls back on the <code>ASR::SerializerInterface</code>.</p> View source"},{"location":"Framework/View/ViewHandlerInterface/","title":"ViewHandlerInterface","text":""},{"location":"Framework/View/ViewHandlerInterface/#Athena::Framework::View::ViewHandlerInterface","title":"module <code>Athena::Framework::View::ViewHandlerInterface</code>","text":"<p>Processes an <code>ATH::View</code> into an <code>ATH::Response</code> of the proper format.</p> <p>See the negotiation component for more information.</p> Direct including types <code>Athena::Framework::View::ConfigurableViewHandlerInterface</code>"},{"location":"Framework/View/ViewHandlerInterface/#Athena::Framework::View::ViewHandlerInterface-methods","title":"Methods","text":""},{"location":"Framework/View/ViewHandlerInterface/#Athena::Framework::View::ViewHandlerInterface#create_redirect_response(view,location,format)","title":"abstract <code>#create_redirect_response(view : ATH::ViewBase, location : String, format : String) : ATH::Response</code>","text":"<p>Creates an <code>ATH::Response</code> based on the provided view that'll redirect to the provided location.</p> <p>location may either be a <code>URL</code> or the name of a route.</p> View source"},{"location":"Framework/View/ViewHandlerInterface/#Athena::Framework::View::ViewHandlerInterface#create_response(view,request,format)","title":"abstract <code>#create_response(view : ATH::ViewBase, request : ATH::Request, format : String) : ATH::Response</code>","text":"<p>Creates an <code>ATH::Response</code> based on the provided view and request.</p> View source"},{"location":"Framework/View/ViewHandlerInterface/#Athena::Framework::View::ViewHandlerInterface#handle(view,request)","title":"abstract <code>#handle(view : ATH::ViewBase, request : ATH::Request | Nil = nil) : ATH::Response</code>","text":"<p>Handles the conversion of the provided view into an <code>ATH::Response</code>.</p> <p>If no request is provided, it is fetched from <code>ATH::RequestStore</code>.</p> View source"},{"location":"Framework/View/ViewHandlerInterface/#Athena::Framework::View::ViewHandlerInterface#register_handler(format,handler)","title":"abstract <code>#register_handler(format : String, handler : ATH::View::ViewHandlerInterface::HandlerType) : Nil</code>","text":"<p>Registers the provided handler to handle the provided format.</p> View source"},{"location":"Framework/View/ViewHandlerInterface/#Athena::Framework::View::ViewHandlerInterface#supports?(format)","title":"abstract <code>#supports?(format : String) : Bool</code>","text":"<p>Determines if <code>self</code> can handle the provided format.</p> <p>First checks if a custom format handler supports the provided format, otherwise falls back on the <code>ASR::SerializerInterface</code>.</p> View source"},{"location":"Framework/View/ViewHandlerInterface/HandlerType/","title":"HandlerType","text":""},{"location":"Framework/View/ViewHandlerInterface/HandlerType/#Athena::Framework::View::ViewHandlerInterface::HandlerType","title":"alias <code>Athena::Framework::View::ViewHandlerInterface::HandlerType</code>","text":"<p>The possible types for a view format handler.</p> Alias definition <code>Athena::Framework::View::FormatHandlerInterface | Athena::Framework::View::ViewHandlerInterface, Athena::Framework::ViewBase, Athena::Framework::Request, String -&gt; Athena::Framework::Response</code>"},{"location":"Framework/ViewBase/","title":"ViewBase","text":""},{"location":"Framework/ViewBase/#Athena::Framework::ViewBase","title":"module <code>Athena::Framework::ViewBase</code>","text":"<p>Parent type of a view just used for typing.</p> <p>See <code>ATH::View</code>.</p> Direct including types <code>Athena::Framework::View(T)</code>"},{"location":"ImageSize/","title":"ImageSize","text":""},{"location":"ImageSize/#Athena::ImageSize","title":"module <code>Athena::ImageSize</code>","text":"<p>The <code>Athena::ImageSize</code> component, <code>AIS</code> for short, allows creating an <code>AIS::Image</code> from various image formats. The component has no dependencies and is framework agnostic.</p> <p>The image can be provided as a file path, or an <code>IO</code>, such as the response to an HTTP request. The image is processed byte by byte, so large images can be handled without loading the full image into memory.</p> <p>Warning</p> <p>This component is NOT intended to check if a file is a valid image and may return nonsensical values if given a non-image file.</p>"},{"location":"ImageSize/#Athena::ImageSize--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Otherwise, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-image_size:\n    github: athena-framework/image-size\n    version: ~&gt; 0.1.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-image_size\"</code>.</p> <p>From here you can use <code>AIS::Image</code> as needed.</p>"},{"location":"ImageSize/#Athena::ImageSize-constants","title":"Constants","text":""},{"location":"ImageSize/#Athena::ImageSize::VERSION","title":"<code>VERSION = \"0.1.2\"</code>","text":""},{"location":"ImageSize/#Athena::ImageSize-class-methods","title":"Class methods","text":""},{"location":"ImageSize/#Athena::ImageSize.dpi","title":"<code>.dpi : Float64</code>","text":"<p>Represents the DPI (Dots Per Inch) used to calculate dimensions of <code>AIS::Image::Format::SVG</code> images, defaulting to <code>72.0</code>.</p> View source"},{"location":"ImageSize/#Athena::ImageSize.dpi=(dpi)","title":"<code>.dpi=(dpi : Float64)</code>","text":"<p>Represents the DPI (Dots Per Inch) used to calculate dimensions of <code>AIS::Image::Format::SVG</code> images, defaulting to <code>72.0</code>.</p> View source"},{"location":"ImageSize/aliases/","title":"Aliases","text":""},{"location":"ImageSize/aliases/#AIS","title":"alias <code>AIS</code>","text":"<p>Convenience alias to make referencing <code>Athena::ImageSize</code> types easier.</p> Alias definition <code>Athena::ImageSize</code>"},{"location":"ImageSize/Image/","title":"Image","text":""},{"location":"ImageSize/Image/#Athena::ImageSize::Image","title":"struct <code>Athena::ImageSize::Image</code> inherits <code>Struct</code>","text":"<p>Represents information related to a processed image.</p> <pre><code>pp AIS::Image.from_file_path \"spec/images/jpeg/436x429_8_3.jpeg\" # =&gt;\n# Athena::ImageSize::Image(\n# @bits=8,\n# @channels=3,\n# @format=JPEG,\n# @height=429,\n# @width=436)\n</code></pre>"},{"location":"ImageSize/Image/#Athena::ImageSize::Image-constructors","title":"Constructors","text":""},{"location":"ImageSize/Image/#Athena::ImageSize::Image.from_file_path(path)","title":"<code>.from_file_path(path : String | Path) : self</code>","text":"<p>Attempts to process the image at the provided path, raising an exception if either the images fails to process or is an unsupported format.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image.from_io(io)","title":"<code>.from_io(io : IO) : self</code>","text":"<p>Attempts to process the image from the provided io, raising an exception if either the images fails to process or is an unsupported format.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image-class-methods","title":"Class methods","text":""},{"location":"ImageSize/Image/#Athena::ImageSize::Image.from_file_path?(path)","title":"<code>.from_file_path?(path : String | Path) : self | Nil</code>","text":"<p>Attempts to process the image at the provided path, returning <code>nil</code> if either the images fails to process or is an unsupported format.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image.from_io?(io)","title":"<code>.from_io?(io : IO) : self | Nil</code>","text":"<p>Attempts to process the image from the provided io, returning <code>nil</code> if either the images fails to process or is an unsupported format.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image-methods","title":"Methods","text":""},{"location":"ImageSize/Image/#Athena::ImageSize::Image#bits","title":"<code>#bits : Int32 | ::Nil</code>","text":"<p>Returns the number of bits per pixel within this image, if available.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image#channels","title":"<code>#channels : Int32 | ::Nil</code>","text":"<p>Returns the number of channels within this image, if available.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image#format","title":"<code>#format : Athena::ImageSize::Image::Format</code>","text":"<p>Returns the format of this image.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image#height","title":"<code>#height : Int32</code>","text":"<p>Returns the width of this image in pixels.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image#size","title":"<code>#size : Tuple(Int32, Int32)</code>","text":"<p>Returns a tuple of this images size in the format of <code>{width, height}</code>.</p> View source"},{"location":"ImageSize/Image/#Athena::ImageSize::Image#width","title":"<code>#width : Int32</code>","text":"<p>Returns the width of this image in pixels.</p> View source"},{"location":"ImageSize/Image/Format/","title":"Format","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format","title":"enum <code>Athena::ImageSize::Image::Format</code>","text":"<p>Enumerates the supported image formats.</p>"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format-members","title":"Members","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::APNG","title":"<code>APNG = 0</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::BMP","title":"<code>BMP = 1</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::CUR","title":"<code>CUR = 2</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::GIF","title":"<code>GIF = 3</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::ICO","title":"<code>ICO = 4</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::JPEG","title":"<code>JPEG = 5</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::MNG","title":"<code>MNG = 6</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::PNG","title":"<code>PNG = 7</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::PSD","title":"<code>PSD = 8</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::SVG","title":"<code>SVG = 9</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::SWF","title":"<code>SWF = 10</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::TIFF","title":"<code>TIFF = 11</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format::WEBP","title":"<code>WEBP = 12</code>","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format-methods","title":"Methods","text":""},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#apng?","title":"<code>#apng?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#bmp?","title":"<code>#bmp?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#cur?","title":"<code>#cur?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#gif?","title":"<code>#gif?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#ico?","title":"<code>#ico?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#jpeg?","title":"<code>#jpeg?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#mng?","title":"<code>#mng?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#png?","title":"<code>#png?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#psd?","title":"<code>#psd?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#svg?","title":"<code>#svg?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#swf?","title":"<code>#swf?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#tiff?","title":"<code>#tiff?</code>","text":"View source"},{"location":"ImageSize/Image/Format/#Athena::ImageSize::Image::Format#webp?","title":"<code>#webp?</code>","text":"View source"},{"location":"Negotiation/","title":"Negotiation","text":""},{"location":"Negotiation/#Athena::Negotiation","title":"module <code>Athena::Negotiation</code>","text":"<p>The <code>Athena::Negotiation</code> component allows an application to support content negotiation. The component has no dependencies and is framework agnostic; supporting various negotiators.</p>"},{"location":"Negotiation/#Athena::Negotiation--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Checkout the manual for some additional information on how to use it within the framework.</p> <p>If using it outside of the framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-negotiation:\n    github: athena-framework/negotiation\n    version: ~&gt; 0.1.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-negotiation\"</code>.</p>"},{"location":"Negotiation/#Athena::Negotiation--usage","title":"Usage","text":"<p>The main type of <code>Athena::Negotiation</code> is <code>ANG::AbstractNegotiator</code> which is used to implement negotiators for each <code>Accept*</code> header. <code>Athena::Negotiation</code> exposes class level getters for each negotiator; that return a lazily initialized singleton instance. Each negotiator exposes two methods: <code>ANG::AbstractNegotiator#best</code> and <code>ANG::AbstractNegotiator#ordered_elements</code>.</p>"},{"location":"Negotiation/#Athena::Negotiation--media-type","title":"Media Type","text":"<pre><code>negotiator = ANG.negotiator\n\naccept_header = \"text/html, application/xhtml+xml, application/xml;q=0.9\"\npriorities = [\"text/html; charset=UTF-8\", \"application/json\", \"application/xml;q=0.5\"]\n\naccept = negotiator.best(accept_header, priorities).not_nil!\n\naccept.media_range # =&gt; \"text/html\"\naccept.parameters  # =&gt; {\"charset\" =&gt; \"UTF-8\"}\n</code></pre> <p>The <code>ANG::Negotiator</code> type returns an <code>ANG::Accept</code>, or <code>nil</code> if negotiating the best media type has failed.</p>"},{"location":"Negotiation/#Athena::Negotiation--character-set","title":"Character Set","text":"<pre><code>negotiator = ANG.charset_negotiator\n\naccept_header = \"ISO-8859-1, UTF-8; q=0.9\"\npriorities = [\"iso-8859-1;q=0.3\", \"utf-8;q=0.9\", \"utf-16;q=1.0\"]\n\naccept = negotiator.best(accept_header, priorities).not_nil!\n\naccept.charset # =&gt; \"utf-8\"\naccept.quality # =&gt; 0.9\n</code></pre> <p>The <code>ANG::CharsetNegotiator</code> type returns an <code>ANG::AcceptCharset</code>, or <code>nil</code> if negotiating the best character set has failed.</p>"},{"location":"Negotiation/#Athena::Negotiation--encoding","title":"Encoding","text":"<pre><code>negotiator = ANG.encoding_negotiator\n\naccept_header = \"gzip;q=1.0, identity; q=0.5, *;q=0\"\npriorities = [\"gzip\", \"foo\"]\n\naccept = negotiator.best(accept_header, priorities).not_nil!\n\naccept.coding # =&gt; \"gzip\"\n</code></pre> <p>The <code>ANG::EncodingNegotiator</code> type returns an <code>ANG::AcceptEncoding</code>, or <code>nil</code> if negotiating the best encoding has failed.</p>"},{"location":"Negotiation/#Athena::Negotiation--language","title":"Language","text":"<pre><code>negotiator = ANG.language_negotiator\n\naccept_header = \"en; q=0.1, fr; q=0.4, zh-Hans-CN; q=0.9, de; q=0.2\"\npriorities = [\"de\", \"zh-Hans-CN\", \"en\"]\n\naccept = negotiator.best(accept_header, priorities).not_nil!\n\naccept.language # =&gt; \"zh\"\naccept.region   # =&gt; \"cn\"\naccept.script   # =&gt; \"hans\"\n</code></pre> <p>The <code>ANG::LanguageNegotiator</code> type returns an <code>ANG::AcceptLanguage</code>, or <code>nil</code> if negotiating the best language has failed.</p>"},{"location":"Negotiation/#Athena::Negotiation-constants","title":"Constants","text":""},{"location":"Negotiation/#Athena::Negotiation::VERSION","title":"<code>VERSION = \"0.1.4\"</code>","text":""},{"location":"Negotiation/#Athena::Negotiation-class-methods","title":"Class methods","text":""},{"location":"Negotiation/#Athena::Negotiation.charset_negotiator","title":"<code>.charset_negotiator</code>","text":"<p>Returns a lazily initialized <code>ANG::CharsetNegotiator</code> singleton instance.</p> View source"},{"location":"Negotiation/#Athena::Negotiation.encoding_negotiator","title":"<code>.encoding_negotiator</code>","text":"<p>Returns a lazily initialized <code>ANG::EncodingNegotiator</code> singleton instance.</p> View source"},{"location":"Negotiation/#Athena::Negotiation.language_negotiator","title":"<code>.language_negotiator</code>","text":"<p>Returns a lazily initialized <code>ANG::LanguageNegotiator</code> singleton instance.</p> View source"},{"location":"Negotiation/#Athena::Negotiation.negotiator","title":"<code>.negotiator</code>","text":"<p>Returns a lazily initialized <code>ANG::Negotiator</code> singleton instance.</p> View source"},{"location":"Negotiation/aliases/","title":"Aliases","text":""},{"location":"Negotiation/aliases/#ANG","title":"alias <code>ANG</code>","text":"<p>Convenience alias to make referencing <code>Athena::Negotiation</code> types easier.</p> Alias definition <code>Athena::Negotiation</code>"},{"location":"Negotiation/AbstractNegotiator/","title":"AbstractNegotiator","text":""},{"location":"Negotiation/AbstractNegotiator/#Athena::Negotiation::AbstractNegotiator","title":"abstract class <code>Athena::Negotiation::AbstractNegotiator(HeaderType)</code> inherits <code>Reference</code>","text":"<p>Base negotiator type.  Implements logic common to all negotiators.</p> Direct known subclasses <code>Athena::Negotiation::CharsetNegotiator</code> <code>Athena::Negotiation::EncodingNegotiator</code> <code>Athena::Negotiation::LanguageNegotiator</code> <code>Athena::Negotiation::Negotiator</code>"},{"location":"Negotiation/AbstractNegotiator/#Athena::Negotiation::AbstractNegotiator-methods","title":"Methods","text":""},{"location":"Negotiation/AbstractNegotiator/#Athena::Negotiation::AbstractNegotiator#best(header,priorities,strict)","title":"<code>#best(header : String, priorities : Indexable(String), strict : Bool = false) : HeaderType | Nil</code>","text":"<p>Returns the best <code>HeaderType</code> based on the provided header value and priorities.</p> <p>If strict is <code>true</code>, an <code>ANG::Exceptions::Exception</code> will be raised if the header contains an invalid value, otherwise it is ignored.</p> <p>See <code>Athena::Negotiation</code> for examples.</p> View source"},{"location":"Negotiation/AbstractNegotiator/#Athena::Negotiation::AbstractNegotiator#ordered_elements(header)","title":"<code>#ordered_elements(header : String) : Array(HeaderType)</code>","text":"<p>Returns an array of <code>HeaderType</code> that the provided header allows, ordered so that the <code>#best</code> match is first.</p> <pre><code>header = \"text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5\"\n\nordered_elements = ANG.negotiator.ordered_elements header\n\nordered_elements[0].media_range # =&gt; \"text/html\"\nordered_elements[1].media_range # =&gt; \"text/html\"\nordered_elements[2].media_range # =&gt; \"*/*\"\nordered_elements[3].media_range # =&gt; \"text/html\"\nordered_elements[4].media_range # =&gt; \"text/*\"\n</code></pre> View source"},{"location":"Negotiation/Accept/","title":"Accept","text":""},{"location":"Negotiation/Accept/#Athena::Negotiation::Accept","title":"struct <code>Athena::Negotiation::Accept</code> inherits <code>Athena::Negotiation::BaseAccept</code>","text":"<p>Represents an Accept header media type.</p> <pre><code>accept = ANG::Accept.new \"application/json; q = 0.75; charset = UTF-8\"\n\naccept.header            # =&gt; \"application/json; q = 0.75; charset = UTF-8\"\naccept.normalized_header # =&gt; \"application/json; charset=UTF-8\"\naccept.parameters        # =&gt; {\"charset\" =&gt; \"UTF-8\"}\naccept.quality           # =&gt; 0.75\naccept.type              # =&gt; \"application\"\naccept.sub_type          # =&gt; \"json\"\n</code></pre>"},{"location":"Negotiation/Accept/#Athena::Negotiation::Accept-constructors","title":"Constructors","text":""},{"location":"Negotiation/Accept/#Athena::Negotiation::Accept.new(value)","title":"<code>.new(value : String)</code>","text":"View source"},{"location":"Negotiation/Accept/#Athena::Negotiation::Accept-methods","title":"Methods","text":""},{"location":"Negotiation/Accept/#Athena::Negotiation::Accept#media_range","title":"<code>#media_range : String</code>","text":"<p>Returns the media range this <code>Accept</code> header represents.</p> <p>I.e. <code>#header</code> minus the <code>#quality</code> and <code>#parameters</code>.</p> View source"},{"location":"Negotiation/Accept/#Athena::Negotiation::Accept#sub_type","title":"<code>#sub_type : String</code>","text":"<p>Returns the sub type for this <code>Accept</code> header. E.x. if the <code>#media_range</code> is <code>application/json</code>, the sub type would be <code>json</code>.</p> View source"},{"location":"Negotiation/Accept/#Athena::Negotiation::Accept#type","title":"<code>#type : String</code>","text":"<p>Returns the type for this <code>Accept</code> header. E.x. if the <code>#media_range</code> is <code>application/json</code>, the type would be <code>application</code>.</p> View source"},{"location":"Negotiation/AcceptCharset/","title":"AcceptCharset","text":""},{"location":"Negotiation/AcceptCharset/#Athena::Negotiation::AcceptCharset","title":"struct <code>Athena::Negotiation::AcceptCharset</code> inherits <code>Athena::Negotiation::BaseAccept</code>","text":"<p>Represents an Accept-Charset header character set.</p> <pre><code>accept = ANG::AcceptCharset.new \"iso-8859-1; q = 0.5; key=value\"\n\naccept.header            # =&gt; \"iso-8859-1; q = 0.5; key=value\"\naccept.normalized_header # =&gt; \"iso-8859-1; key=value\"\naccept.parameters        # =&gt; {\"key\" =&gt; \"value\"}\naccept.quality           # =&gt; 0.5\naccept.charset           # =&gt; \"iso-8859-1\"\n</code></pre>"},{"location":"Negotiation/AcceptCharset/#Athena::Negotiation::AcceptCharset-methods","title":"Methods","text":""},{"location":"Negotiation/AcceptCharset/#Athena::Negotiation::AcceptCharset#charset","title":"<code>#charset : String</code>","text":"<p>Returns the character set this <code>AcceptCharset</code> header represents.</p> <p>I.e. <code>#header</code> minus the <code>#quality</code> and <code>#parameters</code>.</p> View source"},{"location":"Negotiation/AcceptEncoding/","title":"AcceptEncoding","text":""},{"location":"Negotiation/AcceptEncoding/#Athena::Negotiation::AcceptEncoding","title":"struct <code>Athena::Negotiation::AcceptEncoding</code> inherits <code>Athena::Negotiation::BaseAccept</code>","text":"<p>Represents an Accept-Encoding header character set.</p> <pre><code>accept = ANG::AcceptEncoding.new \"gzip; q = 0.5; key=value\"\n\naccept.header            # =&gt; \"gzip; q = 0.5; key=value\"\naccept.normalized_header # =&gt; \"gzip; key=value\"\naccept.parameters        # =&gt; {\"key\" =&gt; \"value\"}\naccept.quality           # =&gt; 0.5\naccept.coding            # =&gt; \"gzip\"\n</code></pre>"},{"location":"Negotiation/AcceptEncoding/#Athena::Negotiation::AcceptEncoding-methods","title":"Methods","text":""},{"location":"Negotiation/AcceptEncoding/#Athena::Negotiation::AcceptEncoding#coding","title":"<code>#coding : String</code>","text":"<p>Returns the content coding this <code>AcceptEncoding</code> header represents.</p> <p>I.e. <code>#header</code> minus the <code>#quality</code> and <code>#parameters</code>.</p> View source"},{"location":"Negotiation/AcceptLanguage/","title":"AcceptLanguage","text":""},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage","title":"struct <code>Athena::Negotiation::AcceptLanguage</code> inherits <code>Athena::Negotiation::BaseAccept</code>","text":"<p>Represents an Accept-Language header character set.</p> <pre><code>accept = ANG::AcceptLanguage.new \"zh-Hans-CN; q = 0.3; key=value\"\n\naccept.header            # =&gt; \"zh-Hans-CN; q = 0.3; key=value\"\naccept.normalized_header # =&gt; \"zh-Hans-CN; key=value\"\naccept.parameters        # =&gt; {\"key\" =&gt; \"value\"}\naccept.quality           # =&gt; 0.3\naccept.language          # =&gt; \"zh\"\naccept.region            # =&gt; \"cn\"\naccept.script            # =&gt; \"hans\"\n</code></pre>"},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage-constructors","title":"Constructors","text":""},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage.new(value)","title":"<code>.new(value : String)</code>","text":"View source"},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage-methods","title":"Methods","text":""},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage#language","title":"<code>#language : String</code>","text":"<p>Returns the language for this <code>AcceptLanguage</code> header. E.x. if the <code>#language_range</code> is <code>zh-Hans-CN</code>, the language would be <code>zh</code>.</p> View source"},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage#language_range","title":"<code>#language_range : String</code>","text":"<p>Returns the language range this <code>AcceptLanguage</code> header represents.</p> <p>I.e. <code>#header</code> minus the <code>#quality</code> and <code>#parameters</code>.</p> View source"},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage#region","title":"<code>#region : String | ::Nil</code>","text":"<p>Returns the region, if any, for this <code>AcceptLanguage</code> header. E.x. if the <code>#language_range</code> is <code>zh-Hans-CN</code>, the region would be <code>cn</code></p> View source"},{"location":"Negotiation/AcceptLanguage/#Athena::Negotiation::AcceptLanguage#script","title":"<code>#script : String | ::Nil</code>","text":"<p>Returns the script, if any, for this <code>AcceptLanguage</code> header. E.x. if the <code>#language_range</code> is <code>zh-Hans-CN</code>, the script would be <code>hans</code></p> View source"},{"location":"Negotiation/BaseAccept/","title":"BaseAccept","text":""},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept","title":"abstract struct <code>Athena::Negotiation::BaseAccept</code> inherits <code>Struct</code>","text":"<p>Base type for properties/logic all Accept* headers share.</p> Direct known subclasses <code>Athena::Negotiation::Accept</code> <code>Athena::Negotiation::AcceptCharset</code> <code>Athena::Negotiation::AcceptEncoding</code> <code>Athena::Negotiation::AcceptLanguage</code>"},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept-constructors","title":"Constructors","text":""},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept.new(header)","title":"<code>.new(header : String)</code>","text":"View source"},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept-methods","title":"Methods","text":""},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept#header","title":"<code>#header : String</code>","text":"<p>Returns the full unaltered header <code>self</code> represents. E.x. <code>text/html</code>, <code>unicode-1-1;q=0.8</code>, or <code>zh-Hans-CN</code>.</p> View source"},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept#normalized_header","title":"<code>#normalized_header : String</code>","text":"<p>Returns a normalized version of the <code>#header</code>, excluding the <code>#quality</code> parameter.</p> <p>This includes removing extraneous whitespace, and alphabetizing the <code>#parameters</code>.</p> View source"},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept#parameters","title":"<code>#parameters : Hash(String, String)</code>","text":"<p>Returns any extension parameters included in the header <code>self</code> represents. E.x. <code>charset=UTF-8</code> or <code>version=2</code>.</p> View source"},{"location":"Negotiation/BaseAccept/#Athena::Negotiation::BaseAccept#quality","title":"<code>#quality : Float32</code>","text":"<p>Returns the quality value of the header <code>self</code> represents.</p> View source"},{"location":"Negotiation/CharsetNegotiator/","title":"CharsetNegotiator","text":""},{"location":"Negotiation/CharsetNegotiator/#Athena::Negotiation::CharsetNegotiator","title":"class <code>Athena::Negotiation::CharsetNegotiator</code> inherits <code>Athena::Negotiation::AbstractNegotiator</code>","text":"<p>A <code>ANG::AbstractNegotiator</code> implementation to negotiate <code>ANG::AcceptCharset</code> headers.</p>"},{"location":"Negotiation/EncodingNegotiator/","title":"EncodingNegotiator","text":""},{"location":"Negotiation/EncodingNegotiator/#Athena::Negotiation::EncodingNegotiator","title":"class <code>Athena::Negotiation::EncodingNegotiator</code> inherits <code>Athena::Negotiation::AbstractNegotiator</code>","text":"<p>A <code>ANG::AbstractNegotiator</code> implementation to negotiate <code>ANG::AcceptEncoding</code> headers.</p>"},{"location":"Negotiation/Exceptions/","title":"Exceptions","text":""},{"location":"Negotiation/Exceptions/#Athena::Negotiation::Exceptions","title":"module <code>Athena::Negotiation::Exceptions</code>","text":"<p>Contains all custom exceptions defined within <code>Athena::Negotiation</code>.</p>"},{"location":"Negotiation/Exceptions/InvalidLanguage/","title":"InvalidLanguage","text":""},{"location":"Negotiation/Exceptions/InvalidLanguage/#Athena::Negotiation::Exceptions::InvalidLanguage","title":"class <code>Athena::Negotiation::Exceptions::InvalidLanguage</code> inherits <code>Athena::Negotiation::Exceptions::Negotiation</code>","text":"<p>Represents an invalid <code>ANG::AcceptLanguage</code> header.</p>"},{"location":"Negotiation/Exceptions/InvalidLanguage/#Athena::Negotiation::Exceptions::InvalidLanguage-constructors","title":"Constructors","text":""},{"location":"Negotiation/Exceptions/InvalidLanguage/#Athena::Negotiation::Exceptions::InvalidLanguage.new(language,cause)","title":"<code>.new(language : String, cause : Exception | Nil = nil)</code>","text":"View source"},{"location":"Negotiation/Exceptions/InvalidLanguage/#Athena::Negotiation::Exceptions::InvalidLanguage-methods","title":"Methods","text":""},{"location":"Negotiation/Exceptions/InvalidLanguage/#Athena::Negotiation::Exceptions::InvalidLanguage#language","title":"<code>#language : String</code>","text":"<p>Returns the invalid language code.</p> View source"},{"location":"Negotiation/Exceptions/InvalidMediaType/","title":"InvalidMediaType","text":""},{"location":"Negotiation/Exceptions/InvalidMediaType/#Athena::Negotiation::Exceptions::InvalidMediaType","title":"class <code>Athena::Negotiation::Exceptions::InvalidMediaType</code> inherits <code>Athena::Negotiation::Exceptions::Negotiation</code>","text":"<p>Represents an invalid <code>ANG::Accept</code> header.</p>"},{"location":"Negotiation/Exceptions/InvalidMediaType/#Athena::Negotiation::Exceptions::InvalidMediaType-constructors","title":"Constructors","text":""},{"location":"Negotiation/Exceptions/InvalidMediaType/#Athena::Negotiation::Exceptions::InvalidMediaType.new(media_range,cause)","title":"<code>.new(media_range : String, cause : Exception | Nil = nil)</code>","text":"View source"},{"location":"Negotiation/Exceptions/InvalidMediaType/#Athena::Negotiation::Exceptions::InvalidMediaType-methods","title":"Methods","text":""},{"location":"Negotiation/Exceptions/InvalidMediaType/#Athena::Negotiation::Exceptions::InvalidMediaType#media_range","title":"<code>#media_range : String</code>","text":"<p>Returns the invalid media range.</p> View source"},{"location":"Negotiation/Exceptions/Negotiation/","title":"Negotiation","text":""},{"location":"Negotiation/Exceptions/Negotiation/#Athena::Negotiation::Exceptions::Negotiation","title":"abstract class <code>Athena::Negotiation::Exceptions::Negotiation</code> inherits <code>Exception</code>","text":"<p>Base type of all <code>Athena::Negotiation</code> errors. Can be used to rescue any exception originating from <code>Athena::Negotiation</code>.</p> Direct known subclasses <code>Athena::Negotiation::Exceptions::InvalidLanguage</code> <code>Athena::Negotiation::Exceptions::InvalidMediaType</code>"},{"location":"Negotiation/LanguageNegotiator/","title":"LanguageNegotiator","text":""},{"location":"Negotiation/LanguageNegotiator/#Athena::Negotiation::LanguageNegotiator","title":"class <code>Athena::Negotiation::LanguageNegotiator</code> inherits <code>Athena::Negotiation::AbstractNegotiator</code>","text":"<p>A <code>ANG::AbstractNegotiator</code> implementation to negotiate <code>ANG::AcceptLanguage</code> headers.</p>"},{"location":"Negotiation/Negotiator/","title":"Negotiator","text":""},{"location":"Negotiation/Negotiator/#Athena::Negotiation::Negotiator","title":"class <code>Athena::Negotiation::Negotiator</code> inherits <code>Athena::Negotiation::AbstractNegotiator</code>","text":"<p>A <code>ANG::AbstractNegotiator</code> implementation to negotiate <code>ANG::Accept</code> headers.</p> Direct known subclasses <code>Athena::Framework::View::FormatNegotiator</code>"},{"location":"Routing/","title":"Routing","text":""},{"location":"Routing/#Athena::Routing","title":"module <code>Athena::Routing</code>","text":"<p>Athena's Routing component, <code>ART</code> for short, allows mapping HTTP requests to particular <code>ART::Route</code>s. This component is primarily intended to be used as a basis for a routing implementation for a framework, handling the majority of the heavy lifting.</p> <p>The routing component supports various ways to control which routes are matched, including:</p> <ul> <li>Regex patterns</li> <li>host header values</li> <li>HTTP method/scheme</li> <li>Request format/locale</li> <li>Dynamic callbacks</li> </ul> <p>Using the routing component involves adding <code>ART::Route</code> instances to an <code>ART::RouteCollection</code>. The collection is then compiled via <code>ART.compile</code>. An <code>ART::Matcher::URLMatcherInterface</code> or <code>ART::Matcher::RequestMatcherInterface</code> could then be used to determine which route matches a given path or <code>ART::Request</code>. For example:</p> <pre><code># Create a new route collection and add a route with a single parameter to it.\nroutes = ART::RouteCollection.new\nroutes.add \"blog_show\", ART::Route.new \"/blog/{slug}\"\n\n# Compile the routes.\nART.compile routes\n\n# Represents the request in an agnostic data format.\n# In practice this would be created from the current `ART::Request`.\ncontext = ART::RequestContext.new\n\n# Match a request by path.\nmatcher = ART::Matcher::URLMatcher.new context\nmatcher.match \"/blog/foo-bar\" # =&gt; {\"_route\" =&gt; \"blog_show\", \"slug\" =&gt; \"foo-bar\"}\n</code></pre> <p>It is also possible to go the other way, generate a URL based on its name and set of parameters:</p> <pre><code># Generating routes based on route name and parameters is also possible.\ngenerator = ART::Generator::URLGenerator.new context\ngenerator.generate \"blog_show\", slug: \"bar-baz\", source: \"Crystal\" # =&gt; \"/blog/bar-baz?source=Crystal\"\n</code></pre> <p>See the related types for more detailed information.</p>"},{"location":"Routing/#Athena::Routing--simple-webapp","title":"Simple Webapp","text":"<p>The Routing component also provides <code>ART::RoutingHandler</code> which can be used to add basic routing functionality to a HTTP::Server. This can be a good choice for super simple web applications that do not need any additional frameworky features.</p>"},{"location":"Routing/#Athena::Routing--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Checkout the manual for some additional information on how to use it within the framework.</p> <p>If using it outside of the framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-routing:\n    github: athena-framework/routing\n    version: ~&gt; 0.1.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-routing\"</code>.</p> <p>From here you would want to create an <code>ART::RouteCollection</code>, register routes with it, compile it. Then an <code>ART::Matcher::URLMatcherInterface</code> or <code>ART::Matcher::RequestMatcherInterface</code> could then be used to determine which route matches a given path or <code>ART::Request</code>.</p> <p>Tip</p> <p>Consider using the annotations provided by the component within <code>ART::Annotations</code> to handle route registration.</p>"},{"location":"Routing/#Athena::Routing-constants","title":"Constants","text":""},{"location":"Routing/#Athena::Routing::VERSION","title":"<code>VERSION = \"0.1.8\"</code>","text":""},{"location":"Routing/#Athena::Routing-class-methods","title":"Class methods","text":""},{"location":"Routing/#Athena::Routing.compile(routes)","title":"<code>.compile(routes : ART::RouteCollection) : Nil</code>","text":"<p>Before <code>ART::Route</code>s can be matched or generated, they must first be compiled. This process compiles each route into its <code>ART::CompiledRoute</code> representation, then merges them all together into a more efficient cacheable format.</p> <p>The specifics of this process should be seen as an implementation detail. All you need to worry about is calling this method with your <code>ART::RouteCollection</code>.</p> View source"},{"location":"Routing/aliases/","title":"Aliases","text":""},{"location":"Routing/aliases/#ART","title":"alias <code>ART</code>","text":"<p>Convenience alias to make referencing <code>Athena::Routing</code> types easier.</p> Alias definition <code>Athena::Routing</code>"},{"location":"Routing/aliases/#ARTA","title":"alias <code>ARTA</code>","text":"<p>Convenience alias to make referencing <code>ART::Annotations</code> types easier.</p> Alias definition <code>Athena::Routing::Annotations</code>"},{"location":"Routing/Annotations/","title":"Annotations","text":""},{"location":"Routing/Annotations/#Athena::Routing::Annotations","title":"module <code>Athena::Routing::Annotations</code>","text":"<p>Contains all the <code>Athena::Routing</code> based annotations. See <code>ARTA::Route</code> for more information.</p> <p>Note</p> <p>These are primarily to define a common type/documentation to use in custom implementations. As of now, they are not leveraged internally, but a future iteration could provide a built in way to resolve them into an <code>ART::RouteCollection</code>.</p>"},{"location":"Routing/Annotations/Delete/","title":"Delete","text":""},{"location":"Routing/Annotations/Delete/#Athena::Routing::Annotations::Delete","title":"annotation <code>Athena::Routing::Annotations::Delete</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>DELETE</code> method.</p>"},{"location":"Routing/Annotations/Get/","title":"Get","text":""},{"location":"Routing/Annotations/Get/#Athena::Routing::Annotations::Get","title":"annotation <code>Athena::Routing::Annotations::Get</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>GET</code> method.</p>"},{"location":"Routing/Annotations/Head/","title":"Head","text":""},{"location":"Routing/Annotations/Head/#Athena::Routing::Annotations::Head","title":"annotation <code>Athena::Routing::Annotations::Head</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>HEAD</code> method.</p>"},{"location":"Routing/Annotations/Link/","title":"Link","text":""},{"location":"Routing/Annotations/Link/#Athena::Routing::Annotations::Link","title":"annotation <code>Athena::Routing::Annotations::Link</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>LINK</code> method.</p>"},{"location":"Routing/Annotations/Patch/","title":"Patch","text":""},{"location":"Routing/Annotations/Patch/#Athena::Routing::Annotations::Patch","title":"annotation <code>Athena::Routing::Annotations::Patch</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>PATCH</code> method.</p>"},{"location":"Routing/Annotations/Post/","title":"Post","text":""},{"location":"Routing/Annotations/Post/#Athena::Routing::Annotations::Post","title":"annotation <code>Athena::Routing::Annotations::Post</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>POST</code> method.</p>"},{"location":"Routing/Annotations/Put/","title":"Put","text":""},{"location":"Routing/Annotations/Put/#Athena::Routing::Annotations::Put","title":"annotation <code>Athena::Routing::Annotations::Put</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>PUT</code> method.</p>"},{"location":"Routing/Annotations/Route/","title":"Route","text":""},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route","title":"annotation <code>Athena::Routing::Annotations::Route</code>","text":"<p>Annotation representation of an <code>ART::Route</code>. Most commonly this will be applied to a method to define it as the controller for the related route, but could also be applied to a controller class to apply defaults to all other <code>ARTA::Route</code> within it. Custom implementations may support alternate APIs. See <code>ART::Route</code> for more information.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--configuration","title":"Configuration","text":"<p>Various fields can be used within this annotation to control how the route is created. All fields are optional unless otherwise noted.</p> <p>Warning</p> <p>Not all fields may be supported by the underlying implementation.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--path","title":"path","text":"<p>Type: <code>String | Hash(String, String)</code> - required</p> <p>The path of the route.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--name","title":"name","text":"<p>Type: <code>String</code></p> <p>The unique name of the route. If not provided, a unique name should be created automatically.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--requirements","title":"requirements","text":"<p>Type: <code>Hash(String, String | Regex)</code></p> <p>A <code>Hash</code> of patterns that each parameter must match in order for the route to match.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--defaults","title":"defaults","text":"<p>Type: <code>Hash(String, _)</code></p> <p>The values that should be applied to the route parameters if they were not supplied within the request.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--host","title":"host","text":"<p>Type: <code>String | Regex</code></p> <p>Require the host header to match this value in order for the route to match.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--methods","title":"methods","text":"<p>Type: <code>String | Enumerable(String)</code></p> <p>A whitelist of the HTTP methods this route supports.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--schemes","title":"schemes","text":"<p>Type: <code>String | Enumerable(String)</code></p> <p>A whitelist of the HTTP schemes this route supports.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--condition","title":"condition","text":"<p>Type: <code>ART::Route::Condition</code></p> <p>A callback used to dynamically determine if the request matches the route.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--priority","title":"priority","text":"<p>Type: <code>Int32</code></p> <p>A value used to control the order the routes are registered in. A higher value means that route will be registered earlier.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--locale","title":"locale","text":"<p>Type: <code>String</code></p> <p>Allows setting the locale this route supports. Sets the special <code>_locale</code> route parameter.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--format","title":"format","text":"<p>Type: <code>String</code></p> <p>Allows setting the format this route supports. Sets the special <code>_format</code> route parameter.</p>"},{"location":"Routing/Annotations/Route/#Athena::Routing::Annotations::Route--stateless","title":"stateless","text":"<p>Type: <code>Bool</code></p> <p>If the route should be cached or not.</p>"},{"location":"Routing/Annotations/Unlink/","title":"Unlink","text":""},{"location":"Routing/Annotations/Unlink/#Athena::Routing::Annotations::Unlink","title":"annotation <code>Athena::Routing::Annotations::Unlink</code>","text":"<p>Same as <code>ARTA::Route</code>, but only matches the <code>UNLINK</code> method.</p>"},{"location":"Routing/CompiledRoute/","title":"CompiledRoute","text":""},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute","title":"struct <code>Athena::Routing::CompiledRoute</code> inherits <code>Struct</code>","text":"<p>Represents an immutable snapshot of an <code>ART::Route</code> that exposes the <code>Regex</code> patterns and variables used to match/generate the route.</p>"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute-constructors","title":"Constructors","text":""},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute.new(static_prefix,regex,tokens,path_variables,host_regex,host_tokens,host_variables,variables)","title":"<code>.new(static_prefix : String, regex : Regex, tokens : Array(ART::CompiledRoute::Token), path_variables : Set(String), host_regex : Regex | Nil = nil, host_tokens : Array(ART::CompiledRoute::Token) = Array(ART::CompiledRoute::Token).new, host_variables : Set(String) = Set(String).new, variables : Set(String) = Set(String).new)</code>","text":"View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute-methods","title":"Methods","text":""},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#clone","title":"<code>#clone</code>","text":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#host_regex","title":"<code>#host_regex : Regex | ::Nil</code>","text":"<p>Returns the regex pattern used to match the hostname of this route.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#host_tokens","title":"<code>#host_tokens : Array(ART::CompiledRoute::Token)</code>","text":"<p>Returns the tokens that make up the hostname of this route.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#host_variables","title":"<code>#host_variables : Set(String)</code>","text":"<p>Returns the names of the route parameters within the hostname pattern this route.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#path_variables","title":"<code>#path_variables : Set(String)</code>","text":"<p>Returns the names of the route parameters within this route.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#regex","title":"<code>#regex : Regex</code>","text":"<p>Returns the regex pattern used to match this route.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#static_prefix","title":"<code>#static_prefix : String</code>","text":"<p>Returns the static text prefix of this route.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#tokens","title":"<code>#tokens : Array(ART::CompiledRoute::Token)</code>","text":"<p>Returns the tokens that make up the path of this route.</p> View source"},{"location":"Routing/CompiledRoute/#Athena::Routing::CompiledRoute#variables","title":"<code>#variables : Set(String)</code>","text":"<p>Returns the compiled parameter names from the path and hostname patterns.</p> View source"},{"location":"Routing/CompiledRoute/Token/","title":"Token","text":""},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token","title":"struct <code>Athena::Routing::CompiledRoute::Token</code> inherits <code>Struct</code>","text":"<p>An immutable representation of a segment of a route used to reconstruct a valid URL from an <code>ART::CompiledRoute</code>.</p>"},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token-constructors","title":"Constructors","text":""},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token.new(type,prefix,regex,var_name,important)","title":"<code>.new(type : Type, prefix : String, regex : Regex | Nil = nil, var_name : String | Nil = nil, important : Bool = false)</code>","text":"View source"},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token-methods","title":"Methods","text":""},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token#clone","title":"<code>#clone</code>","text":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p> View source"},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token#important?","title":"<code>#important? : Bool</code>","text":"<p>Returns <code>true</code> if this token should always be included within the generated URL, otherwise <code>false</code>.</p> View source"},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token#prefix","title":"<code>#prefix : String</code>","text":"<p>Returns that static prefix related to this token.</p> View source"},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token#regex","title":"<code>#regex : Regex | ::Nil</code>","text":"<p>Returns the pattern this <code>ART::CompiledRoute::Token::Type::VARIABLE</code> token requires.</p> View source"},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token#type","title":"<code>#type : Type</code>","text":"<p>Returns the type this token represents.</p> View source"},{"location":"Routing/CompiledRoute/Token/#Athena::Routing::CompiledRoute::Token#var_name","title":"<code>#var_name : String | ::Nil</code>","text":"<p>Returns the name of parameter this <code>ART::CompiledRoute::Token::Type::VARIABLE</code> token represents.</p> View source"},{"location":"Routing/CompiledRoute/Token/Type/","title":"Type","text":""},{"location":"Routing/CompiledRoute/Token/Type/#Athena::Routing::CompiledRoute::Token::Type","title":"enum <code>Athena::Routing::CompiledRoute::Token::Type</code>","text":"<p>Represents if a <code>ART::CompiledRoute::Token</code> is static text, or has a variable portion.</p>"},{"location":"Routing/CompiledRoute/Token/Type/#Athena::Routing::CompiledRoute::Token::Type-members","title":"Members","text":""},{"location":"Routing/CompiledRoute/Token/Type/#Athena::Routing::CompiledRoute::Token::Type::TEXT","title":"<code>TEXT = 0</code>","text":"<p>Static text.</p>"},{"location":"Routing/CompiledRoute/Token/Type/#Athena::Routing::CompiledRoute::Token::Type::VARIABLE","title":"<code>VARIABLE = 1</code>","text":"<p>Variable data.</p>"},{"location":"Routing/CompiledRoute/Token/Type/#Athena::Routing::CompiledRoute::Token::Type-methods","title":"Methods","text":""},{"location":"Routing/CompiledRoute/Token/Type/#Athena::Routing::CompiledRoute::Token::Type#text?","title":"<code>#text?</code>","text":"View source"},{"location":"Routing/CompiledRoute/Token/Type/#Athena::Routing::CompiledRoute::Token::Type#variable?","title":"<code>#variable?</code>","text":"View source"},{"location":"Routing/Exception/","title":"Exception","text":""},{"location":"Routing/Exception/#Athena::Routing::Exception","title":"module <code>Athena::Routing::Exception</code>","text":"<p>Both acts as a namespace for exceptions related to the <code>Athena::Routing</code> component, as well as a way to check for exceptions from the component.</p> Direct including types <code>Athena::Routing::Exception::InvalidArgument</code> <code>Athena::Routing::Exception::InvalidParameter</code> <code>Athena::Routing::Exception::MethodNotAllowed</code> <code>Athena::Routing::Exception::MissingRequiredParameters</code> <code>Athena::Routing::Exception::NoConfiguration</code> <code>Athena::Routing::Exception::ResourceNotFound</code> <code>Athena::Routing::Exception::RouteNotFound</code>"},{"location":"Routing/Exception/InvalidArgument/","title":"InvalidArgument","text":""},{"location":"Routing/Exception/InvalidArgument/#Athena::Routing::Exception::InvalidArgument","title":"class <code>Athena::Routing::Exception::InvalidArgument</code> inherits <code>ArgumentError</code>","text":"Included modules <code>Athena::Routing::Exception</code>"},{"location":"Routing/Exception/InvalidParameter/","title":"InvalidParameter","text":""},{"location":"Routing/Exception/InvalidParameter/#Athena::Routing::Exception::InvalidParameter","title":"class <code>Athena::Routing::Exception::InvalidParameter</code> inherits <code>ArgumentError</code>","text":"Included modules <code>Athena::Routing::Exception</code>"},{"location":"Routing/Exception/MethodNotAllowed/","title":"MethodNotAllowed","text":""},{"location":"Routing/Exception/MethodNotAllowed/#Athena::Routing::Exception::MethodNotAllowed","title":"class <code>Athena::Routing::Exception::MethodNotAllowed</code> inherits <code>RuntimeError</code>","text":"Included modules <code>Athena::Routing::Exception</code>"},{"location":"Routing/Exception/MethodNotAllowed/#Athena::Routing::Exception::MethodNotAllowed-constructors","title":"Constructors","text":""},{"location":"Routing/Exception/MethodNotAllowed/#Athena::Routing::Exception::MethodNotAllowed.new(allowed_methods,message,cause)","title":"<code>.new(allowed_methods : Enumerable(String), message : String | Nil = nil, cause : ::Exception | Nil = nil)</code>","text":"View source"},{"location":"Routing/Exception/MethodNotAllowed/#Athena::Routing::Exception::MethodNotAllowed-methods","title":"Methods","text":""},{"location":"Routing/Exception/MethodNotAllowed/#Athena::Routing::Exception::MethodNotAllowed#allowed_methods","title":"<code>#allowed_methods : Array(String)</code>","text":"View source"},{"location":"Routing/Exception/MissingRequiredParameters/","title":"MissingRequiredParameters","text":""},{"location":"Routing/Exception/MissingRequiredParameters/#Athena::Routing::Exception::MissingRequiredParameters","title":"class <code>Athena::Routing::Exception::MissingRequiredParameters</code> inherits <code>ArgumentError</code>","text":"Included modules <code>Athena::Routing::Exception</code>"},{"location":"Routing/Exception/NoConfiguration/","title":"NoConfiguration","text":""},{"location":"Routing/Exception/NoConfiguration/#Athena::Routing::Exception::NoConfiguration","title":"class <code>Athena::Routing::Exception::NoConfiguration</code> inherits <code>Athena::Routing::Exception::ResourceNotFound</code>","text":"Included modules <code>Athena::Routing::Exception</code>"},{"location":"Routing/Exception/ResourceNotFound/","title":"ResourceNotFound","text":""},{"location":"Routing/Exception/ResourceNotFound/#Athena::Routing::Exception::ResourceNotFound","title":"class <code>Athena::Routing::Exception::ResourceNotFound</code> inherits <code>RuntimeError</code>","text":"Included modules <code>Athena::Routing::Exception</code> Direct known subclasses <code>Athena::Routing::Exception::NoConfiguration</code>"},{"location":"Routing/Exception/RouteNotFound/","title":"RouteNotFound","text":""},{"location":"Routing/Exception/RouteNotFound/#Athena::Routing::Exception::RouteNotFound","title":"class <code>Athena::Routing::Exception::RouteNotFound</code> inherits <code>ArgumentError</code>","text":"Included modules <code>Athena::Routing::Exception</code>"},{"location":"Routing/Generator/","title":"Generator","text":""},{"location":"Routing/Generator/#Athena::Routing::Generator","title":"module <code>Athena::Routing::Generator</code>","text":"<p>Includes types related to generating URLs.</p>"},{"location":"Routing/Generator/ConfigurableRequirementsInterface/","title":"ConfigurableRequirementsInterface","text":""},{"location":"Routing/Generator/ConfigurableRequirementsInterface/#Athena::Routing::Generator::ConfigurableRequirementsInterface","title":"module <code>Athena::Routing::Generator::ConfigurableRequirementsInterface</code>","text":"<p>Represents a URL generator that can be configured whether an exception should be generated when the parameters do not match the requirements.</p> Direct including types <code>Athena::Routing::Generator::URLGenerator</code>"},{"location":"Routing/Generator/ConfigurableRequirementsInterface/#Athena::Routing::Generator::ConfigurableRequirementsInterface-methods","title":"Methods","text":""},{"location":"Routing/Generator/ConfigurableRequirementsInterface/#Athena::Routing::Generator::ConfigurableRequirementsInterface#strict_requirements=(enabled)","title":"abstract <code>#strict_requirements=(enabled : Bool | Nil)</code>","text":"<p>Sets how invalid parameters should be treated:</p> <ul> <li><code>true</code> - Raise an exception for mismatched requirements.</li> <li><code>false</code> - Do not raise an exception, but return an empty string.</li> <li><code>nil</code> - Disables checks, returning a URL with possibly invalid parameters.</li> </ul> View source"},{"location":"Routing/Generator/ConfigurableRequirementsInterface/#Athena::Routing::Generator::ConfigurableRequirementsInterface#strict_requirements?","title":"abstract <code>#strict_requirements? : Bool | ::Nil</code>","text":"<p>Returns the current strict requirements mode.</p> View source"},{"location":"Routing/Generator/Interface/","title":"Interface","text":""},{"location":"Routing/Generator/Interface/#Athena::Routing::Generator::Interface","title":"module <code>Athena::Routing::Generator::Interface</code>","text":"<p>Allows generating a URL for a given <code>ART::Route</code>.</p> <pre><code>routes = ART::RouteCollection.new\nroutes.add \"blog_show\", ART::Route.new \"/blog/{slug}\"\n\ngenerator = ART::Generator::URLGenerator.new context\ngenerator.generate \"blog_show\", slug: \"bar-baz\", source: \"Crystal\" # =&gt; \"/blog/bar-baz?source=Crystal\"\n</code></pre>"},{"location":"Routing/Generator/Interface/#Athena::Routing::Generator::Interface--parameter-default-values","title":"Parameter Default Values","text":"<p>By default parameters with a default value the same as the provided parameter will be excluded from the generated URL. For example:</p> <pre><code>routes = ART::RouteCollection.new\nroutes.add \"articles\", ART::Route.new \"/articles/{page}\", {\"page\" =&gt; \"1\"}\n\nART.compile routes\n\ngenerator = ART::Generator::URLGenerator.new ART::RequestContext.new\ngenerator.generate \"articles\"          # =&gt; \"/articles\"\ngenerator.generate \"articles\", page: 1 # =&gt; \"/articles\"\ngenerator.generate \"articles\", page: 2 # =&gt; \"/articles/2\"\n</code></pre> <p>If you want to always include a parameter, add a <code>!</code> before the <code>ART::Route#path</code>, for example:</p> <pre><code>routes.add \"users\", ART::Route.new \"/users/{!page}\", {\"page\" =&gt; \"1\"}\n\ngenerator.generate \"users\"          # =&gt; \"/users/1\"\ngenerator.generate \"users\", page: 1 # =&gt; \"/users/1\"\ngenerator.generate \"users\", page: 2 # =&gt; \"/users/2\"\n</code></pre>"},{"location":"Routing/Generator/Interface/#Athena::Routing::Generator::Interface--url-types","title":"URL Types","text":"<p><code>Athena::Routing</code> supports various ways to generate the URL, via the reference_type parameter. See <code>ART::Generator::ReferenceType</code> for description/examples of the possible types.</p> Included modules <code>Athena::Routing::RequestContextAwareInterface</code> Direct including types <code>Athena::Routing::Generator::URLGenerator</code> <code>Athena::Routing::RouterInterface</code>"},{"location":"Routing/Generator/Interface/#Athena::Routing::Generator::Interface-methods","title":"Methods","text":""},{"location":"Routing/Generator/Interface/#Athena::Routing::Generator::Interface#generate(route,params,reference_type)","title":"abstract <code>#generate(route : String, params : Hash(String, String | Nil) = Hash(String, String | ::Nil).new, reference_type : ART::Generator::ReferenceType = :absolute_path) : String</code>","text":"<p>Generates a URL for the provided route, optionally with the provided params and reference_type.</p> View source"},{"location":"Routing/Generator/ReferenceType/","title":"ReferenceType","text":""},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType","title":"enum <code>Athena::Routing::Generator::ReferenceType</code>","text":"<p>Represents the type of URLs that are able to be generated via an <code>ART::Generator::Interface</code>.</p>"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType-members","title":"Members","text":""},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType::ABSOLUTE_URL","title":"<code>ABSOLUTE_URL = 0</code>","text":"<p>Includes an absolute URL including protocol, hostname, and path: <code>https://api.example.com/add/10/5</code>.</p>"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType::ABSOLUTE_PATH","title":"<code>ABSOLUTE_PATH = 1</code>","text":"<p>The default type, includes an absolute path from the root to the generated route: <code>/add/10/5</code>.</p>"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType::RELATIVE_PATH","title":"<code>RELATIVE_PATH = 2</code>","text":"<p>Returns a path relative to the path of the request. For example:</p> <pre><code>routes = ART::RouteCollection.new\nroutes.add \"one\", ART::Route.new \"/a/b/c/d\"\nroutes.add \"two\", ART::Route.new \"/a/b/c/\"\nroutes.add \"three\", ART::Route.new \"/a/b/\"\nroutes.add \"four\", ART::Route.new \"/a/b/c/other\"\nroutes.add \"five\", ART::Route.new \"/a/x/y\"\n\nART.compile routes\n\ncontext = ART::RequestContext.new path: \"/a/b/c/d\"\n\ngenerator = ART::Generator::URLGenerator.new context\n\ngenerator.generate \"one\", reference_type: :relative_path   # =&gt; \"\"\ngenerator.generate \"two\", reference_type: :relative_path   # =&gt; \"./\"\ngenerator.generate \"three\", reference_type: :relative_path # =&gt; \"../\"\ngenerator.generate \"four\", reference_type: :relative_path  # =&gt; \"other\"\ngenerator.generate \"five\", reference_type: :relative_path  # =&gt; \"../../x/y\"\n</code></pre>"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType::NETWORK_PATH","title":"<code>NETWORK_PATH = 3</code>","text":"<p>Similar to <code>ABSOLUTE_URL</code>, but reuses the current protocol: <code>//api.example.com/add/10/5</code>.</p>"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType-methods","title":"Methods","text":""},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType#absolute_path?","title":"<code>#absolute_path?</code>","text":"View source"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType#absolute_url?","title":"<code>#absolute_url?</code>","text":"View source"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType#network_path?","title":"<code>#network_path?</code>","text":"View source"},{"location":"Routing/Generator/ReferenceType/#Athena::Routing::Generator::ReferenceType#relative_path?","title":"<code>#relative_path?</code>","text":"View source"},{"location":"Routing/Generator/URLGenerator/","title":"URLGenerator","text":""},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator","title":"class <code>Athena::Routing::Generator::URLGenerator</code> inherits <code>Reference</code>","text":"<p>Default implementation of <code>ART::Generator::Interface</code>.</p> Included modules <code>Athena::Routing::Generator::ConfigurableRequirementsInterface</code> <code>Athena::Routing::Generator::Interface</code>"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator-constructors","title":"Constructors","text":""},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator.new(context,default_locale)","title":"<code>.new(context : ART::RequestContext, default_locale : String | Nil = nil)</code>","text":"View source"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator-methods","title":"Methods","text":""},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator#context","title":"<code>#context : ART::RequestContext</code>","text":"<p>Returns the request context.</p> View source"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator#context=(context)","title":"<code>#context=(context : ART::RequestContext)</code>","text":"<p>Sets the request context.</p> View source"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator#generate(route,params,reference_type)","title":"<code>#generate(route : String, params : Hash(String, String | Nil) = Hash(String, String | ::Nil).new, reference_type : ART::Generator::ReferenceType = :absolute_path) : String</code>","text":"<p>Generates a URL for the provided route, optionally with the provided params and reference_type.</p> View source"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator#generate(route,params,reference_type)","title":"<code>#generate(route : String, params : Hash(String, _) = Hash(String, String | ::Nil).new, reference_type : ART::Generator::ReferenceType = :absolute_path) : String</code>","text":"<p>:inherit:</p> View source"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator#generate(route,reference_type,**)","title":"<code>#generate(route : String, reference_type : ART::Generator::ReferenceType = :absolute_path, **params) : String</code>","text":"<p>:inherit:</p> View source"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator#strict_requirements=(enabled)","title":"<code>#strict_requirements=(enabled : Bool | Nil)</code>","text":"<p>Sets how invalid parameters should be treated:</p> <ul> <li><code>true</code> - Raise an exception for mismatched requirements.</li> <li><code>false</code> - Do not raise an exception, but return an empty string.</li> <li><code>nil</code> - Disables checks, returning a URL with possibly invalid parameters.</li> </ul> View source"},{"location":"Routing/Generator/URLGenerator/#Athena::Routing::Generator::URLGenerator#strict_requirements?","title":"<code>#strict_requirements? : Bool | ::Nil</code>","text":"<p>Returns the current strict requirements mode.</p> View source"},{"location":"Routing/Matcher/","title":"Matcher","text":""},{"location":"Routing/Matcher/#Athena::Routing::Matcher","title":"module <code>Athena::Routing::Matcher</code>","text":"<p>Includes types related to matching a path/request to a route.</p>"},{"location":"Routing/Matcher/RequestMatcherInterface/","title":"RequestMatcherInterface","text":""},{"location":"Routing/Matcher/RequestMatcherInterface/#Athena::Routing::Matcher::RequestMatcherInterface","title":"module <code>Athena::Routing::Matcher::RequestMatcherInterface</code>","text":"<p>Similar to <code>ART::Matcher::URLMatcherInterface</code>, but tries to match against an <code>ART::Request</code>.</p> Direct including types <code>Athena::Routing::Matcher::URLMatcher</code> <code>Athena::Routing::Router</code>"},{"location":"Routing/Matcher/RequestMatcherInterface/#Athena::Routing::Matcher::RequestMatcherInterface-methods","title":"Methods","text":""},{"location":"Routing/Matcher/RequestMatcherInterface/#Athena::Routing::Matcher::RequestMatcherInterface#match(request)","title":"abstract <code>#match(request : ART::Request) : Hash(String, String | Nil)</code>","text":"<p>Tries to match the provided request to its related route. Returns a hash of the route's defaults and parameters resolved from the request.</p> <p>Raises an <code>ART::Exception::ResourceNotFound</code> if no route could be matched.</p> <p>Raises an <code>ART::Exception::MethodNotAllowed</code> if a route exists but not for the request's method.</p> View source"},{"location":"Routing/Matcher/RequestMatcherInterface/#Athena::Routing::Matcher::RequestMatcherInterface#match?(request)","title":"abstract <code>#match?(request : ART::Request) : Hash(String, String | Nil) | Nil</code>","text":"<p>Tries to match the provided request to its related route. Returns a hash of the route's defaults and parameters resolved from the request.</p> <p>Returns <code>nil</code> if no route could be matched or a route exists but not for the request's method.</p> View source"},{"location":"Routing/Matcher/TraceableURLMatcher/","title":"TraceableURLMatcher","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/#Athena::Routing::Matcher::TraceableURLMatcher","title":"class <code>Athena::Routing::Matcher::TraceableURLMatcher</code> inherits <code>Athena::Routing::Matcher::URLMatcher</code>","text":"<p>Extension of <code>ART::Matcher::URLMatcher</code> to assist with debugging by tracing the match.</p> <p>See <code>#traces</code>.</p>"},{"location":"Routing/Matcher/TraceableURLMatcher/#Athena::Routing::Matcher::TraceableURLMatcher-constructors","title":"Constructors","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/#Athena::Routing::Matcher::TraceableURLMatcher.new(routes,context)","title":"<code>.new(routes : ART::RouteCollection, context : ART::RequestContext)</code>","text":"View source"},{"location":"Routing/Matcher/TraceableURLMatcher/#Athena::Routing::Matcher::TraceableURLMatcher-methods","title":"Methods","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/#Athena::Routing::Matcher::TraceableURLMatcher#match(path)","title":"<code>#match(path : String) : Hash(String, String | Nil)</code>","text":"<p>:inherit:</p> View source"},{"location":"Routing/Matcher/TraceableURLMatcher/#Athena::Routing::Matcher::TraceableURLMatcher#traces(path)","title":"<code>#traces(path : String) : Array(ART::Matcher::TraceableURLMatcher::Trace)</code>","text":"<p>Returns an array of <code>ART::Matcher::TraceableURLMatcher::Trace</code> representing the history of the matching logic when trying to match the provided path.</p> View source"},{"location":"Routing/Matcher/TraceableURLMatcher/#Athena::Routing::Matcher::TraceableURLMatcher#traces(request)","title":"<code>#traces(request : ART::Request) : Array(ART::Matcher::TraceableURLMatcher::Trace)</code>","text":"<p>Returns an array of <code>ART::Matcher::TraceableURLMatcher::Trace</code> representing the history of the matching logic when trying to match the provided request.</p> View source"},{"location":"Routing/Matcher/TraceableURLMatcher/Match/","title":"Match","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match","title":"enum <code>Athena::Routing::Matcher::TraceableURLMatcher::Match</code>","text":"<p>Represents the match level of a <code>ART::Matcher::TraceableURLMatcher::Trace</code>.</p>"},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match-members","title":"Members","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match::NONE","title":"<code>NONE = 0</code>","text":"<p>The route did not match at all.</p>"},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match::PARTIAL","title":"<code>PARTIAL = 1</code>","text":"<p>The route matched, but not fully.</p>"},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match::FULL","title":"<code>FULL = 2</code>","text":"<p>The route is a match.</p>"},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match-methods","title":"Methods","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match#full?","title":"<code>#full?</code>","text":"View source"},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match#none?","title":"<code>#none?</code>","text":"View source"},{"location":"Routing/Matcher/TraceableURLMatcher/Match/#Athena::Routing::Matcher::TraceableURLMatcher::Match#partial?","title":"<code>#partial?</code>","text":"View source"},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/","title":"Trace","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace","title":"struct <code>Athena::Routing::Matcher::TraceableURLMatcher::Trace</code> inherits <code>Struct</code>","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace-constructors","title":"Constructors","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace.new(message,level,name,route)","title":"<code>.new(message : String, level : ART::Matcher::TraceableURLMatcher::Match, name : String, route : ART::Route)</code>","text":"View source"},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace-methods","title":"Methods","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace#clone","title":"<code>#clone</code>","text":"View source"},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace#copy_with(message,level,name,route)","title":"<code>#copy_with(message _message = @message, level _level = @level, name _name = @name, route _route = @route)</code>","text":"View source"},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace#level","title":"<code>#level : ART::Matcher::TraceableURLMatcher::Match</code>","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace#message","title":"<code>#message : String</code>","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace#name","title":"<code>#name : String</code>","text":""},{"location":"Routing/Matcher/TraceableURLMatcher/Trace/#Athena::Routing::Matcher::TraceableURLMatcher::Trace#route","title":"<code>#route : ART::Route</code>","text":""},{"location":"Routing/Matcher/URLMatcher/","title":"URLMatcher","text":""},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher","title":"class <code>Athena::Routing::Matcher::URLMatcher</code> inherits <code>Reference</code>","text":"<p>Default implementation of <code>ART::Matcher::RequestMatcherInterface</code> and <code>ART::Matcher::URLMatcherInterface</code>.</p> Included modules <code>Athena::Routing::Matcher::RequestMatcherInterface</code> <code>Athena::Routing::Matcher::URLMatcherInterface</code> Direct known subclasses <code>Athena::Routing::Matcher::TraceableURLMatcher</code>"},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher-constructors","title":"Constructors","text":""},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher.new(context)","title":"<code>.new(context : ART::RequestContext)</code>","text":"View source"},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher-methods","title":"Methods","text":""},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher#context","title":"<code>#context : ART::RequestContext</code>","text":"<p>Returns the request context.</p> View source"},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher#context=(context)","title":"<code>#context=(context : ART::RequestContext)</code>","text":"<p>Sets the request context.</p> View source"},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher#match(path)","title":"<code>#match(path : String) : Hash(String, String | Nil)</code>","text":"<p>Tries to match the provided path to its related route. Returns a hash of the route's defaults and parameters resolved from the path.</p> <p>Raises an <code>ART::Exception::ResourceNotFound</code> if no route could be matched.</p> <p>Raises an <code>ART::Exception::MethodNotAllowed</code> if a route exists but not for the current HTTP method.</p> View source"},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher#match(request)","title":"<code>#match(request : ART::Request) : Hash(String, String | Nil)</code>","text":"<p>Tries to match the provided request to its related route. Returns a hash of the route's defaults and parameters resolved from the request.</p> <p>Raises an <code>ART::Exception::ResourceNotFound</code> if no route could be matched.</p> <p>Raises an <code>ART::Exception::MethodNotAllowed</code> if a route exists but not for the request's method.</p> View source"},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher#match?(path)","title":"<code>#match?(path : String) : Hash(String, String | Nil) | Nil</code>","text":"<p>Tries to match the provided path to its related route. Returns a hash of the route's defaults and parameters resolved from the path.</p> <p>Returns <code>nil</code> if no route could be matched or a route exists but not for the current HTTP method.</p> View source"},{"location":"Routing/Matcher/URLMatcher/#Athena::Routing::Matcher::URLMatcher#match?(request)","title":"<code>#match?(request : ART::Request) : Hash(String, String | Nil) | Nil</code>","text":"<p>Tries to match the provided request to its related route. Returns a hash of the route's defaults and parameters resolved from the request.</p> <p>Returns <code>nil</code> if no route could be matched or a route exists but not for the request's method.</p> View source"},{"location":"Routing/Matcher/URLMatcherInterface/","title":"URLMatcherInterface","text":""},{"location":"Routing/Matcher/URLMatcherInterface/#Athena::Routing::Matcher::URLMatcherInterface","title":"module <code>Athena::Routing::Matcher::URLMatcherInterface</code>","text":"<p>Allows matching a request path, or <code>ART::Request</code> in the case of <code>ART::Matcher::RequestMatcherInterface</code>, to its related route.</p> <pre><code># Create a new route collection and add a route with a single parameter to it.\nroutes = ART::RouteCollection.new\nroutes.add \"blog_show\", ART::Route.new \"/blog/{slug}\"\n\n# Compile the routes.\nART.compile routes\n\n# Represents the request in an agnostic data format.\n# In practice this would be created from the current `ART::Request`.\ncontext = ART::RequestContext.new\n\n# Match a request by path.\nmatcher = ART::Matcher::URLMatcher.new context\nmatcher.match \"/blog/foo-bar\" # =&gt; {\"_route\" =&gt; \"blog_show\", \"slug\" =&gt; \"foo-bar\"}\n</code></pre> Included modules <code>Athena::Routing::RequestContextAwareInterface</code> Direct including types <code>Athena::Routing::Matcher::URLMatcher</code> <code>Athena::Routing::RouterInterface</code>"},{"location":"Routing/Matcher/URLMatcherInterface/#Athena::Routing::Matcher::URLMatcherInterface-methods","title":"Methods","text":""},{"location":"Routing/Matcher/URLMatcherInterface/#Athena::Routing::Matcher::URLMatcherInterface#match(path)","title":"abstract <code>#match(path : String) : Hash(String, String | Nil)</code>","text":"<p>Tries to match the provided path to its related route. Returns a hash of the route's defaults and parameters resolved from the path.</p> <p>Raises an <code>ART::Exception::ResourceNotFound</code> if no route could be matched.</p> <p>Raises an <code>ART::Exception::MethodNotAllowed</code> if a route exists but not for the current HTTP method.</p> View source"},{"location":"Routing/Matcher/URLMatcherInterface/#Athena::Routing::Matcher::URLMatcherInterface#match?(path)","title":"abstract <code>#match?(path : String) : Hash(String, String | Nil) | Nil</code>","text":"<p>Tries to match the provided path to its related route. Returns a hash of the route's defaults and parameters resolved from the path.</p> <p>Returns <code>nil</code> if no route could be matched or a route exists but not for the current HTTP method.</p> View source"},{"location":"Routing/Request/","title":"Request","text":""},{"location":"Routing/Request/#Athena::Routing::Request","title":"alias <code>Athena::Routing::Request</code>","text":"<p>Represents the type of the request parameter within an <code>ART::Route::Condition</code>.</p> <p>Will be an <code>ATH::Request</code> instance if used within the Athena Framework, otherwise HTTP::Request.</p> Alias definition <code>HTTP::Request</code>"},{"location":"Routing/RequestContext/","title":"RequestContext","text":""},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext","title":"class <code>Athena::Routing::RequestContext</code> inherits <code>Reference</code>","text":"<p>Represents data from a request in an agnostic manner, primarily used to augment URL matching and generation with additional context.</p>"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext-constructors","title":"Constructors","text":""},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext.from_uri(uri,host,scheme,http_port,https_port)","title":"<code>.from_uri(uri : String, host : String = \"localhost\", scheme : String = \"http\", http_port : Int32 = 80, https_port : Int32 = 443) : self</code>","text":"<p>Creates a new instance of self from the provided uri. The host, scheme, http_port, and https_port optionally act as fallbacks if they are not contained within the uri.</p> View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext.from_uri(uri,host,scheme,http_port,https_port)","title":"<code>.from_uri(uri : URI, host : String = \"localhost\", scheme : String = \"http\", http_port : Int32 = 80, https_port : Int32 = 443) : self</code>","text":"<p>Creates a new instance of self from the provided uri. The host, scheme, http_port, and https_port optionally act as fallbacks if they are not contained within the uri.</p> View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext.new(base_url,method,host,scheme,http_port,https_port,path,query_string)","title":"<code>.new(base_url : String = \"\", method : String = \"GET\", host : String = \"localhost\", scheme : String = \"http\", http_port : Int32 = 80, https_port : Int32 = 443, path : String = \"/\", query_string : String = \"\")</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext-methods","title":"Methods","text":""},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#apply(request)","title":"<code>#apply(request : ART::Request) : self</code>","text":"<p>Updates the properties within <code>self</code> based on the provided request.</p> View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#base_url","title":"<code>#base_url : String</code>","text":"<p>Represents the path of the URL before <code>#path</code>. E.g. a path that should be prefixed to all other <code>#path</code>s.</p> View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#base_url=(base_url)","title":"<code>#base_url=(base_url : String) : self</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#has_parameter?(name)","title":"<code>#has_parameter?(name : String) : Bool</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#host","title":"<code>#host : String</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#host=(host)","title":"<code>#host=(host : String) : self</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#http_port","title":"<code>#http_port : Int32</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#https_port","title":"<code>#https_port : Int32</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#method","title":"<code>#method : String</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#method=(method)","title":"<code>#method=(method : String) : self</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#parameters","title":"<code>#parameters : Hash(String, String | ::Nil)</code>","text":"<p>Returns the global parameters that should be used as part of the URL generation logic.</p> View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#path","title":"<code>#path : String</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#path=(path)","title":"<code>#path=(path : String) : self</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#query_string","title":"<code>#query_string : String</code>","text":"<p>Returns the query string of the current request.</p> View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#query_string=(query_string)","title":"<code>#query_string=(query_string : String | Nil) : self</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#scheme","title":"<code>#scheme : String</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#scheme=(scheme)","title":"<code>#scheme=(scheme : String) : self</code>","text":"View source"},{"location":"Routing/RequestContext/#Athena::Routing::RequestContext#set_parameter(name,value)","title":"<code>#set_parameter(name : String, value : String | Nil) : self</code>","text":"View source"},{"location":"Routing/RequestContextAwareInterface/","title":"RequestContextAwareInterface","text":""},{"location":"Routing/RequestContextAwareInterface/#Athena::Routing::RequestContextAwareInterface","title":"module <code>Athena::Routing::RequestContextAwareInterface</code>","text":"<p>Represents a type that has access to the current <code>ART::RequestContext</code>.</p> Direct including types <code>Athena::Routing::Generator::Interface</code> <code>Athena::Routing::Matcher::URLMatcherInterface</code>"},{"location":"Routing/RequestContextAwareInterface/#Athena::Routing::RequestContextAwareInterface-methods","title":"Methods","text":""},{"location":"Routing/RequestContextAwareInterface/#Athena::Routing::RequestContextAwareInterface#context","title":"abstract <code>#context : ART::RequestContext</code>","text":"<p>Returns the request context.</p> View source"},{"location":"Routing/RequestContextAwareInterface/#Athena::Routing::RequestContextAwareInterface#context=(context)","title":"abstract <code>#context=(context : ART::RequestContext)</code>","text":"<p>Sets the request context.</p> View source"},{"location":"Routing/Requirement/","title":"Requirement","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement","title":"module <code>Athena::Routing::Requirement</code>","text":"<p>Includes types related to route requirements.</p> <p>The namespace also exposes various regex constants representing common universal requirements to make using them in routes easier.</p> <pre><code>class ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\n    \"/user/{id}\",\n    requirements: {\n      \"id\" =&gt; ART::Requirement::DIGITS,\n    }\n  )]\n  def get_user(id : Int64) : Int64\n    id\n  end\n\n  @[ARTA::Get(\n    \"/article/{slug}\",\n    requirements: {\n      \"slug\" =&gt; ART::Requirement::ASCII_SLUG,\n    }\n  )]\n  def get_article(slug : String) : String\n    slug\n  end\nend\n</code></pre>"},{"location":"Routing/Requirement/#Athena::Routing::Requirement-constants","title":"Constants","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::ASCII_SLUG","title":"<code>ASCII_SLUG = /[A-Za-z0-9]+(?:-[A-Za-z0-9]+)*/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::CATCH_ALL","title":"<code>CATCH_ALL = /.+/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::DATE_YMD","title":"<code>DATE_YMD = /[0-9]{4}-(?:0[1-9]|1[012])-(?:0[1-9]|[12][0-9]|(?&lt;!02-)3[01])/</code>","text":"<p>Matches a date string in the format of <code>YYYY-MM-DD</code>.</p>"},{"location":"Routing/Requirement/#Athena::Routing::Requirement::DIGITS","title":"<code>DIGITS = /[0-9]+/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::POSITIVE_INT","title":"<code>POSITIVE_INT = /[1-9][0-9]*/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UID_BASE32","title":"<code>UID_BASE32 = /[0-9A-HJKMNP-TV-Z]{26}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UID_BASE58","title":"<code>UID_BASE58 = /[1-9A-HJ-NP-Za-km-z]{22}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UID_RFC4122","title":"<code>UID_RFC4122 = /[0-9a-f]{8}(?:-[0-9a-f]{4}){3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::ULID","title":"<code>ULID = /[0-7][0-9A-HJKMNP-TV-Z]{25}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID","title":"<code>UUID = /[0-9a-f]{8}-[0-9a-f]{4}-[12-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID_V1","title":"<code>UUID_V1 = /[0-9a-f]{8}-[0-9a-f]{4}-1[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID_V3","title":"<code>UUID_V3 = /[0-9a-f]{8}-[0-9a-f]{4}-3[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID_V4","title":"<code>UUID_V4 = /[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID_V5","title":"<code>UUID_V5 = /[0-9a-f]{8}-[0-9a-f]{4}-5[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID_V6","title":"<code>UUID_V6 = /[0-9a-f]{8}-[0-9a-f]{4}-6[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID_V7","title":"<code>UUID_V7 = /[0-9a-f]{8}-[0-9a-f]{4}-7[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/#Athena::Routing::Requirement::UUID_V8","title":"<code>UUID_V8 = /[0-9a-f]{8}-[0-9a-f]{4}-8[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}/</code>","text":""},{"location":"Routing/Requirement/Enum/","title":"Enum","text":""},{"location":"Routing/Requirement/Enum/#Athena::Routing::Requirement::Enum","title":"struct <code>Athena::Routing::Requirement::Enum(EnumType)</code> inherits <code>Struct</code>","text":"<p>Provides an easier way to define a route requirement for all, or a subset of, Enum members.</p> <p>For example: <pre><code>require \"athena\"\n\nenum Color\n  Red\n  Blue\n  Green\n  Black\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\n    \"/color/{color}\",\n    requirements: {\n      \"color\" =&gt; ART::Requirement::Enum(Color).new,\n    }\n  )]\n  def get_color(color : Color) : Color\n    color\n  end\n\n  @[ARTA::Get(\n    \"/rgb-color/{color}\",\n    requirements: {\n      \"color\" =&gt; ART::Requirement::Enum(Color).new(:red, :green, :blue),\n    }\n  )]\n  def get_rgb_color(color : Color) : Color\n    color\n  end\nend\n\nATH.run\n\n# GET /color/red  # =&gt; \"red\"\n# GET /color/pink # =&gt; 404\n#\n# GET /rgb-color/red   # =&gt; \"red\"\n# GET /rgb-color/green # =&gt; \"green\"\n# GET /rgb-color/blue  # =&gt; \"blue\"\n# GET /rgb-color/black # =&gt; 404\n</code></pre></p> <p>Note</p> <p>This type ONLY supports the string representation of enum members.</p>"},{"location":"Routing/Requirement/Enum/#Athena::Routing::Requirement::Enum-constructors","title":"Constructors","text":""},{"location":"Routing/Requirement/Enum/#Athena::Routing::Requirement::Enum.new(members)","title":"<code>.new(members : Set(EnumType) | Nil = nil)</code>","text":"View source"},{"location":"Routing/Requirement/Enum/#Athena::Routing::Requirement::Enum.new(*)","title":"<code>.new(*cases : EnumType)</code>","text":"View source"},{"location":"Routing/Requirement/Enum/#Athena::Routing::Requirement::Enum-methods","title":"Methods","text":""},{"location":"Routing/Requirement/Enum/#Athena::Routing::Requirement::Enum#members","title":"<code>#members : Set(EnumType) | ::Nil</code>","text":"<p>Returns the set of allowed enum members, or <code>nil</code> if all members are allowed.</p> View source"},{"location":"Routing/Route/","title":"Route","text":""},{"location":"Routing/Route/#Athena::Routing::Route","title":"class <code>Athena::Routing::Route</code> inherits <code>Reference</code>","text":"<p>Provides an object-oriented way to represent an HTTP route, including the path, methods, schemes, host, and/or conditions required for it to match.</p> <p>Ultimately, <code>ART::Route</code>s are compiled into <code>ART::CompiledRoute</code> that represents an immutable snapshot of a route, along with <code>ART::CompiledRoute::Token</code>s representing each route parameter.</p> <p>By default, a route is very liberal in regards to what allows when matching. E.g. Matching anything that matches the <code>path</code>, but with any HTTP method and any scheme. The <code>methods</code> and <code>schemes</code> properties can be used to restrict which methods/schemes the route allows.</p> <pre><code># This route will only handle `https` `POST` requests to `/path`.\nroute1 = ART::Route.new \"/path\", schemes: \"https\", methods: \"POST\"\n\n# This route will handle `http` or `ftp` `GET`/`PATCH` requests to `/path`.\nroute2 = ART::Route.new \"/path\", schemes: {\"https\", \"ftp\"}, methods: {\"GET\", \"PATCH\"}\n</code></pre>"},{"location":"Routing/Route/#Athena::Routing::Route--expressions","title":"Expressions","text":"<p>In some cases you may want to match a route using arbitrary dynamic runtime logic. An example use case for this could be checking a request header, or anything else on the underlying <code>ART::RequestContext</code> and/or <code>ART::Request</code> instance. The <code>condition</code> property can be used for just this purpose:</p> <pre><code>route = ART::Route.new \"/contact\"\nroute.condition do |context, request|\n  request.headers[\"user-agent\"].includes? \"Firefox\"\nend\n</code></pre> <p>This route would only match requests whose <code>user-agent</code> header includes <code>Firefox</code>. Be sure to also handle cases where headers may not be set.</p> <p>Warning</p> <p>Route conditions are NOT taken into consideration when generating routes via an <code>ART::Generator::Interface</code>.</p>"},{"location":"Routing/Route/#Athena::Routing::Route--parameters","title":"Parameters","text":"<p>Route parameters represent variable portions within a route's <code>path</code>. Parameters are uniquely named placeholders wrapped within curly braces. For example, <code>/blog/{slug}</code> includes a <code>slug</code> parameter. Routes can have more than one parameter, but each one may only map to a single value. Parameter placeholders may also be included with static portions for a string, such as <code>/blog/posts-about-{category}</code>. This can be useful for supporting format based URLs, such as <code>/users.json</code> or <code>/users.csv</code> via a <code>/users.{_format}</code> path.</p>"},{"location":"Routing/Route/#Athena::Routing::Route--parameter-validation","title":"Parameter Validation","text":"<p>By default, a placeholder is happy to accept any value. However in most cases you will want to restrict which values it allows, such as ensuring only numeric digits are allowed for a <code>page</code> parameter. Parameter validation also allows multiple routes to have variable portions within the same location. I.e. allowing <code>/blog/{slug}</code> and <code>/blog/{page}</code> to co-exist, which is a limitation for some other Crystal routers.</p> <p>The <code>requirements</code> property accepts a <code>Hash(String, String | Regex)</code> where the keys are the name of the parameter and the value is a pattern in which the value must match for the route to match. The value can either be a string for exact matches, or a <code>Regex</code> for more complex patterns.</p> <p>Route parameters may also be inlined within the <code>path</code> by putting the pattern within <code>&lt;&gt;</code>, instead of providing it as a dedicated argument. For example, <code>/blog/{page&lt;\\\\d+&gt;}</code> (note we need to escape the <code>\\</code> within a string literal).</p> <pre><code>routes = ART::RouteCollection.new\nroutes.add \"blog_list\", ART::Route.new \"/blog/{page}\", requirements: {\"page\" =&gt; /\\d+/}\nroutes.add \"blog_show\", ART::Route.new \"/blog/{slug}\"\n\nmatcher.match \"/blog/foo\" # =&gt; {\"_route\" =&gt; \"blog_show\", \"slug\" =&gt; \"foo\"}\nmatcher.match \"/blog/10\"  # =&gt; {\"_route\" =&gt; \"blog_list\", \"page\" =&gt; \"10\"}\n</code></pre> <p>Tip</p> <p>Checkout <code>ART::Requirement</code> for a set of common, helpful requirement regexes.</p>"},{"location":"Routing/Route/#Athena::Routing::Route--optional-parameters","title":"Optional Parameters","text":"<p>By default, all parameters are required, meaning given the path <code>/blog/{page}</code>, <code>/blog/10</code> would match but <code>/blog</code> would NOT match. Parameters can be made optional by providing a default value for the parameter, for example:</p> <pre><code>ART::Route.new \"/blog/{page}\", {\"page\" =&gt; 1}, {\"page\" =&gt; /\\d+/}\n\n# ...\n\nmatcher.match \"/blog\" # =&gt; {\"_route\" =&gt; \"blog_list\", \"page\" =&gt; \"1\"}\n</code></pre> <p>Caution</p> <p>More than one parameter may have a default value, but everything after an optional parameter must also be optional. For example within <code>/{page}/blog</code>, <code>page</code> will always be required and <code>/blog</code> will NOT match.</p> <p><code>defaults</code> may also be inlined within the <code>path</code> by putting the value after a <code>?</code>. This is also compatible with <code>requirements</code>, allowing both to be defined within a path. For example <code>/blog/{page&lt;\\\\d+&gt;?1}</code>.</p> <p>Tip</p> <p>The default value for a parameter may also be <code>nil</code>, with the inline syntax being adding a <code>?</code> with no following value, e.g. <code>{page?}</code>. Be sure to update any type restrictions to be nilable as well.</p>"},{"location":"Routing/Route/#Athena::Routing::Route--priority-parameter","title":"Priority Parameter","text":"<p>When determining which route should match, the first matching route will win. For example, if two routes were added with variable parameters in the same location, the first one that was added would match regardless of what their requirements are. In most cases this will not be a problem, but in some cases you may need to ensure a particular route is checked first.</p>"},{"location":"Routing/Route/#Athena::Routing::Route--special-parameters","title":"Special Parameters","text":"<p>The routing component comes with a few standardized parameters that have special meanings. These parameters could be leveraged within the underlying implementation, but are not directly used within the routing component other than for matching.</p> <ul> <li><code>_format</code> - Could be used to set the underlying format of the request, as well as determining the content-type of the response.</li> <li><code>_fragment</code> - Represents the fragment identifier when generating a URL. E.g. <code>/article/10#summary</code> with the fragment being <code>summary</code>.</li> <li><code>_locale</code> - Could be used to set the underlying locale of the <code>ART::Request</code> based on which route is matched.</li> </ul> <pre><code>ART::Route.new(\n  \"/articles/{_locale}/search.{_format}\",\n  {\n    \"_locale\" =&gt; \"en\",\n    \"_format\" =&gt; \"html\",\n  },\n  {\n    \"_locale\" =&gt; /en|fr/,\n    \"_format\" =&gt; /html|xml/,\n  }\n)\n</code></pre> <p>This route supports <code>en</code> and <code>fr</code> locales in either <code>html</code> or <code>xml</code> formats with a default of <code>en</code> and <code>html</code>.</p> <p>Tip</p> <p>The trailing <code>.</code> is optional if the parameter to the right has a default. E.g. <code>/articles/en/search</code> would match with a format of <code>html</code> but <code>/articles/en/search.xml</code> would be required for matching non-default formats.</p>"},{"location":"Routing/Route/#Athena::Routing::Route--extra-parameters","title":"Extra Parameters","text":"<p>The defaults defined within a route do not all need to be present as route parameters. This could be useful to provide extra context to the controller that should handle the request.</p> <pre><code>ART::Route.new \"/blog/{page}\", {\"page\" =&gt; 1, \"title\" =&gt; \"Hello world!\"}\n</code></pre>"},{"location":"Routing/Route/#Athena::Routing::Route--slash-characters-in-route-parameters","title":"Slash Characters in Route Parameters","text":"<p>By default, route parameters may include any value except a <code>/</code>, since that's the character used to separate the different portions of the URL. Route parameter matching logic may be made more permissive by using a more liberal regex, such as <code>.+</code>, for example:</p> <pre><code>ART::Route.new \"/share/{token}\", requirements: {\"token\" =&gt; /.+/}\n</code></pre> <p>Special parameters should NOT be made more permissive. For example, if the pattern is <code>/share/{token}.{_format}</code> and <code>{token}</code> allows any character, the <code>/share/foo/bar.json</code> URL will consider <code>foo/bar.json</code> as the token and the format will be empty. This can be solved by replacing the <code>.+</code> requirement with <code>[^.]+</code> to allow any character except dots.</p> <p>Related to this, allowing multiple parameters to accept <code>/</code> may also lead to unexpected results.</p>"},{"location":"Routing/Route/#Athena::Routing::Route--sub-domain-routing","title":"Sub-Domain Routing","text":"<p>The <code>host</code> property can be used to require the HTTP host header to match this value in order for the route to match.</p> <pre><code>mobile_homepage = ART::Route.new \"/\", host: \"m.example.com\"\nhomepage = ART::Route.new \"/\"\n</code></pre> <p>In this example, both routes match the same path, but one requires a specific hostname. The <code>host</code> parameter can also be used as route parameters, including <code>defaults</code> and <code>requirements</code> support:</p> <pre><code>mobile_homepage = ART::Route.new(\n  \"/\",\n  {\"subdomain\" =&gt; \"m\"},\n  {\"subdomain\" =&gt; /m|mobile/},\n  \"{subdomain}.example.com\"\n)\nhomepage = ART::Route.new \"/\"\n</code></pre> <p>Tip</p> <p>Inline defaults and requirements also works for <code>host</code> values, <code>\"{subdomain&lt;m|mobile&gt;?m}.example.com\"</code>.</p>"},{"location":"Routing/Route/#Athena::Routing::Route-constructors","title":"Constructors","text":""},{"location":"Routing/Route/#Athena::Routing::Route.new(path,defaults,requirements,host,methods,schemes,condition)","title":"<code>.new(path : String, defaults : Hash(String, _) = Hash(String, String | ::Nil).new, requirements : Hash(String, Regex | String) = Hash(String, Regex | String).new, host : String | Regex | Nil = nil, methods : String | Enumerable(String) | Nil = nil, schemes : String | Enumerable(String) | Nil = nil, condition : ART::Route::Condition | Nil = nil)</code>","text":"View source"},{"location":"Routing/Route/#Athena::Routing::Route-methods","title":"Methods","text":""},{"location":"Routing/Route/#Athena::Routing::Route#add_defaults(defaults)","title":"<code>#add_defaults(defaults : Hash(String, _)) : self</code>","text":"<p>Adds the provided defaults, overriding previously set values.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#add_requirements(requirements)","title":"<code>#add_requirements(requirements : Hash(String, Regex | String)) : self</code>","text":"<p>Adds the provided requirements, overriding previously set values.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#clone","title":"<code>#clone</code>","text":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#compile","title":"<code>#compile : CompiledRoute</code>","text":"<p>Compiles and returns an <code>ART::CompiledRoute</code> representing this route. The route is only compiled once and future calls to this method will return the same compiled route, assuming no changes were made to this route in between.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#condition","title":"<code>#condition : Condition | ::Nil</code>","text":"<p>Returns the optional <code>ART::Route::Condition</code> callback used to determine if this route should match. See Routing Expressions for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#condition(&)","title":"<code>#condition : self</code>","text":"<p>Sets the optional <code>ART::Route::Condition</code> callback used to determine if this route should match.</p> <pre><code>route = ART::Route.new \"/foo\"\nroute.condition do |context, request|\n  request.headers[\"user-agent\"].includes? \"Firefox\"\nend\n</code></pre> <p>See Routing Expressions for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#condition=(condition)","title":"<code>#condition=(condition : Condition | Nil)</code>","text":"<p>Returns the optional <code>ART::Route::Condition</code> callback used to determine if this route should match. See Routing Expressions for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#default(key)","title":"<code>#default(key : String) : String | Nil</code>","text":"<p>Returns the default with the provided key, if any.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#defaults","title":"<code>#defaults : Hash(String, String | ::Nil)</code>","text":"<p>Returns a hash representing the default values of a route's parameters if they were not provided in the request. See Optional Parameters for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#defaults=(defaults)","title":"<code>#defaults=(defaults : Hash(String, _)) : self</code>","text":"<p>Sets the hash representing the default values of a route's parameters if they were not provided in the request to the provided defaults. See Optional Parameters for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#has_default?(key)","title":"<code>#has_default?(key : String) : Bool</code>","text":"<p>Returns <code>true</code> if this route has a default with the provided key, otherwise <code>false</code>.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#has_requirement?(key)","title":"<code>#has_requirement?(key : String) : Bool</code>","text":"<p>Returns <code>true</code> if this route has a requirement with the provided key, otherwise <code>false</code>.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#has_scheme?(scheme)","title":"<code>#has_scheme?(scheme : String) : Bool</code>","text":"<p>Returns <code>true</code> if this route allows the provided scheme, otherwise <code>false</code>.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#host","title":"<code>#host : String | ::Nil</code>","text":"<p>Returns the hostname that the HTTP host header must match in order for this route to match. See Sub-Domain Routing for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#host=(pattern)","title":"<code>#host=(pattern : String | Regex) : self</code>","text":"<p>Sets the hostname that the HTTP host header must match in order for this route to match to the provided pattern. See Sub-Domain Routing for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#methods","title":"<code>#methods : Set(String) | ::Nil</code>","text":"<p>Returns the set of valid HTTP methods that this route supports. See ART::Route for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#methods=(methods)","title":"<code>#methods=(methods : String | Enumerable(String)) : self</code>","text":"<p>Sets the set of valid HTTP method(s) that this route supports. See ART::Route for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#path","title":"<code>#path : String</code>","text":"<p>Returns the URL that this route will handle. See Routing Parameters for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#path=(pattern)","title":"<code>#path=(pattern : String) : self</code>","text":"<p>Sets the path required for this route to match to the provided pattern.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#requirement(key)","title":"<code>#requirement(key : String) : Regex | Nil</code>","text":"<p>Returns the requirement with the provided key, if any.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#requirements","title":"<code>#requirements : Hash(String, Regex)</code>","text":"<p>Returns a hash representing the requirements the route's parameters must match in order for this route to match. See Parameter Validation for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#requirements=(requirements)","title":"<code>#requirements=(requirements : Hash(String, Regex | String)) : self</code>","text":"<p>Sets the hash representing the requirements the route's parameters must match in order for this route to match to the provided requirements. See Parameter Validation for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#schemes","title":"<code>#schemes : Set(String) | ::Nil</code>","text":"<p>Returns the set of valid URI schemes that this route supports. See ART::Route for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#schemes=(schemes)","title":"<code>#schemes=(schemes : String | Enumerable(String)) : self</code>","text":"<p>Sets the set of valid URI scheme(s) that this route supports. See ART::Route for more information.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#set_default(key,value)","title":"<code>#set_default(key : String, value : String | Nil) : self</code>","text":"<p>Sets the default with the provided key to the provided value.</p> View source"},{"location":"Routing/Route/#Athena::Routing::Route#set_requirement(key,requirement)","title":"<code>#set_requirement(key : String, requirement : Regex | String) : self</code>","text":"<p>Sets the requirement with the provided key to the provided value.</p> View source"},{"location":"Routing/Route/Condition/","title":"Condition","text":""},{"location":"Routing/Route/Condition/#Athena::Routing::Route::Condition","title":"alias <code>Athena::Routing::Route::Condition</code>","text":"<p>Represents the callback proc used to dynamically determine if a route should be matched. See Routing Expressions for more information.</p> Alias definition <code>Athena::Routing::RequestContext, HTTP::Request -&gt; Bool</code>"},{"location":"Routing/RouteCollection/","title":"RouteCollection","text":""},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection","title":"class <code>Athena::Routing::RouteCollection</code> inherits <code>Reference</code>","text":"<p>Represents a collection of <code>ART::Route</code>s. Provides a way to traverse, edit, remove, and access the stored routes.</p> <p>Each route has an associated name that should be unique. Adding another route with the same name will override the previous one.</p>"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection--route-priority","title":"Route Priority","text":"<p>When determining which route should match, the first matching route will win. For example, if two routes were added with variable parameters in the same location, the first one that was added would match regardless of what their requirements are. In most cases this will not be a problem, but in some cases you may need to ensure a particular route is checked first.</p> <p>The <code>priority</code> argument within <code>#add</code> can be used to control this order.</p> Included modules <code>Enumerable</code> <code>Iterable</code>"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection-methods","title":"Methods","text":""},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#[](name)","title":"<code>#[](name : String) : ART::Route</code>","text":"<p>Returns the <code>ART::Action</code> with the provided name.</p> <p>Raises a <code>ART::Exception::RouteNotFound</code> if a route with the provided name does not exist.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#[]?(name)","title":"<code>#[]?(name : String) : ART::Route | Nil</code>","text":"<p>Returns the <code>ART::Action</code> with the provided name, or <code>nil</code> if it does not exist.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#add(name,route,priority)","title":"<code>#add(name : String, route : ART::Route, priority : Int32 = 0) : Nil</code>","text":"<p>Adds the provided route with the provided name to this collection, optionally with the provided priority.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#add(collection)","title":"<code>#add(collection : self) : Nil</code>","text":"<p>Adds all the routes from the provided collection to this collection.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#add_defaults(defaults)","title":"<code>#add_defaults(defaults : Hash(String, _)) : Nil</code>","text":"View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#add_name_prefix(prefix)","title":"<code>#add_name_prefix(prefix : String) : Nil</code>","text":"<p>Adds the provided prefix to the name of all routes stored within this collection.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#add_prefix(prefix,defaults,requirements)","title":"<code>#add_prefix(prefix : String, defaults : Hash(String, _) = Hash(String, String | ::Nil).new, requirements : Hash(String, String | Regex) = Hash(String, String | Regex).new) : Nil</code>","text":"<p>Adds a path prefix to all routes stored in this collection. Optionally allows merging in additional defaults or requirements.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#add_requirements(requirements)","title":"<code>#add_requirements(requirements : Hash(String, Regex | String)) : Nil</code>","text":"<p>Merges the provided requirements into all routes stored within this collection.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#clone","title":"<code>#clone</code>","text":"<p>Returns a copy of <code>self</code> with all instance variables cloned.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#each(&)","title":"<code>#each : Nil</code>","text":"<p>Yields the name and <code>ART::Route</code> object for each registered route.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#each","title":"<code>#each</code>","text":"<p>Returns an <code>Iterator</code> for each registered route.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#methods=(methods)","title":"<code>#methods=(methods : String | Enumerable(String)) : Nil</code>","text":"<p>Sets the method(s) of all routes stored within this collection.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#remove(name)","title":"<code>#remove(name : String) : Nil</code>","text":"<p>Removes the route with the provide name.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#remove(*)","title":"<code>#remove(*names : String) : Nil</code>","text":"<p>Removes the routes with the provide names.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#routes","title":"<code>#routes : Hash(String, ART::Route)</code>","text":"<p>Returns the routes stored within this collection.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#schemes=(schemes)","title":"<code>#schemes=(schemes : String | Enumerable(String)) : Nil</code>","text":"<p>Sets the scheme(s) of all routes stored within this collection.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#set_host(host,defaults,requirements)","title":"<code>#set_host(host : String, defaults : Hash(String, _) = Hash(String, String | ::Nil).new, requirements : Hash(String, String | Regex) = Hash(String, String | Regex).new) : Nil</code>","text":"<p>Sets the host property of all routes stored in this collection. Optionally allows merging in additional defaults or requirements.</p> View source"},{"location":"Routing/RouteCollection/#Athena::Routing::RouteCollection#size","title":"<code>#size : Int</code>","text":"<p>Returns the number of routes stored within this collection.</p> View source"},{"location":"Routing/Router/","title":"Router","text":""},{"location":"Routing/Router/#Athena::Routing::Router","title":"class <code>Athena::Routing::Router</code> inherits <code>Reference</code>","text":"Included modules <code>Athena::Routing::Matcher::RequestMatcherInterface</code> <code>Athena::Routing::RouterInterface</code>"},{"location":"Routing/Router/#Athena::Routing::Router-constructors","title":"Constructors","text":""},{"location":"Routing/Router/#Athena::Routing::Router.new(route_collection,default_locale,strict_requirements,context)","title":"<code>.new(route_collection : ART::RouteCollection, default_locale : String | Nil = nil, strict_requirements : Bool = true, context : ART::RequestContext | Nil = nil)</code>","text":"View source"},{"location":"Routing/Router/#Athena::Routing::Router-methods","title":"Methods","text":""},{"location":"Routing/Router/#Athena::Routing::Router#context","title":"<code>#context : ART::RequestContext</code>","text":"<p>Returns the request context.</p> View source"},{"location":"Routing/Router/#Athena::Routing::Router#context=(context)","title":"<code>#context=(context : ART::RequestContext)</code>","text":"<p>Sets the request context.</p> View source"},{"location":"Routing/Router/#Athena::Routing::Router#generate(route,params,reference_type)","title":"<code>#generate(route : String, params : Hash(String, String | Nil) = Hash(String, String | ::Nil).new, reference_type : ART::Generator::ReferenceType = :absolute_path) : String</code>","text":"<p>Generates a URL for the provided route, optionally with the provided params and reference_type.</p> View source"},{"location":"Routing/Router/#Athena::Routing::Router#generator","title":"<code>#generator : ART::Generator::Interface</code>","text":"View source"},{"location":"Routing/Router/#Athena::Routing::Router#match(path)","title":"<code>#match(path : String) : Hash(String, String | Nil)</code>","text":"<p>Tries to match the provided path to its related route. Returns a hash of the route's defaults and parameters resolved from the path.</p> <p>Raises an <code>ART::Exception::ResourceNotFound</code> if no route could be matched.</p> <p>Raises an <code>ART::Exception::MethodNotAllowed</code> if a route exists but not for the current HTTP method.</p> View source"},{"location":"Routing/Router/#Athena::Routing::Router#match(request)","title":"<code>#match(request : ART::Request) : Hash(String, String | Nil)</code>","text":"<p>Tries to match the provided request to its related route. Returns a hash of the route's defaults and parameters resolved from the request.</p> <p>Raises an <code>ART::Exception::ResourceNotFound</code> if no route could be matched.</p> <p>Raises an <code>ART::Exception::MethodNotAllowed</code> if a route exists but not for the request's method.</p> View source"},{"location":"Routing/Router/#Athena::Routing::Router#match?(path)","title":"<code>#match?(path : String) : Hash(String, String | Nil) | Nil</code>","text":"<p>Tries to match the provided path to its related route. Returns a hash of the route's defaults and parameters resolved from the path.</p> <p>Returns <code>nil</code> if no route could be matched or a route exists but not for the current HTTP method.</p> View source"},{"location":"Routing/Router/#Athena::Routing::Router#match?(request)","title":"<code>#match?(request : ART::Request) : Hash(String, String | Nil) | Nil</code>","text":"<p>Tries to match the provided request to its related route. Returns a hash of the route's defaults and parameters resolved from the request.</p> <p>Returns <code>nil</code> if no route could be matched or a route exists but not for the request's method.</p> View source"},{"location":"Routing/Router/#Athena::Routing::Router#matcher","title":"<code>#matcher : ART::Matcher::URLMatcherInterface</code>","text":"View source"},{"location":"Routing/Router/#Athena::Routing::Router#route_collection","title":"<code>#route_collection : ART::RouteCollection</code>","text":"<p>:inherit:</p> View source"},{"location":"Routing/RouterInterface/","title":"RouterInterface","text":""},{"location":"Routing/RouterInterface/#Athena::Routing::RouterInterface","title":"module <code>Athena::Routing::RouterInterface</code>","text":"Included modules <code>Athena::Routing::Generator::Interface</code> <code>Athena::Routing::Matcher::URLMatcherInterface</code> Direct including types <code>Athena::Routing::Router</code>"},{"location":"Routing/RouterInterface/#Athena::Routing::RouterInterface-methods","title":"Methods","text":""},{"location":"Routing/RouterInterface/#Athena::Routing::RouterInterface#route_collection","title":"abstract <code>#route_collection : ART::RouteCollection</code>","text":"View source"},{"location":"Routing/RoutingHandler/","title":"RoutingHandler","text":""},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler","title":"class <code>Athena::Routing::RoutingHandler</code> inherits <code>Reference</code>","text":"<p>Provides basic routing functionality to an HTTP::Server.</p> <p>This type works as both a HTTP::Handler and an <code>ART::RouteCollection</code> that accepts a block that will handle that particular route.</p> <pre><code>handler = ART::RoutingHandler.new\n\n# The `methods` property can be used to limit the route to a particular HTTP method.\nhandler.add \"new_article\", ART::Route.new(\"/article\", methods: \"post\") do |ctx|\n  pp ctx.request.body.try &amp;.gets_to_end\nend\n\n# The match parameters from the route are passed to the callback as a `Hash(String, String?)`.\nhandler.add \"article\", ART::Route.new(\"/article/{id&lt;\\\\d+&gt;}\", methods: \"get\") do |ctx, params|\n  pp params # =&gt; {\"_route\" =&gt; \"article\", \"id\" =&gt; \"10\"}\nend\n\n# Call the `#compile` method when providing the handler to the handler array.\nserver = HTTP::Server.new([\n  handler.compile,\n])\n\naddress = server.bind_tcp 8080\nputs \"Listening on http://#{address}\"\nserver.listen\n</code></pre> <p>Note</p> <p>This handler should be the last one, as it is terminal.</p>"},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler--bubbling-exceptions","title":"Bubbling Exceptions","text":"<p>By default, requests that result in an exception, either from <code>Athena::Routing</code> or the callback block itself, are gracefully handled by returning a proper error response to the client via HTTP::Server::Response#respond_with_status.</p> <p>You can set <code>bubble_exceptions: true</code> when instantiating the routing handler to have full control over the returned response. This would allow you to define your own HTTP::Handler that can rescue the exceptions and apply your custom logic for how to handle the error.</p> <pre><code>class ErrorHandler\n  include HTTP::Handler\n\n  def call(context)\n    call_next context\n  rescue ex\n    # Do something based on the ex, such as rendering the appropriate template, etc.\n  end\nend\n\nhandler = ART::RoutingHandler.new bubble_exceptions: true\n\n# Add the routes...\n\n# Have the `ErrorHandler` run _before_ the routing handler.\nserver = HTTP::Server.new([\n  ErrorHandler.new,\n  handler.compile,\n])\n\naddress = server.bind_tcp 8080\nputs \"Listening on http://#{address}\"\nserver.listen\n</code></pre> Included modules <code>HTTP::Handler</code>"},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler-constructors","title":"Constructors","text":""},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler.new(matcher,collection,bubble_exceptions)","title":"<code>.new(matcher : ART::Matcher::URLMatcherInterface | Nil = nil, collection : ART::RouteCollection = ART::RouteCollection.new, bubble_exceptions : Bool = false)</code>","text":"View source"},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler-methods","title":"Methods","text":""},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler#add(name,route,priority,&)","title":"<code>#add(name : String, route : ART::Route, priority : Int32 = 0, &amp;block : HTTP::Server::Context, Hash(String, String | Nil) -&gt; Nil) : Nil</code>","text":"<p>Adds the provided route with the provided name to this collection, optionally with the provided priority. The passed block will be called when a request matching this route is encountered.</p> View source"},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler#call(context)","title":"<code>#call(context)</code>","text":"<p>:inherit:</p> View source"},{"location":"Routing/RoutingHandler/#Athena::Routing::RoutingHandler#compile","title":"<code>#compile : self</code>","text":"<p>Helper method that calls <code>ART.compile</code> with the internal <code>ART::RouteCollection</code>, and returns <code>self</code> to make setting up the routes easier.</p> <pre><code>handler = ART::RoutingHandler.new\n\n# Register routes\n\nserver = HTTP::Server.new([\n  handler.compile,\n])\n</code></pre> View source"},{"location":"Serializer/","title":"Serializer","text":""},{"location":"Serializer/#Athena::Serializer","title":"module <code>Athena::Serializer</code>","text":"<p>Athena's Serializer component, <code>ASR</code> for short, adds enhanced (de)serialization features to your project.</p>"},{"location":"Serializer/#Athena::Serializer--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Checkout the manual for some additional information on how to use it within the framework.</p> <p>If using it outside of the framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-serializer:\n    github: athena-framework/serializer\n    version: ~&gt; 0.3.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-serializer\"</code>.</p>"},{"location":"Serializer/#Athena::Serializer--usage","title":"Usage","text":"<p>See the <code>ASR::Annotations</code> namespace a complete list of annotations, as well as each annotation for more detailed information.</p> <pre><code># ExclusionPolicy specifies that all properties should not be (de)serialized\n# unless exposed via the `ASRA::Expose` annotation.\n@[ASRA::ExclusionPolicy(:all)]\n@[ASRA::AccessorOrder(:alphabetical)]\nclass Example\n  include ASR::Serializable\n\n  # Groups can be used to create different \"views\" of a type.\n  @[ASRA::Expose]\n  @[ASRA::Groups(\"details\")]\n  property name : String\n\n  # The `ASRA::Name` controls the name that this property\n  # should be deserialized from or be serialized to.\n  # It can also be used to set the default serialized naming strategy on the type.\n  @[ASRA::Expose]\n  @[ASRA::Name(deserialize: \"a_prop\", serialize: \"a_prop\")]\n  property some_prop : String\n\n  # Define a custom accessor used to get the value for serialization.\n  @[ASRA::Expose]\n  @[ASRA::Groups(\"default\", \"details\")]\n  @[ASRA::Accessor(getter: get_title)]\n  property title : String\n\n  # ReadOnly properties cannot be set on deserialization\n  @[ASRA::Expose]\n  @[ASRA::ReadOnly]\n  property created_at : Time = Time.utc\n\n  # Allows the property to be set via deserialization,\n  # but not exposed when serialized.\n  @[ASRA::IgnoreOnSerialize]\n  property password : String?\n\n  # Because of the `:all` exclusion policy, and not having the `ASRA::Expose` annotation,\n  # these properties are not exposed.\n  getter first_name : String?\n  getter last_name : String?\n\n  # Runs directly after `self` is deserialized\n  @[ASRA::PostDeserialize]\n  def split_name : Nil\n    @first_name, @last_name = @name.split(' ')\n  end\n\n  # Allows using the return value of a method as a key/value in the serialized output.\n  @[ASRA::VirtualProperty]\n  def get_val : String\n    \"VAL\"\n  end\n\n  private def get_title : String\n    @title.downcase\n  end\nend\n\nobj = ASR.serializer.deserialize Example, %({\"name\":\"FIRST LAST\",\"a_prop\":\"STR\",\"title\":\"TITLE\",\"password\":\"monkey123\",\"created_at\":\"2020-10-10T12:34:56Z\"}), :json\nobj                                                                                     # =&gt; #&lt;Example:0x7f3e3b106740 @created_at=2020-07-05 23:06:58.943298289 UTC, @name=\"FIRST LAST\", @some_prop=\"STR\", @title=\"TITLE\", @password=\"monkey123\", @first_name=\"FIRST\", @last_name=\"LAST\"&gt;\nASR.serializer.serialize obj, :json                                                     # =&gt; {\"a_prop\":\"STR\",\"created_at\":\"2020-07-05T23:06:58.94Z\",\"get_val\":\"VAL\",\"name\":\"FIRST LAST\",\"title\":\"title\"}\nASR.serializer.serialize obj, :json, ASR::SerializationContext.new.groups = [\"details\"] # =&gt; {\"name\":\"FIRST LAST\",\"title\":\"title\"}\n</code></pre>"},{"location":"Serializer/#Athena::Serializer-constants","title":"Constants","text":""},{"location":"Serializer/#Athena::Serializer::VERSION","title":"<code>VERSION = \"0.3.4\"</code>","text":""},{"location":"Serializer/#Athena::Serializer-class-methods","title":"Class methods","text":""},{"location":"Serializer/#Athena::Serializer.serializer","title":"<code>.serializer : ASR::SerializerInterface</code>","text":"<p>Returns an <code>ASR::SerializerInterface</code> instance for ad-hoc (de)serialization.</p> <p>The serializer is cached and only instantiated once.</p> View source"},{"location":"Serializer/aliases/","title":"Aliases","text":""},{"location":"Serializer/aliases/#ASR","title":"alias <code>ASR</code>","text":"<p>Convenience alias to make referencing <code>Athena::Serializer</code> types easier.</p> Alias definition <code>Athena::Serializer</code>"},{"location":"Serializer/aliases/#ASRA","title":"alias <code>ASRA</code>","text":"<p>Convenience alias to make referencing <code>Athena::Serializer::Annotations</code> types easier.</p> Alias definition <code>Athena::Serializer::Annotations</code>"},{"location":"Serializer/Annotations/","title":"Annotations","text":""},{"location":"Serializer/Annotations/#Athena::Serializer::Annotations","title":"module <code>Athena::Serializer::Annotations</code>","text":"<p><code>Athena::Serializer</code> uses annotations to control how an object gets serialized and deserialized. This module includes all the default serialization and deserialization annotations. The <code>ASRA</code> alias can be used as a shorthand when applying the annotations.</p>"},{"location":"Serializer/Annotations/Accessor/","title":"Accessor","text":""},{"location":"Serializer/Annotations/Accessor/#Athena::Serializer::Annotations::Accessor","title":"annotation <code>Athena::Serializer::Annotations::Accessor</code>","text":"<p>Allows using methods/modules to control how a property is retrieved/set.</p>"},{"location":"Serializer/Annotations/Accessor/#Athena::Serializer::Annotations::Accessor--fields","title":"Fields","text":"<ul> <li><code>getter</code> - A method name whose return value will be used as the serialized value.</li> <li><code>setter</code> - A method name that accepts the deserialized value.  Can be used to apply additional logic before setting the properties value.</li> <li><code>converter</code> - A module that defines a <code>.deserialize</code> method.  Can be used to share common deserialization between types.</li> <li><code>path : Tuple</code> - A set of keys used to navigate to a value during deserialization.  The value of the last key will be used as the property's value.</li> </ul>"},{"location":"Serializer/Annotations/Accessor/#Athena::Serializer::Annotations::Accessor--example","title":"Example","text":""},{"location":"Serializer/Annotations/Accessor/#Athena::Serializer::Annotations::Accessor--gettersetter","title":"Getter/Setter","text":"<pre><code>class AccessorExample\n  include ASR::Serializable\n\n  def initialize; end\n\n  @[ASRA::Accessor(getter: get_foo, setter: set_foo)]\n  property foo : String = \"foo\"\n\n  private def set_foo(foo : String) : String\n    @foo = foo.upcase\n  end\n\n  private def get_foo : String\n    @foo.upcase\n  end\nend\n\nASR.serializer.serialize AccessorExample.new, :json                 # =&gt; {\"foo\":\"FOO\"}\nASR.serializer.deserialize AccessorExample, %({\"foo\":\"bar\"}), :json # =&gt; #&lt;AccessorExample:0x7f5915e25c20 @foo=\"BAR\"&gt;\n</code></pre>"},{"location":"Serializer/Annotations/Accessor/#Athena::Serializer::Annotations::Accessor--converter","title":"Converter","text":"<pre><code>module ReverseConverter\n  def self.deserialize(navigator : ASR::Navigators::DeserializationNavigatorInterface, metadata : ASR::PropertyMetadataBase, data : ASR::Any) : String\n    data.as_s.reverse\n  end\nend\n\nclass ConverterExample\n  include ASR::Serializable\n\n  @[ASRA::Accessor(converter: ReverseConverter)]\n  getter str : String\nend\n\nASR.serializer.deserialize ConverterExample, %({\"str\":\"jim\"}), :json # =&gt; #&lt;ConverterExample:0x7f9745fa6d60 @str=\"mij\"&gt;\n</code></pre>"},{"location":"Serializer/Annotations/Accessor/#Athena::Serializer::Annotations::Accessor--path","title":"Path","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  getter id : Int64\n\n  @[ASRA::Accessor(path: {\"stats\", \"HP\"})]\n  getter hp : Int32\n\n  @[ASRA::Accessor(path: {\"stats\", \"Attack\"})]\n  getter attack : Int32\n\n  @[ASRA::Accessor(path: {\"downs\", -1, \"last_down\"})]\n  getter last_down : Time\nend\n\nDATA = &lt;&lt;-JSON\n{\n  \"id\": 1,\n  \"stats\": {\n    \"HP\": 45,\n    \"Attack\": 49\n  },\n  \"downs\": [\n    {\n      \"id\": 1,\n      \"last_down\": \"2020-05-019T05:23:17Z\"\n    },\n    {\n      \"id\": 2,\n      \"last_down\": \"2020-04-07T12:34:56Z\"\n    }\n  ]\n\n}\nJSON\n\nASR.serializer.deserialize Example, DATA, :json\n# #&lt;Example:0x7f43c4ddf580\n#  @attack=49,\n#  @hp=45,\n#  @id=1,\n#  @last_down=2020-04-07 12:34:56.0 UTC&gt;\n</code></pre>"},{"location":"Serializer/Annotations/AccessorOrder/","title":"AccessorOrder","text":""},{"location":"Serializer/Annotations/AccessorOrder/#Athena::Serializer::Annotations::AccessorOrder","title":"annotation <code>Athena::Serializer::Annotations::AccessorOrder</code>","text":"<p>Can be applied to a type to control the order of properties when serialized.  Valid values: <code>:alphabetical</code>, and <code>:custom</code>.</p> <p>By default properties are ordered in the order in which they are defined.</p>"},{"location":"Serializer/Annotations/AccessorOrder/#Athena::Serializer::Annotations::AccessorOrder--fields","title":"Fields","text":"<ul> <li><code>order</code> - Used to specify the order of the properties when using <code>:custom</code> ordering.</li> </ul>"},{"location":"Serializer/Annotations/AccessorOrder/#Athena::Serializer::Annotations::AccessorOrder--example","title":"Example","text":"<pre><code>class Default\n  include ASR::Serializable\n\n  def initialize; end\n\n  property a : String = \"A\"\n  property z : String = \"Z\"\n  property two : String = \"two\"\n  property one : String = \"one\"\n  property a_a : Int32 = 123\n\n  @[ASRA::VirtualProperty]\n  def get_val : String\n    \"VAL\"\n  end\nend\n\nASR.serializer.serialize Default.new, :json # =&gt; {\"a\":\"A\",\"z\":\"Z\",\"two\":\"two\",\"one\":\"one\",\"a_a\":123,\"get_val\":\"VAL\"}\n\n@[ASRA::AccessorOrder(:alphabetical)]\nclass Abc\n  include ASR::Serializable\n\n  def initialize; end\n\n  property a : String = \"A\"\n  property z : String = \"Z\"\n  property two : String = \"two\"\n  property one : String = \"one\"\n  property a_a : Int32 = 123\n\n  @[ASRA::VirtualProperty]\n  def get_val : String\n    \"VAL\"\n  end\nend\n\nASR.serializer.serialize Abc.new, :json # =&gt; {\"a\":\"A\",\"a_a\":123,\"get_val\":\"VAL\",\"one\":\"one\",\"two\":\"two\",\"z\":\"Z\"}\n\n@[ASRA::AccessorOrder(:custom, order: [\"two\", \"z\", \"get_val\", \"a\", \"one\", \"a_a\"])]\nclass Custom\n  include ASR::Serializable\n\n  def initialize; end\n\n  property a : String = \"A\"\n  property z : String = \"Z\"\n  property two : String = \"two\"\n  property one : String = \"one\"\n  property a_a : Int32 = 123\n\n  @[ASRA::VirtualProperty]\n  def get_val : String\n    \"VAL\"\n  end\nend\n\nASR.serializer.serialize Custom.new, :json # =&gt; {\"two\":\"two\",\"z\":\"Z\",\"get_val\":\"VAL\",\"a\":\"A\",\"one\":\"one\",\"a_a\":123}\n</code></pre>"},{"location":"Serializer/Annotations/Discriminator/","title":"Discriminator","text":""},{"location":"Serializer/Annotations/Discriminator/#Athena::Serializer::Annotations::Discriminator","title":"annotation <code>Athena::Serializer::Annotations::Discriminator</code>","text":"<p>Allows deserializing an object based on the value of a specific field.</p>"},{"location":"Serializer/Annotations/Discriminator/#Athena::Serializer::Annotations::Discriminator--fields","title":"Fields","text":"<ul> <li><code>key : String</code> - The field that should be read from the data to determine the correct type.</li> <li><code>map : Hash | NamedTuple</code> - Maps the possible <code>key</code> values to their corresponding types.</li> </ul>"},{"location":"Serializer/Annotations/Discriminator/#Athena::Serializer::Annotations::Discriminator--example","title":"Example","text":"<pre><code>@[ASRA::Discriminator(key: \"type\", map: {point: Point, circle: Circle})]\nabstract class Shape\n  include ASR::Serializable\n\n  property type : String\nend\n\nclass Point &lt; Shape\n  property x : Int32\n  property y : Int32\nend\n\nclass Circle &lt; Shape\n  property x : Int32\n  property y : Int32\n  property radius : Int32\nend\n\nASR.serializer.deserialize Shape, %({\"type\":\"point\",\"x\":10,\"y\":20}), :json              # =&gt; #&lt;Point:0x7fbbf7f8bc20 @type=\"point\", @x=10, @y=20&gt;\nASR.serializer.deserialize Shape, %({\"type\":\"circle\",\"x\":30,\"y\":40,\"radius\":12}), :json # =&gt; #&lt;Circle:0x7fbbf7f93c60 @radius=12, @type=\"circle\", @x=30, @y=40&gt;\n</code></pre>"},{"location":"Serializer/Annotations/Exclude/","title":"Exclude","text":""},{"location":"Serializer/Annotations/Exclude/#Athena::Serializer::Annotations::Exclude","title":"annotation <code>Athena::Serializer::Annotations::Exclude</code>","text":"<p>Indicates that a property should not be serialized/deserialized when used with <code>:none</code> <code>ASRA::ExclusionPolicy</code>.</p> <p>Also see, <code>ASRA::IgnoreOnDeserialize</code> and <code>ASRA::IgnoreOnSerialize</code>.</p>"},{"location":"Serializer/Annotations/Exclude/#Athena::Serializer::Annotations::Exclude--example","title":"Example","text":"<pre><code>@[ASRA::ExclusionPolicy(:none)]\nclass Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  property name : String = \"Jim\"\n\n  @[ASRA::Exclude]\n  property password : String = \"monkey\"\nend\n\nASR.serializer.serialize Example.new, :json                                          # =&gt; {\"name\":\"Jim\"}\nASR.serializer.deserialize Example, %({\"name\":\"Jim\",\"password\":\"password1!\"}), :json # =&gt; #&lt;Example:0x7f6eec4b6a60 @name=\"Jim\", @password=\"monkey\"&gt;\n</code></pre> <p>Warning</p> <p>On deserialization, the excluded properties must be nilable, or have a default value.</p>"},{"location":"Serializer/Annotations/ExclusionPolicy/","title":"ExclusionPolicy","text":""},{"location":"Serializer/Annotations/ExclusionPolicy/#Athena::Serializer::Annotations::ExclusionPolicy","title":"annotation <code>Athena::Serializer::Annotations::ExclusionPolicy</code>","text":"<p>Defines the default exclusion policy to use on a class.  Valid values: <code>:none</code>, and <code>:all</code>.</p> <p>Used with <code>ASRA::Expose</code> and <code>ASRA::Exclude</code>.</p>"},{"location":"Serializer/Annotations/Expose/","title":"Expose","text":""},{"location":"Serializer/Annotations/Expose/#Athena::Serializer::Annotations::Expose","title":"annotation <code>Athena::Serializer::Annotations::Expose</code>","text":"<p>Indicates that a property should be serialized/deserialized when used with <code>:all</code> <code>ASRA::ExclusionPolicy</code>.</p> <p>Also see, <code>ASRA::IgnoreOnDeserialize</code> and <code>ASRA::IgnoreOnSerialize</code>.</p>"},{"location":"Serializer/Annotations/Expose/#Athena::Serializer::Annotations::Expose--example","title":"Example","text":"<pre><code>@[ASRA::ExclusionPolicy(:all)]\nclass Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  @[ASRA::Expose]\n  property name : String = \"Jim\"\n\n  property password : String = \"monkey\"\nend\n\nASR.serializer.serialize Example.new, :json                                          # =&gt; {\"name\":\"Jim\"}\nASR.serializer.deserialize Example, %({\"name\":\"Jim\",\"password\":\"password1!\"}), :json # =&gt; #&lt;Example:0x7f6eec4b6a60 @name=\"Jim\", @password=\"monkey\"&gt;\n</code></pre> <p>Warning</p> <p>On deserialization, the excluded properties must be nilable, or have a default value.</p>"},{"location":"Serializer/Annotations/Groups/","title":"Groups","text":""},{"location":"Serializer/Annotations/Groups/#Athena::Serializer::Annotations::Groups","title":"annotation <code>Athena::Serializer::Annotations::Groups</code>","text":"<p>Defines the group(s) a property belongs to.  Properties are automatically added to the <code>default</code> group if no groups are explicitly defined.</p> <p>See <code>ASR::ExclusionStrategies::Groups</code>.</p>"},{"location":"Serializer/Annotations/IgnoreOnDeserialize/","title":"IgnoreOnDeserialize","text":""},{"location":"Serializer/Annotations/IgnoreOnDeserialize/#Athena::Serializer::Annotations::IgnoreOnDeserialize","title":"annotation <code>Athena::Serializer::Annotations::IgnoreOnDeserialize</code>","text":"<p>Indicates that a property should not be set on deserialization, but should be serialized.</p>"},{"location":"Serializer/Annotations/IgnoreOnDeserialize/#Athena::Serializer::Annotations::IgnoreOnDeserialize--example","title":"Example","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  property name : String\n\n  @[ASRA::IgnoreOnDeserialize]\n  property password : String?\nend\n\nobj = ASR.serializer.deserialize Example, %({\"name\":\"Jim\",\"password\":\"monkey123\"}), :json\n\nobj.password # =&gt; nil\nobj.name     # =&gt; Jim\n\nobj.password = \"foobar\"\n\nASR.serializer.serialize obj, :json # =&gt; {\"name\":\"Jim\",\"password\":\"foobar\"}\n</code></pre>"},{"location":"Serializer/Annotations/IgnoreOnSerialize/","title":"IgnoreOnSerialize","text":""},{"location":"Serializer/Annotations/IgnoreOnSerialize/#Athena::Serializer::Annotations::IgnoreOnSerialize","title":"annotation <code>Athena::Serializer::Annotations::IgnoreOnSerialize</code>","text":"<p>Indicates that a property should be set on deserialization, but should not be serialized.</p>"},{"location":"Serializer/Annotations/IgnoreOnSerialize/#Athena::Serializer::Annotations::IgnoreOnSerialize--example","title":"Example","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  property name : String\n\n  @[ASRA::IgnoreOnSerialize]\n  property password : String?\nend\n\nobj = ASR.serializer.deserialize Example, %({\"name\":\"Jim\",\"password\":\"monkey123\"}), :json\n\nobj.password # =&gt; monkey123\nobj.name     # =&gt; Jim\n\nobj.password = \"foobar\"\n\nASR.serializer.serialize obj, :json # =&gt; {\"name\":\"Jim\"}\n</code></pre>"},{"location":"Serializer/Annotations/Name/","title":"Name","text":""},{"location":"Serializer/Annotations/Name/#Athena::Serializer::Annotations::Name","title":"annotation <code>Athena::Serializer::Annotations::Name</code>","text":"<p>Defines the <code>key</code> to use during (de)serialization.  If not provided, the name of the property is used. Also allows defining aliases that can be used for that property when deserializing.</p>"},{"location":"Serializer/Annotations/Name/#Athena::Serializer::Annotations::Name--fields","title":"Fields","text":"<ul> <li><code>serialize : String</code> - The key to use for this property during serialization.</li> <li><code>deserialize : String</code> - The key to use for this property during deserialization.</li> <li><code>key</code> : String - The key to use for this property during (de)serialization.</li> <li><code>aliases : Array(String)</code> - A set of keys to use for this property during deserialization; is equivalent to multiple <code>deserialize</code> keys.</li> <li><code>serialization_strategy : Symbol</code> - Defines the default serialization naming strategy for this type.  Can be overridden using the <code>serialize</code> or <code>key</code> field.</li> <li><code>deserialization_strategy : Symbol</code> - Defines the default deserialization naming strategy for this type.  Can be overridden using the <code>deserialize</code> or <code>key</code> field.</li> <li><code>strategy : Symbol</code> - Defines the default (de)serialization naming strategy for this type.  Can be overridden using the <code>serialize</code>, <code>deserialize</code> or <code>key</code> fields.</li> </ul>"},{"location":"Serializer/Annotations/Name/#Athena::Serializer::Annotations::Name--example","title":"Example","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  @[ASRA::Name(serialize: \"myAddress\")]\n  property my_home_address : String = \"123 Fake Street\"\n\n  @[ASRA::Name(deserialize: \"some_key\", serialize: \"a_value\")]\n  property both_names : String = \"str\"\n\n  @[ASRA::Name(key: \"same\")]\n  property same_in_both_directions : String = \"same for both\"\n\n  @[ASRA::Name(aliases: [\"val\", \"value\", \"some_value\"])]\n  property some_value : String = \"some_val\"\nend\n\nASR.serializer.serialize Example.new, :json # =&gt; {\"myAddress\":\"123 Fake Street\",\"a_value\":\"str\",\"same\":\"same for both\",\"some_value\":\"some_val\"}\n\nobj = ASR.serializer.deserialize Example, %({\"my_home_address\":\"555 Mason Ave\",\"some_key\":\"deserialized from diff key\",\"same\":\"same again\",\"value\":\"some_other_val\"}), :json\n\nobj.my_home_address         # =&gt; \"555 Mason Ave\"\nobj.both_names              # =&gt; \"deserialized from diff key\"\nobj.same_in_both_directions # =&gt; \"same again\"\nobj.some_value              # =&gt; \"some_other_val\"\n</code></pre>"},{"location":"Serializer/Annotations/Name/#Athena::Serializer::Annotations::Name--naming-strategies","title":"Naming Strategies","text":"<p>By default the keys in the serialized data match exactly to the name of the property. Naming strategies allow changing this behavior for all properties within the type. The serialized name can still be overridden on a per-property basis via using the <code>ASRA::Name</code> annotation with the <code>serialize</code>, <code>deserialize</code> or <code>key</code> field. The strategy will be applied on serialization, deserialization or both, depending on whether <code>serialization_strategy</code>, <code>deserialization_strategy</code> or <code>strategy</code> is used.</p> <p>The available naming strategies include: * <code>:camelcase</code> * <code>:underscore</code> * <code>:identical</code></p> <pre><code>@[ASRA::Name(strategy: :camelcase)]\nclass User\n  include ASR::Serializable\n\n  def initialize; end\n\n  property id : Int32 = 1\n  property first_name : String = \"Jon\"\n  property last_name : String = \"Snow\"\nend\n\nASR.serializer.serialize User.new, :json # =&gt; {\"id\":1,\"firstName\":\"Jon\",\"lastName\":\"Snow\"}\n</code></pre>"},{"location":"Serializer/Annotations/PostDeserialize/","title":"PostDeserialize","text":""},{"location":"Serializer/Annotations/PostDeserialize/#Athena::Serializer::Annotations::PostDeserialize","title":"annotation <code>Athena::Serializer::Annotations::PostDeserialize</code>","text":"<p>Defines a callback method(s) that are ran directly after the object has been deserialized.</p>"},{"location":"Serializer/Annotations/PostDeserialize/#Athena::Serializer::Annotations::PostDeserialize--example","title":"Example","text":"<pre><code>record Example, name : String, first_name : String?, last_name : String? do\n  include ASR::Serializable\n\n  @[ASRA::PostDeserialize]\n  private def split_name : Nil\n    @first_name, @last_name = @name.split(' ')\n  end\nend\n\nobj = ASR.serializer.deserialize Example, %({\"name\":\"Jon Snow\"}), :json\n\nobj.name       # =&gt; Jon Snow\nobj.first_name # =&gt; Jon\nobj.last_name  # =&gt; Snow\n</code></pre>"},{"location":"Serializer/Annotations/PostSerialize/","title":"PostSerialize","text":""},{"location":"Serializer/Annotations/PostSerialize/#Athena::Serializer::Annotations::PostSerialize","title":"annotation <code>Athena::Serializer::Annotations::PostSerialize</code>","text":"<p>Defines a callback method that is executed directly after the object has been serialized.</p>"},{"location":"Serializer/Annotations/PostSerialize/#Athena::Serializer::Annotations::PostSerialize--example","title":"Example","text":"<pre><code>@[ASRA::ExclusionPolicy(:all)]\nclass Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  @[ASRA::Expose]\n  @name : String?\n\n  property first_name : String = \"Jon\"\n  property last_name : String = \"Snow\"\n\n  @[ASRA::PreSerialize]\n  private def pre_serialize : Nil\n    @name = \"#{first_name} #{last_name}\"\n  end\n\n  @[ASRA::PostSerialize]\n  private def post_serialize : Nil\n    @name = nil\n  end\nend\n\nASR.serializer.serialize Example.new, :json # =&gt; {\"name\":\"Jon Snow\"}\n</code></pre>"},{"location":"Serializer/Annotations/PreSerialize/","title":"PreSerialize","text":""},{"location":"Serializer/Annotations/PreSerialize/#Athena::Serializer::Annotations::PreSerialize","title":"annotation <code>Athena::Serializer::Annotations::PreSerialize</code>","text":"<p>Defines a callback method that is executed directly before the object has been serialized.</p>"},{"location":"Serializer/Annotations/PreSerialize/#Athena::Serializer::Annotations::PreSerialize--example","title":"Example","text":"<pre><code>@[ASRA::ExclusionPolicy(:all)]\nclass Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  @[ASRA::Expose]\n  @name : String?\n\n  property first_name : String = \"Jon\"\n  property last_name : String = \"Snow\"\n\n  @[ASRA::PreSerialize]\n  private def pre_serialize : Nil\n    @name = \"#{first_name} #{last_name}\"\n  end\n\n  @[ASRA::PostSerialize]\n  private def post_serialize : Nil\n    @name = nil\n  end\nend\n\nASR.serializer.serialize Example.new, :json # =&gt; {\"name\":\"Jon Snow\"}\n</code></pre>"},{"location":"Serializer/Annotations/ReadOnly/","title":"ReadOnly","text":""},{"location":"Serializer/Annotations/ReadOnly/#Athena::Serializer::Annotations::ReadOnly","title":"annotation <code>Athena::Serializer::Annotations::ReadOnly</code>","text":"<p>Indicates that a property is read-only and cannot be set during deserialization.</p>"},{"location":"Serializer/Annotations/ReadOnly/#Athena::Serializer::Annotations::ReadOnly--example","title":"Example","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  property name : String\n\n  @[ASRA::ReadOnly]\n  property password : String?\nend\n\nobj = ASR.serializer.deserialize Example, %({\"name\":\"Fred\",\"password\":\"password1\"}), :json\n\nobj.name     # =&gt; \"Fred\"\nobj.password # =&gt; nil\n</code></pre> <p>Warning</p> <p>The property must be nilable, or have a default value.</p>"},{"location":"Serializer/Annotations/Since/","title":"Since","text":""},{"location":"Serializer/Annotations/Since/#Athena::Serializer::Annotations::Since","title":"annotation <code>Athena::Serializer::Annotations::Since</code>","text":"<p>Represents the first version a property was available.</p> <p>See <code>ASR::ExclusionStrategies::Version</code>.</p> <p>Note</p> <p>Value must be a <code>SemanticVersion</code> version.</p>"},{"location":"Serializer/Annotations/Skip/","title":"Skip","text":""},{"location":"Serializer/Annotations/Skip/#Athena::Serializer::Annotations::Skip","title":"annotation <code>Athena::Serializer::Annotations::Skip</code>","text":"<p>Indicates that a property should not be serialized or deserialized.</p>"},{"location":"Serializer/Annotations/Skip/#Athena::Serializer::Annotations::Skip--example","title":"Example","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  property name : String = \"Jim\"\n\n  @[ASRA::Skip]\n  property password : String = \"monkey\"\nend\n\nASR.serializer.deserialize Example, %({\"name\":\"Fred\",\"password\":\"foobar\"}), :json # =&gt; #&lt;Example:0x7fe4dc98bce0 @name=\"Fred\", @password=\"monkey\"&gt;\nASR.serializer.serialize Example.new, :json                                       # =&gt; {\"name\":\"Fred\"}\n</code></pre>"},{"location":"Serializer/Annotations/SkipWhenEmpty/","title":"SkipWhenEmpty","text":""},{"location":"Serializer/Annotations/SkipWhenEmpty/#Athena::Serializer::Annotations::SkipWhenEmpty","title":"annotation <code>Athena::Serializer::Annotations::SkipWhenEmpty</code>","text":"<p>Indicates that a property should not be serialized when it is empty.</p>"},{"location":"Serializer/Annotations/SkipWhenEmpty/#Athena::Serializer::Annotations::SkipWhenEmpty--example","title":"Example","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  property id : Int64 = 1\n\n  @[ASRA::SkipWhenEmpty]\n  property value : String = \"value\"\n\n  @[ASRA::SkipWhenEmpty]\n  property values : Array(String) = %w(one two three)\nend\n\nobj = Example.new\n\nASR.serializer.serialize obj, :json # =&gt; {\"id\":1,\"value\":\"value\",\"values\":[\"one\",\"two\",\"three\"]}\n\nobj.value = \"\"\nobj.values = [] of String\n\nASR.serializer.serialize obj, :json # =&gt; {\"id\":1}\n</code></pre> <p>!!!tip:     Can be used on any type that defines an <code>#empty?</code> method.</p>"},{"location":"Serializer/Annotations/Until/","title":"Until","text":""},{"location":"Serializer/Annotations/Until/#Athena::Serializer::Annotations::Until","title":"annotation <code>Athena::Serializer::Annotations::Until</code>","text":"<p>Represents the last version a property was available.</p> <p>See <code>ASR::ExclusionStrategies::Version</code>.</p> <p>Note</p> <p>Value must be a <code>SemanticVersion</code> version.</p>"},{"location":"Serializer/Annotations/VirtualProperty/","title":"VirtualProperty","text":""},{"location":"Serializer/Annotations/VirtualProperty/#Athena::Serializer::Annotations::VirtualProperty","title":"annotation <code>Athena::Serializer::Annotations::VirtualProperty</code>","text":"<p>Can be applied to a method to make it act like a property.</p>"},{"location":"Serializer/Annotations/VirtualProperty/#Athena::Serializer::Annotations::VirtualProperty--example","title":"Example","text":"<pre><code>class Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  property foo : String = \"foo\"\n\n  @[ASRA::VirtualProperty]\n  @[ASRA::Name(serialize: \"testing\")]\n  def some_method : Bool\n    false\n  end\n\n  @[ASRA::VirtualProperty]\n  def get_val : String\n    \"VAL\"\n  end\nend\n\nASR.serializer.serialize Example.new, :json # =&gt; {\"foo\":\"foo\",\"testing\":false,\"get_val\":\"VAL\"}\n</code></pre> <p>Warning</p> <p>The return type restriction MUST be defined.</p>"},{"location":"Serializer/Any/","title":"Any","text":""},{"location":"Serializer/Any/#Athena::Serializer::Any","title":"module <code>Athena::Serializer::Any</code>","text":"<p>Defines an abstraction that format specific types, such as <code>JSON::Any</code>, or <code>YAML::Any</code> must implement.</p>"},{"location":"Serializer/Any/#Athena::Serializer::Any-methods","title":"Methods","text":""},{"location":"Serializer/Any/#Athena::Serializer::Any#as_a","title":"abstract <code>#as_a</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_a?","title":"abstract <code>#as_a?</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_bool","title":"abstract <code>#as_bool : Bool</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_f","title":"abstract <code>#as_f : Float64</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_f32","title":"abstract <code>#as_f32 : Float32</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_f32?","title":"abstract <code>#as_f32? : Float32 | ::Nil</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_f?","title":"abstract <code>#as_f? : Float64 | ::Nil</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_i","title":"abstract <code>#as_i : Int32</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_i64","title":"abstract <code>#as_i64 : Int64</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_i64?","title":"abstract <code>#as_i64? : Int64 | ::Nil</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_i?","title":"abstract <code>#as_i? : Int32 | ::Nil</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_s","title":"abstract <code>#as_s : String</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#as_s?","title":"abstract <code>#as_s? : String | ::Nil</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#dig(index_or_key,*)","title":"abstract <code>#dig(index_or_key : String | Int, *keys)</code>","text":"View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#is_nil?","title":"abstract <code>#is_nil? : Bool</code>","text":"<p>ameba:disable Naming/PredicateName</p> View source"},{"location":"Serializer/Any/#Athena::Serializer::Any#raw","title":"abstract <code>#raw</code>","text":"View source"},{"location":"Serializer/Context/","title":"Context","text":""},{"location":"Serializer/Context/#Athena::Serializer::Context","title":"abstract class <code>Athena::Serializer::Context</code> inherits <code>Reference</code>","text":"<p>Stores runtime data about the current action.</p> <p>Such as what serialization groups/version to use when serializing.</p> <p>Warning</p> <p>Cannot be used for more than one action.</p> Direct known subclasses <code>Athena::Serializer::DeserializationContext</code> <code>Athena::Serializer::SerializationContext</code>"},{"location":"Serializer/Context/#Athena::Serializer::Context-methods","title":"Methods","text":""},{"location":"Serializer/Context/#Athena::Serializer::Context#add_exclusion_strategy(strategy)","title":"<code>#add_exclusion_strategy(strategy : ASR::ExclusionStrategies::ExclusionStrategyInterface) : self</code>","text":"<p>Adds strategy to <code>self</code>.</p> <ul> <li><code>exclusion_strategy</code> is set to strategy if there previously was no strategy.</li> <li><code>exclusion_strategy</code> is set to <code>ASR::ExclusionStrategies::Disjunct</code> if there was a <code>exclusion_strategy</code> already set.</li> <li>strategy is added to the <code>ASR::ExclusionStrategies::Disjunct</code> if there are multiple strategies.</li> </ul> View source"},{"location":"Serializer/Context/#Athena::Serializer::Context#direction","title":"abstract <code>#direction : ASR::Context::Direction</code>","text":"<p>Returns which (de)serialization action <code>self</code> represents.</p> View source"},{"location":"Serializer/Context/#Athena::Serializer::Context#exclusion_strategy","title":"<code>#exclusion_strategy : ASR::ExclusionStrategies::ExclusionStrategyInterface | ::Nil</code>","text":"<p>The <code>ASR::ExclusionStrategies::ExclusionStrategyInterface</code> being used.</p> View source"},{"location":"Serializer/Context/#Athena::Serializer::Context#groups","title":"<code>#groups : Set(String) | ::Nil</code>","text":"<p>Returns the serialization groups, if any, currently set on <code>self</code>.</p> View source"},{"location":"Serializer/Context/#Athena::Serializer::Context#groups=(groups)","title":"<code>#groups=(groups : Enumerable(String)) : self</code>","text":"<p>Sets the group(s) to compare against properties' <code>ASRA::Groups</code> annotations.</p> <p>Adds a <code>ASR::ExclusionStrategies::Groups</code> automatically if set.</p> View source"},{"location":"Serializer/Context/#Athena::Serializer::Context#version","title":"<code>#version : SemanticVersion | ::Nil</code>","text":"<p>Returns the version, if any, currently set on <code>self</code>.</p> View source"},{"location":"Serializer/Context/#Athena::Serializer::Context#version=(version)","title":"<code>#version=(version : SemanticVersion | Nil)</code>","text":"<p>Returns the version, if any, currently set on <code>self</code>.</p> View source"},{"location":"Serializer/Context/#Athena::Serializer::Context#version=(version)","title":"<code>#version=(version : String) : self</code>","text":"<p>Sets the version to compare against properties' <code>ASRA::Since</code> and <code>ASRA::Until</code> annotations.</p> <p>Adds an <code>ASR::ExclusionStrategies::Version</code> automatically if set.</p> View source"},{"location":"Serializer/Context/Direction/","title":"Direction","text":""},{"location":"Serializer/Context/Direction/#Athena::Serializer::Context::Direction","title":"enum <code>Athena::Serializer::Context::Direction</code>","text":"<p>The possible (de)serialization actions.</p>"},{"location":"Serializer/Context/Direction/#Athena::Serializer::Context::Direction-members","title":"Members","text":""},{"location":"Serializer/Context/Direction/#Athena::Serializer::Context::Direction::Deserialization","title":"<code>Deserialization = 0</code>","text":""},{"location":"Serializer/Context/Direction/#Athena::Serializer::Context::Direction::Serialization","title":"<code>Serialization = 1</code>","text":""},{"location":"Serializer/Context/Direction/#Athena::Serializer::Context::Direction-methods","title":"Methods","text":""},{"location":"Serializer/Context/Direction/#Athena::Serializer::Context::Direction#deserialization?","title":"<code>#deserialization?</code>","text":"View source"},{"location":"Serializer/Context/Direction/#Athena::Serializer::Context::Direction#serialization?","title":"<code>#serialization?</code>","text":"View source"},{"location":"Serializer/DeserializationContext/","title":"DeserializationContext","text":""},{"location":"Serializer/DeserializationContext/#Athena::Serializer::DeserializationContext","title":"class <code>Athena::Serializer::DeserializationContext</code> inherits <code>Athena::Serializer::Context</code>","text":"<p>The <code>ASR::Context</code> specific to deserialization.</p>"},{"location":"Serializer/DeserializationContext/#Athena::Serializer::DeserializationContext-methods","title":"Methods","text":""},{"location":"Serializer/DeserializationContext/#Athena::Serializer::DeserializationContext#direction","title":"<code>#direction : ASR::Context::Direction</code>","text":"<p>Returns which (de)serialization action <code>self</code> represents.</p> View source"},{"location":"Serializer/Exceptions/","title":"Exceptions","text":""},{"location":"Serializer/Exceptions/#Athena::Serializer::Exceptions","title":"module <code>Athena::Serializer::Exceptions</code>","text":""},{"location":"Serializer/Exceptions/DeserializationException/","title":"DeserializationException","text":""},{"location":"Serializer/Exceptions/DeserializationException/#Athena::Serializer::Exceptions::DeserializationException","title":"class <code>Athena::Serializer::Exceptions::DeserializationException</code> inherits <code>Athena::Serializer::Exceptions::SerializerException</code>","text":"<p>Represents an error that occurred during deserialization.</p> Direct known subclasses <code>Athena::Serializer::Exceptions::PropertyException</code>"},{"location":"Serializer/Exceptions/MissingRequiredProperty/","title":"MissingRequiredProperty","text":""},{"location":"Serializer/Exceptions/MissingRequiredProperty/#Athena::Serializer::Exceptions::MissingRequiredProperty","title":"class <code>Athena::Serializer::Exceptions::MissingRequiredProperty</code> inherits <code>Athena::Serializer::Exceptions::PropertyException</code>","text":"<p>Represents an error due to a missing required property that was not included in the input data.</p> <p>Exposes the missing property's name and type.</p>"},{"location":"Serializer/Exceptions/MissingRequiredProperty/#Athena::Serializer::Exceptions::MissingRequiredProperty-constructors","title":"Constructors","text":""},{"location":"Serializer/Exceptions/MissingRequiredProperty/#Athena::Serializer::Exceptions::MissingRequiredProperty.new(property_name,property_type)","title":"<code>.new(property_name : String, property_type : String)</code>","text":"View source"},{"location":"Serializer/Exceptions/MissingRequiredProperty/#Athena::Serializer::Exceptions::MissingRequiredProperty-methods","title":"Methods","text":""},{"location":"Serializer/Exceptions/MissingRequiredProperty/#Athena::Serializer::Exceptions::MissingRequiredProperty#property_type","title":"<code>#property_type : String</code>","text":"View source"},{"location":"Serializer/Exceptions/NilRequiredProperty/","title":"NilRequiredProperty","text":""},{"location":"Serializer/Exceptions/NilRequiredProperty/#Athena::Serializer::Exceptions::NilRequiredProperty","title":"class <code>Athena::Serializer::Exceptions::NilRequiredProperty</code> inherits <code>Athena::Serializer::Exceptions::PropertyException</code>","text":"<p>Represents an error due to a required property that was <code>nil</code>.</p> <p>Exposes the property's name and type.</p>"},{"location":"Serializer/Exceptions/NilRequiredProperty/#Athena::Serializer::Exceptions::NilRequiredProperty-constructors","title":"Constructors","text":""},{"location":"Serializer/Exceptions/NilRequiredProperty/#Athena::Serializer::Exceptions::NilRequiredProperty.new(property_name,property_type)","title":"<code>.new(property_name : String, property_type : String)</code>","text":"View source"},{"location":"Serializer/Exceptions/NilRequiredProperty/#Athena::Serializer::Exceptions::NilRequiredProperty-methods","title":"Methods","text":""},{"location":"Serializer/Exceptions/NilRequiredProperty/#Athena::Serializer::Exceptions::NilRequiredProperty#property_type","title":"<code>#property_type : String</code>","text":"View source"},{"location":"Serializer/Exceptions/PropertyException/","title":"PropertyException","text":""},{"location":"Serializer/Exceptions/PropertyException/#Athena::Serializer::Exceptions::PropertyException","title":"class <code>Athena::Serializer::Exceptions::PropertyException</code> inherits <code>Athena::Serializer::Exceptions::DeserializationException</code>","text":"<p>Represents an error due to an invalid property.</p> <p>Exposes the property's name.</p> Direct known subclasses <code>Athena::Serializer::Exceptions::MissingRequiredProperty</code> <code>Athena::Serializer::Exceptions::NilRequiredProperty</code>"},{"location":"Serializer/Exceptions/PropertyException/#Athena::Serializer::Exceptions::PropertyException-constructors","title":"Constructors","text":""},{"location":"Serializer/Exceptions/PropertyException/#Athena::Serializer::Exceptions::PropertyException.new(message,property_name)","title":"<code>.new(message : String, property_name : String)</code>","text":"View source"},{"location":"Serializer/Exceptions/PropertyException/#Athena::Serializer::Exceptions::PropertyException-methods","title":"Methods","text":""},{"location":"Serializer/Exceptions/PropertyException/#Athena::Serializer::Exceptions::PropertyException#property_name","title":"<code>#property_name : String</code>","text":"View source"},{"location":"Serializer/Exceptions/SerializationException/","title":"SerializationException","text":""},{"location":"Serializer/Exceptions/SerializationException/#Athena::Serializer::Exceptions::SerializationException","title":"class <code>Athena::Serializer::Exceptions::SerializationException</code> inherits <code>Athena::Serializer::Exceptions::SerializerException</code>","text":"<p>Represents an error that occurred during serialization.</p>"},{"location":"Serializer/Exceptions/SerializerException/","title":"SerializerException","text":""},{"location":"Serializer/Exceptions/SerializerException/#Athena::Serializer::Exceptions::SerializerException","title":"class <code>Athena::Serializer::Exceptions::SerializerException</code> inherits <code>Exception</code>","text":"<p>Base Exception of the <code>Athena::Serializer</code> component. Can be used to rescue all serializer related exceptions.</p> Direct known subclasses <code>Athena::Serializer::Exceptions::DeserializationException</code> <code>Athena::Serializer::Exceptions::SerializationException</code>"},{"location":"Serializer/ExclusionStrategies/","title":"ExclusionStrategies","text":""},{"location":"Serializer/ExclusionStrategies/#Athena::Serializer::ExclusionStrategies","title":"module <code>Athena::Serializer::ExclusionStrategies</code>","text":"<p>Exclusion Strategies allow controlling which properties should be (de)serialized.</p> <p><code>Athena::Serializer</code> includes two common strategies: <code>ASR::ExclusionStrategies::Groups</code>, and <code>ASR::ExclusionStrategies::Version</code>.</p> <p>Custom strategies can be implemented by via <code>ExclusionStrategies::ExclusionStrategyInterface</code>.</p> <p>Todo</p> <p>Once feasible, support compile time exclusion strategies.</p>"},{"location":"Serializer/ExclusionStrategies/Disjunct/","title":"Disjunct","text":""},{"location":"Serializer/ExclusionStrategies/Disjunct/#Athena::Serializer::ExclusionStrategies::Disjunct","title":"struct <code>Athena::Serializer::ExclusionStrategies::Disjunct</code> inherits <code>Struct</code>","text":"<p>Wraps an <code>Array(ASR::ExclusionStrategies::ExclusionStrategyInterface)</code>, excluding a property if any member skips it.</p> <p>Used internally to allow multiple exclusion strategies to be used within a single instance variable for <code>ASR::Context#add_exclusion_strategy</code>.</p> Included modules <code>Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface</code>"},{"location":"Serializer/ExclusionStrategies/Disjunct/#Athena::Serializer::ExclusionStrategies::Disjunct-constructors","title":"Constructors","text":""},{"location":"Serializer/ExclusionStrategies/Disjunct/#Athena::Serializer::ExclusionStrategies::Disjunct.new(members)","title":"<code>.new(members : Array(ASR::ExclusionStrategies::ExclusionStrategyInterface))</code>","text":"View source"},{"location":"Serializer/ExclusionStrategies/Disjunct/#Athena::Serializer::ExclusionStrategies::Disjunct-methods","title":"Methods","text":""},{"location":"Serializer/ExclusionStrategies/Disjunct/#Athena::Serializer::ExclusionStrategies::Disjunct#members","title":"<code>#members : Array(ASR::ExclusionStrategies::ExclusionStrategyInterface)</code>","text":"<p>The wrapped exclusion strategies.</p> View source"},{"location":"Serializer/ExclusionStrategies/Disjunct/#Athena::Serializer::ExclusionStrategies::Disjunct#skip_property?(metadata,context)","title":"<code>#skip_property?(metadata : ASR::PropertyMetadataBase, context : ASR::Context) : Bool</code>","text":"<p>Returns <code>true</code> if a property should NOT be (de)serialized.</p> View source"},{"location":"Serializer/ExclusionStrategies/ExclusionStrategyInterface/","title":"ExclusionStrategyInterface","text":""},{"location":"Serializer/ExclusionStrategies/ExclusionStrategyInterface/#Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface","title":"module <code>Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface</code>","text":"<p>Represents a specific exclusion strategy.</p> <p>Custom logic can be implemented by defining a type with this interface. It can then be used via <code>ASR::Context#add_exclusion_strategy</code>.</p>"},{"location":"Serializer/ExclusionStrategies/ExclusionStrategyInterface/#Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface--example","title":"Example","text":"<pre><code>struct OddNumberExclusionStrategy\n  include Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface\n\n  # :inherit:\n  #\n  # Skips serializing odd numbered values\n  def skip_property?(metadata : ASR::PropertyMetadataBase, context : ASR::Context) : Bool\n    # Don't skip if the value is nil\n    return false unless value = (metadata.value)\n\n    # Only skip on serialization, if the value is an number, and if it's odd.\n    context.is_a?(ASR::SerializationContext) &amp;&amp; value.is_a?(Number) &amp;&amp; value.odd?\n  end\nend\n\nserialization_context = ASR::SerializationContext.new\nserialization_context.add_exclusion_strategy OddNumberExclusionStrategy.new\n\ndeserialization_context = ASR::DeserializationContext.new\ndeserialization_context.add_exclusion_strategy OddNumberExclusionStrategy.new\n\nrecord Values, one : Int32 = 1, two : Int32 = 2, three : Int32 = 3 do\n  include ASR::Serializable\nend\n\nASR.serializer.serialize Values.new, :json, serialization_context                                 # =&gt; {\"two\":2}\nASR.serializer.deserialize Values, %({\"one\":4,\"two\":5,\"three\":6}), :json, deserialization_context # =&gt; Values(@one=4, @three=6, @two=5)\n</code></pre>"},{"location":"Serializer/ExclusionStrategies/ExclusionStrategyInterface/#Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface--annotation-configurations","title":"Annotation Configurations","text":"<p>Custom annotations can be defined using <code>Athena::Config.configuration_annotation</code>. These annotations will be exposed at runtime as part of the properties' metadata within exclusion strategies via <code>ASR::PropertyMetadata#annotation_configurations</code>. The main purpose of this is to allow for more advanced annotation based exclusion strategies.</p> <pre><code># Define an annotation called `IsActiveProperty` that accepts an optional `active` field.\nACF.configuration_annotation IsActiveProperty, active : Bool = true\n\n# Define an exclusion strategy that should skip \"inactive\" properties.\nstruct ActivePropertyExclusionStrategy\n  include Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface\n\n  # :inherit:\n  def skip_property?(metadata : ASR::PropertyMetadataBase, context : ASR::Context) : Bool\n    # Don't skip on deserialization.\n    return false if context.direction.deserialization?\n\n    ann_configs = metadata.annotation_configurations\n\n    # Skip if the property has the annotation and it's \"inactive\".\n    ann_configs.has?(IsActiveProperty) &amp;&amp; !ann_configs[IsActiveProperty].active\n  end\nend\n\nrecord Example, id : Int32, first_name : String, last_name : String, zip_code : Int32 do\n  include ASR::Serializable\n\n  @[IsActiveProperty]\n  @first_name : String\n\n  @[IsActiveProperty(active: false)]\n  @last_name : String\n\n  # Can also be defined as a positional argument.\n  @[IsActiveProperty(false)]\n  @zip_code : Int32\nend\n\nserialization_context = ASR::SerializationContext.new\nserialization_context.add_exclusion_strategy ActivePropertyExclusionStrategy.new\n\nASR.serializer.serialize Example.new(1, \"Jon\", \"Snow\", 90210), :json, serialization_context # =&gt; {\"id\":1,\"first_name\":\"Jon\"}\n</code></pre> Direct including types <code>Athena::Serializer::ExclusionStrategies::Disjunct</code> <code>Athena::Serializer::ExclusionStrategies::Groups</code> <code>Athena::Serializer::ExclusionStrategies::Version</code>"},{"location":"Serializer/ExclusionStrategies/ExclusionStrategyInterface/#Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface-methods","title":"Methods","text":""},{"location":"Serializer/ExclusionStrategies/ExclusionStrategyInterface/#Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface#skip_property?(metadata,context)","title":"abstract <code>#skip_property?(metadata : ASR::PropertyMetadataBase, context : ASR::Context) : Bool</code>","text":"<p>Returns <code>true</code> if a property should NOT be (de)serialized.</p> View source"},{"location":"Serializer/ExclusionStrategies/Groups/","title":"Groups","text":""},{"location":"Serializer/ExclusionStrategies/Groups/#Athena::Serializer::ExclusionStrategies::Groups","title":"struct <code>Athena::Serializer::ExclusionStrategies::Groups</code> inherits <code>Struct</code>","text":"<p>Allows creating different views of your objects by limiting which properties get serialized, based on the group(s) each property is a part of.</p> <p>It is enabled by default when using <code>ASR::Context#groups=</code>.</p> <pre><code>class Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  @[ASRA::Groups(\"list\", \"details\")]\n  property id : Int64 = 1\n\n  @[ASRA::Groups(\"list\", \"details\")]\n  property title : String = \"TITLE\"\n\n  @[ASRA::Groups(\"list\")]\n  property comment_summaries : Array(String) = [\"Sentence 1.\", \"Sentence 2.\"]\n\n  @[ASRA::Groups(\"details\")]\n  property comments : Array(String) = [\"Sentence 1.  Another sentence.\", \"Sentence 2.  Some other stuff.\"]\n\n  # Properties not explicitly given a group are added to the `\"default\"` group.\n  property created_at : Time = Time.utc(2019, 1, 1)\n  property updated_at : Time?\nend\n\nobj = Example.new\n\nASR.serializer.serialize obj, :json, ASR::SerializationContext.new.groups = [\"list\"]            # =&gt; {\"id\":1,\"title\":\"TITLE\",\"comment_summaries\":[\"Sentence 1.\",\"Sentence 2.\"]}\nASR.serializer.serialize obj, :json, ASR::SerializationContext.new.groups = [\"details\"]         # =&gt; {\"id\":1,\"title\":\"TITLE\",\"comments\":[\"Sentence 1.  Another sentence.\",\"Sentence 2.  Some other stuff.\"]}\nASR.serializer.serialize obj, :json, ASR::SerializationContext.new.groups = [\"list\", \"default\"] # =&gt; {\"id\":1,\"title\":\"TITLE\",\"comment_summaries\":[\"Sentence 1.\",\"Sentence 2.\"],\"created_at\":\"2019-01-01T00:00:00Z\"}\n</code></pre> Included modules <code>Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface</code>"},{"location":"Serializer/ExclusionStrategies/Groups/#Athena::Serializer::ExclusionStrategies::Groups-constructors","title":"Constructors","text":""},{"location":"Serializer/ExclusionStrategies/Groups/#Athena::Serializer::ExclusionStrategies::Groups.new(groups)","title":"<code>.new(groups : Enumerable(String))</code>","text":"View source"},{"location":"Serializer/ExclusionStrategies/Groups/#Athena::Serializer::ExclusionStrategies::Groups.new(*)","title":"<code>.new(*groups : String)</code>","text":"View source"},{"location":"Serializer/ExclusionStrategies/Groups/#Athena::Serializer::ExclusionStrategies::Groups-methods","title":"Methods","text":""},{"location":"Serializer/ExclusionStrategies/Groups/#Athena::Serializer::ExclusionStrategies::Groups#skip_property?(metadata,context)","title":"<code>#skip_property?(metadata : ASR::PropertyMetadataBase, context : ASR::Context) : Bool</code>","text":"<p>Returns <code>true</code> if a property should NOT be (de)serialized.</p> View source"},{"location":"Serializer/ExclusionStrategies/Version/","title":"Version","text":""},{"location":"Serializer/ExclusionStrategies/Version/#Athena::Serializer::ExclusionStrategies::Version","title":"struct <code>Athena::Serializer::ExclusionStrategies::Version</code> inherits <code>Struct</code>","text":"<p>Serialize properties based on a <code>SemanticVersion</code> string.</p> <p>It is enabled by default when using <code>ASR::Context#version=</code>.</p> <pre><code>class Example\n  include ASR::Serializable\n\n  def initialize; end\n\n  @[ASRA::Until(\"1.0.0\")]\n  property name : String = \"Legacy Name\"\n\n  @[ASRA::Since(\"1.1.0\")]\n  property name2 : String = \"New Name\"\nend\n\nobj = Example.new\n\nASR.serializer.serialize obj, :json, ASR::SerializationContext.new.version = \"0.30.0\" # =&gt; {\"name\":\"Legacy Name\"}\nASR.serializer.serialize obj, :json, ASR::SerializationContext.new.version = \"1.2.0\"  # =&gt; {\"name2\":\"New Name\"}\n</code></pre> Included modules <code>Athena::Serializer::ExclusionStrategies::ExclusionStrategyInterface</code>"},{"location":"Serializer/ExclusionStrategies/Version/#Athena::Serializer::ExclusionStrategies::Version-constructors","title":"Constructors","text":""},{"location":"Serializer/ExclusionStrategies/Version/#Athena::Serializer::ExclusionStrategies::Version.new(version)","title":"<code>.new(version : SemanticVersion)</code>","text":"View source"},{"location":"Serializer/ExclusionStrategies/Version/#Athena::Serializer::ExclusionStrategies::Version-methods","title":"Methods","text":""},{"location":"Serializer/ExclusionStrategies/Version/#Athena::Serializer::ExclusionStrategies::Version#skip_property?(metadata,context)","title":"<code>#skip_property?(metadata : ASR::PropertyMetadataBase, context : ASR::Context) : Bool</code>","text":"<p>Returns <code>true</code> if a property should NOT be (de)serialized.</p> View source"},{"location":"Serializer/ExclusionStrategies/Version/#Athena::Serializer::ExclusionStrategies::Version#version","title":"<code>#version : SemanticVersion</code>","text":"View source"},{"location":"Serializer/Format/","title":"Format","text":""},{"location":"Serializer/Format/#Athena::Serializer::Format","title":"enum <code>Athena::Serializer::Format</code>","text":"<p>The built-in supported formats.</p>"},{"location":"Serializer/Format/#Athena::Serializer::Format-members","title":"Members","text":""},{"location":"Serializer/Format/#Athena::Serializer::Format::JSON","title":"<code>JSON = 0</code>","text":""},{"location":"Serializer/Format/#Athena::Serializer::Format::YAML","title":"<code>YAML = 1</code>","text":""},{"location":"Serializer/Format/#Athena::Serializer::Format-methods","title":"Methods","text":""},{"location":"Serializer/Format/#Athena::Serializer::Format#deserialization_visitor","title":"<code>#deserialization_visitor</code>","text":"<p>Returns the <code>ASR::Visitors::DeserializationVisitorInterface</code> related to <code>self</code>.</p> View source"},{"location":"Serializer/Format/#Athena::Serializer::Format#json?","title":"<code>#json?</code>","text":"View source"},{"location":"Serializer/Format/#Athena::Serializer::Format#serialization_visitor","title":"<code>#serialization_visitor</code>","text":"<p>Returns the <code>ASR::Visitors::SerializationVisitorInterface</code> related to <code>self</code>.</p> View source"},{"location":"Serializer/Format/#Athena::Serializer::Format#yaml?","title":"<code>#yaml?</code>","text":"View source"},{"location":"Serializer/InstantiateObjectConstructor/","title":"InstantiateObjectConstructor","text":""},{"location":"Serializer/InstantiateObjectConstructor/#Athena::Serializer::InstantiateObjectConstructor","title":"struct <code>Athena::Serializer::InstantiateObjectConstructor</code> inherits <code>Struct</code>","text":"<p>Default <code>ASR::ObjectConstructorInterface</code> implementation.</p> <p>Directly instantiates the object via a custom initializer added by <code>ASR::Serializable</code>.</p> Included modules <code>Athena::Serializer::ObjectConstructorInterface</code>"},{"location":"Serializer/InstantiateObjectConstructor/#Athena::Serializer::InstantiateObjectConstructor-constructors","title":"Constructors","text":""},{"location":"Serializer/InstantiateObjectConstructor/#Athena::Serializer::InstantiateObjectConstructor.new","title":"<code>.new</code>","text":"View source"},{"location":"Serializer/InstantiateObjectConstructor/#Athena::Serializer::InstantiateObjectConstructor-methods","title":"Methods","text":""},{"location":"Serializer/InstantiateObjectConstructor/#Athena::Serializer::InstantiateObjectConstructor#construct(navigator,properties,data,type)","title":"<code>#construct(navigator : ASR::Navigators::DeserializationNavigatorInterface, properties : Array(PropertyMetadataBase), data : ASR::Any, type)</code>","text":"<p>Creates an instance of type and applies the provided properties onto it, with the provided data.</p> View source"},{"location":"Serializer/InstantiateObjectConstructor/#Athena::Serializer::InstantiateObjectConstructor#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Serializer/Model/","title":"Model","text":""},{"location":"Serializer/Model/#Athena::Serializer::Model","title":"module <code>Athena::Serializer::Model</code>","text":"<p>Used to denote a type that is (de)serializable.</p> <p>This module can be used to make the compiler happy in some situations, it doesn't do anything on its own. You most likely want to use <code>ASR::Serializable</code> instead.</p> <pre><code>require \"athena-serializer\"\n\nabstract struct BaseModel\n  # `ASR::Model` is needed here to ensure typings are correct for the deserialization process.\n  # Child types should still include `ASR::Serializable`.\n  include ASR::Model\nend\n\nrecord ModelOne &lt; BaseModel, id : Int32, name : String do\n  include ASR::Serializable\nend\n\nrecord ModelTwo &lt; BaseModel, id : Int32, name : String do\n  include ASR::Serializable\nend\n\nrecord Unionable, type : BaseModel.class\n</code></pre>"},{"location":"Serializer/Navigators/","title":"Navigators","text":""},{"location":"Serializer/Navigators/#Athena::Serializer::Navigators","title":"module <code>Athena::Serializer::Navigators</code>","text":""},{"location":"Serializer/Navigators/DeserializationNavigator/","title":"DeserializationNavigator","text":""},{"location":"Serializer/Navigators/DeserializationNavigator/#Athena::Serializer::Navigators::DeserializationNavigator","title":"struct <code>Athena::Serializer::Navigators::DeserializationNavigator</code> inherits <code>Struct</code>","text":"Included modules <code>Athena::Serializer::Navigators::DeserializationNavigatorInterface</code>"},{"location":"Serializer/Navigators/DeserializationNavigator/#Athena::Serializer::Navigators::DeserializationNavigator-constructors","title":"Constructors","text":""},{"location":"Serializer/Navigators/DeserializationNavigator/#Athena::Serializer::Navigators::DeserializationNavigator.new(visitor,context,object_constructor)","title":"<code>.new(visitor : ASR::Visitors::DeserializationVisitorInterface, context : ASR::DeserializationContext, object_constructor : ASR::ObjectConstructorInterface)</code>","text":"View source"},{"location":"Serializer/Navigators/DeserializationNavigator/#Athena::Serializer::Navigators::DeserializationNavigator-methods","title":"Methods","text":""},{"location":"Serializer/Navigators/DeserializationNavigator/#Athena::Serializer::Navigators::DeserializationNavigator#accept(type,data)","title":"<code>#accept(type : T.class, data : ASR::Any) forall T</code>","text":"View source"},{"location":"Serializer/Navigators/DeserializationNavigatorInterface/","title":"DeserializationNavigatorInterface","text":""},{"location":"Serializer/Navigators/DeserializationNavigatorInterface/#Athena::Serializer::Navigators::DeserializationNavigatorInterface","title":"module <code>Athena::Serializer::Navigators::DeserializationNavigatorInterface</code>","text":"Direct including types <code>Athena::Serializer::Navigators::DeserializationNavigator</code>"},{"location":"Serializer/Navigators/DeserializationNavigatorInterface/#Athena::Serializer::Navigators::DeserializationNavigatorInterface-methods","title":"Methods","text":""},{"location":"Serializer/Navigators/DeserializationNavigatorInterface/#Athena::Serializer::Navigators::DeserializationNavigatorInterface#accept(type,data)","title":"abstract <code>#accept(type : T.class, data : ASR::Any) forall T</code>","text":"View source"},{"location":"Serializer/Navigators/NavigatorFactory/","title":"NavigatorFactory","text":""},{"location":"Serializer/Navigators/NavigatorFactory/#Athena::Serializer::Navigators::NavigatorFactory","title":"struct <code>Athena::Serializer::Navigators::NavigatorFactory</code> inherits <code>Struct</code>","text":"Included modules <code>Athena::Serializer::Navigators::NavigatorFactoryInterface</code>"},{"location":"Serializer/Navigators/NavigatorFactory/#Athena::Serializer::Navigators::NavigatorFactory-constructors","title":"Constructors","text":""},{"location":"Serializer/Navigators/NavigatorFactory/#Athena::Serializer::Navigators::NavigatorFactory.new(object_constructor)","title":"<code>.new(object_constructor : ASR::ObjectConstructorInterface = ASR::InstantiateObjectConstructor.new)</code>","text":"View source"},{"location":"Serializer/Navigators/NavigatorFactory/#Athena::Serializer::Navigators::NavigatorFactory-methods","title":"Methods","text":""},{"location":"Serializer/Navigators/NavigatorFactory/#Athena::Serializer::Navigators::NavigatorFactory#get_deserialization_navigator(visitor,context)","title":"<code>#get_deserialization_navigator(visitor : ASR::Visitors::DeserializationVisitorInterface, context : ASR::DeserializationContext) : ASR::Navigators::DeserializationNavigatorInterface</code>","text":"View source"},{"location":"Serializer/Navigators/NavigatorFactory/#Athena::Serializer::Navigators::NavigatorFactory#get_serialization_navigator(visitor,context)","title":"<code>#get_serialization_navigator(visitor : ASR::Visitors::SerializationVisitorInterface, context : ASR::SerializationContext) : ASR::Navigators::SerializationNavigatorInterface</code>","text":"View source"},{"location":"Serializer/Navigators/NavigatorFactoryInterface/","title":"NavigatorFactoryInterface","text":""},{"location":"Serializer/Navigators/NavigatorFactoryInterface/#Athena::Serializer::Navigators::NavigatorFactoryInterface","title":"module <code>Athena::Serializer::Navigators::NavigatorFactoryInterface</code>","text":"Direct including types <code>Athena::Serializer::Navigators::NavigatorFactory</code>"},{"location":"Serializer/Navigators/NavigatorFactoryInterface/#Athena::Serializer::Navigators::NavigatorFactoryInterface-methods","title":"Methods","text":""},{"location":"Serializer/Navigators/NavigatorFactoryInterface/#Athena::Serializer::Navigators::NavigatorFactoryInterface#get_deserialization_navigator(visitor,context)","title":"abstract <code>#get_deserialization_navigator(visitor : ASR::Visitors::DeserializationVisitorInterface, context : ASR::DeserializationContext) : ASR::Navigators::DeserializationNavigatorInterface</code>","text":"View source"},{"location":"Serializer/Navigators/NavigatorFactoryInterface/#Athena::Serializer::Navigators::NavigatorFactoryInterface#get_serialization_navigator(visitor,context)","title":"abstract <code>#get_serialization_navigator(visitor : ASR::Visitors::SerializationVisitorInterface, context : ASR::SerializationContext) : ASR::Navigators::SerializationNavigatorInterface</code>","text":"View source"},{"location":"Serializer/Navigators/SerializationNavigator/","title":"SerializationNavigator","text":""},{"location":"Serializer/Navigators/SerializationNavigator/#Athena::Serializer::Navigators::SerializationNavigator","title":"struct <code>Athena::Serializer::Navigators::SerializationNavigator</code> inherits <code>Struct</code>","text":"Included modules <code>Athena::Serializer::Navigators::SerializationNavigatorInterface</code>"},{"location":"Serializer/Navigators/SerializationNavigator/#Athena::Serializer::Navigators::SerializationNavigator-constructors","title":"Constructors","text":""},{"location":"Serializer/Navigators/SerializationNavigator/#Athena::Serializer::Navigators::SerializationNavigator.new(visitor,context)","title":"<code>.new(visitor : ASR::Visitors::SerializationVisitorInterface, context : ASR::SerializationContext)</code>","text":"View source"},{"location":"Serializer/Navigators/SerializationNavigator/#Athena::Serializer::Navigators::SerializationNavigator-methods","title":"Methods","text":""},{"location":"Serializer/Navigators/SerializationNavigator/#Athena::Serializer::Navigators::SerializationNavigator#accept(data)","title":"<code>#accept(data : ASR::Model) : Nil</code>","text":"View source"},{"location":"Serializer/Navigators/SerializationNavigator/#Athena::Serializer::Navigators::SerializationNavigator#accept(data)","title":"<code>#accept(data : _) : Nil</code>","text":"View source"},{"location":"Serializer/Navigators/SerializationNavigatorInterface/","title":"SerializationNavigatorInterface","text":""},{"location":"Serializer/Navigators/SerializationNavigatorInterface/#Athena::Serializer::Navigators::SerializationNavigatorInterface","title":"module <code>Athena::Serializer::Navigators::SerializationNavigatorInterface</code>","text":"Direct including types <code>Athena::Serializer::Navigators::SerializationNavigator</code>"},{"location":"Serializer/Navigators/SerializationNavigatorInterface/#Athena::Serializer::Navigators::SerializationNavigatorInterface-methods","title":"Methods","text":""},{"location":"Serializer/Navigators/SerializationNavigatorInterface/#Athena::Serializer::Navigators::SerializationNavigatorInterface#accept(data)","title":"abstract <code>#accept(data : ASR::Model) : Nil</code>","text":"View source"},{"location":"Serializer/Navigators/SerializationNavigatorInterface/#Athena::Serializer::Navigators::SerializationNavigatorInterface#accept(data)","title":"abstract <code>#accept(data : _) : Nil</code>","text":"View source"},{"location":"Serializer/ObjectConstructorInterface/","title":"ObjectConstructorInterface","text":""},{"location":"Serializer/ObjectConstructorInterface/#Athena::Serializer::ObjectConstructorInterface","title":"module <code>Athena::Serializer::ObjectConstructorInterface</code>","text":"<p>Determines how a new object is constructed during deserialization.</p> <p>By default it is directly instantiated via <code>.new</code> as part of <code>ASR::InstantiateObjectConstructor</code>.</p> <p>However custom constructors can be defined.  A use case could be retrieving the object from the database as part of a <code>PUT</code> request in order to apply the deserialized data onto it.  This would allow it to retain the PK, any timestamps, or <code>ASRA::ReadOnly</code> values.</p> Direct including types <code>Athena::Serializer::InstantiateObjectConstructor</code>"},{"location":"Serializer/ObjectConstructorInterface/#Athena::Serializer::ObjectConstructorInterface-methods","title":"Methods","text":""},{"location":"Serializer/ObjectConstructorInterface/#Athena::Serializer::ObjectConstructorInterface#construct(navigator,properties,data,type)","title":"abstract <code>#construct(navigator : ASR::Navigators::DeserializationNavigatorInterface, properties : Array(PropertyMetadataBase), data : ASR::Any, type)</code>","text":"<p>Creates an instance of type and applies the provided properties onto it, with the provided data.</p> View source"},{"location":"Serializer/PropertyMetadata/","title":"PropertyMetadata","text":""},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata","title":"struct <code>Athena::Serializer::PropertyMetadata(IvarType, ValueType, ClassType)</code> inherits <code>Struct</code>","text":"<p>Stores metadata related to a specific property.</p> <p>This includes its name (internal and external), value, versions/groups, and any aliases.</p> Included modules <code>Athena::Serializer::PropertyMetadataBase</code>"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata-constructors","title":"Constructors","text":""},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata.new(name,external_name,annotation_configurations,value,skip_when_empty,groups,aliases,since_version,until_version,type,class)","title":"<code>.new(name : String, external_name : String, annotation_configurations : ACF::AnnotationConfigurations, value : ValueType = nil, skip_when_empty : Bool = false, groups : Enumerable(String) = [\"default\"], aliases : Array(String) = [] of String, since_version : SemanticVersion | Nil = nil, until_version : SemanticVersion | Nil = nil, type : IvarType.class = IvarType, class __arg0 : ClassType.class = ClassType)</code>","text":"View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata-methods","title":"Methods","text":""},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#aliases","title":"<code>#aliases : Array(String)</code>","text":"<p>Deserialize this property from the property's name or any name in aliases.</p> <p>See <code>ASRA::Name</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#annotation_configurations","title":"<code>#annotation_configurations : ACF::AnnotationConfigurations</code>","text":"<p>Returns annotations configurations registered via <code>Athena::Config.configuration_annotation</code> and applied to this property.</p> <p>These configurations could then be accessed within an <code>ASR::ExclusionStrategies::ExclusionStrategyInterface</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#class","title":"<code>#class : ClassType.class</code>","text":"<p>The class that the property is part of.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#external_name","title":"<code>#external_name : String</code>","text":"<p>The name that should be used for serialization/deserialization.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#groups","title":"<code>#groups : Set(String)</code>","text":"<p>The serialization groups this property belongs to.</p> <p>See <code>ASR::ExclusionStrategies::Groups</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#name","title":"<code>#name : String</code>","text":"<p>The name of the property.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#since_version","title":"<code>#since_version : SemanticVersion | ::Nil</code>","text":"<p>Represents the first version this property is available.</p> <p>See <code>ASR::ExclusionStrategies::Version</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#since_version=(since_version)","title":"<code>#since_version=(since_version : SemanticVersion | Nil)</code>","text":"<p>Represents the first version this property is available.</p> <p>See <code>ASR::ExclusionStrategies::Version</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#skip_when_empty?","title":"<code>#skip_when_empty? : Bool</code>","text":"<p>If this property should not be serialized if it is empty.</p> <p>See <code>ASRA::SkipWhenEmpty</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#type","title":"<code>#type : IvarType.class</code>","text":"<p>The type of the property.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#until_version","title":"<code>#until_version : SemanticVersion | ::Nil</code>","text":"<p>Represents the last version this property was available.</p> <p>See <code>ASR::ExclusionStrategies::Version</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#until_version=(until_version)","title":"<code>#until_version=(until_version : SemanticVersion | Nil)</code>","text":"<p>Represents the last version this property was available.</p> <p>See <code>ASR::ExclusionStrategies::Version</code>.</p> View source"},{"location":"Serializer/PropertyMetadata/#Athena::Serializer::PropertyMetadata#value","title":"<code>#value : ValueType</code>","text":"<p>The value of the property (when serializing).</p> View source"},{"location":"Serializer/PropertyMetadataBase/","title":"PropertyMetadataBase","text":""},{"location":"Serializer/PropertyMetadataBase/#Athena::Serializer::PropertyMetadataBase","title":"module <code>Athena::Serializer::PropertyMetadataBase</code>","text":"<p>Parent type of a property metadata just used for typing.</p> <p>See <code>ASR::PropertyMetadata</code>.</p> Direct including types <code>Athena::Serializer::PropertyMetadata(IvarType, ValueType, ClassType)</code>"},{"location":"Serializer/Serializable/","title":"Serializable","text":""},{"location":"Serializer/Serializable/#Athena::Serializer::Serializable","title":"module <code>Athena::Serializer::Serializable</code>","text":"<p>Adds the necessary methods to a <code>struct</code>/<code>class</code> to allow for (de)serialization of that type.</p> <pre><code>require \"athena-serializer\"\n\nrecord Example, id : Int32, name : String do\n  include ASR::Serializable\nend\n\nobj = ASR.serializer.deserialize Example, %({\"id\":1,\"name\":\"George\"}), :json\nobj                                 # =&gt; Example(@id=1, @name=\"George\")\nASR.serializer.serialize obj, :yaml # =&gt;\n# ---\n# id: 1\n# name: George\n</code></pre>"},{"location":"Serializer/SerializationContext/","title":"SerializationContext","text":""},{"location":"Serializer/SerializationContext/#Athena::Serializer::SerializationContext","title":"class <code>Athena::Serializer::SerializationContext</code> inherits <code>Athena::Serializer::Context</code>","text":"<p>The <code>ASR::Context</code> specific to serialization.</p> <p>Allows specifying if <code>nil</code> values should be serialized.</p>"},{"location":"Serializer/SerializationContext/#Athena::Serializer::SerializationContext-methods","title":"Methods","text":""},{"location":"Serializer/SerializationContext/#Athena::Serializer::SerializationContext#direction","title":"<code>#direction : ASR::Context::Direction</code>","text":"<p>Returns which (de)serialization action <code>self</code> represents.</p> View source"},{"location":"Serializer/SerializationContext/#Athena::Serializer::SerializationContext#emit_nil=(emit_nil)","title":"<code>#emit_nil=(emit_nil : Bool)</code>","text":"<p>If <code>nil</code> values should be serialized.</p> View source"},{"location":"Serializer/SerializationContext/#Athena::Serializer::SerializationContext#emit_nil?","title":"<code>#emit_nil? : Bool</code>","text":"<p>If <code>nil</code> values should be serialized.</p> View source"},{"location":"Serializer/Serializer/","title":"Serializer","text":""},{"location":"Serializer/Serializer/#Athena::Serializer::Serializer","title":"struct <code>Athena::Serializer::Serializer</code> inherits <code>Struct</code>","text":"<p>Default implementation of <code>ASR::SerializerInterface</code>.</p> <p>Provides the main API used to (de)serialize objects.</p> <p>Custom formats can be implemented by creating the required visitors for that type, then overriding <code>#get_deserialization_visitor_class</code> and <code>#get_serialization_visitor_class</code>.</p> <pre><code># Redefine the visitor class getters in order to first check for custom formats.\n# This assumes these visitor types are defined, with the proper logic to handle\n# the (de)serialization process.\nstruct Athena::Serializer::Serializer\n  protected def get_deserialization_visitor_class(format : ASR::Format | String)\n    return MessagePackDeserializationVisitor if format == \"message_pack\"\n\n    previous_def\n  end\n\n  protected def get_serialization_visitor_class(format : ASR::Format | String)\n    return MessagePackSerializationVisitor if format == \"message_pack\"\n\n    previous_def\n  end\nend\n</code></pre> Included modules <code>Athena::Serializer::SerializerInterface</code>"},{"location":"Serializer/Serializer/#Athena::Serializer::Serializer-constructors","title":"Constructors","text":""},{"location":"Serializer/Serializer/#Athena::Serializer::Serializer.new(navigator_factory)","title":"<code>.new(navigator_factory : ASR::Navigators::NavigatorFactoryInterface = ASR::Navigators::NavigatorFactory.new)</code>","text":"View source"},{"location":"Serializer/Serializer/#Athena::Serializer::Serializer-methods","title":"Methods","text":""},{"location":"Serializer/Serializer/#Athena::Serializer::Serializer#deserialize(type,data,format,context)","title":"<code>#deserialize(type : _, data : String | IO, format : ASR::Format | String, context : ASR::DeserializationContext = ASR::DeserializationContext.new)</code>","text":"<p>:inherit:</p> View source"},{"location":"Serializer/Serializer/#Athena::Serializer::Serializer#serialize(data,format,io,context,**)","title":"<code>#serialize(data : _, format : ASR::Format | String, io : IO, context : ASR::SerializationContext = ASR::SerializationContext.new, **named_args) : Nil</code>","text":"<p>Serializes the provided data into format writing it to the provided io, optionally with the provided context.=</p> View source"},{"location":"Serializer/Serializer/#Athena::Serializer::Serializer#serialize(data,format,context,**)","title":"<code>#serialize(data : _, format : ASR::Format | String, context : ASR::SerializationContext = ASR::SerializationContext.new, **named_args) : String</code>","text":"<p>Serializes the provided data into format, optionally with the provided context.</p> View source"},{"location":"Serializer/SerializerInterface/","title":"SerializerInterface","text":""},{"location":"Serializer/SerializerInterface/#Athena::Serializer::SerializerInterface","title":"module <code>Athena::Serializer::SerializerInterface</code>","text":"<p>The main entrypoint of <code>Athena::Serializer</code>.</p> Direct including types <code>Athena::Serializer::Serializer</code>"},{"location":"Serializer/SerializerInterface/#Athena::Serializer::SerializerInterface-methods","title":"Methods","text":""},{"location":"Serializer/SerializerInterface/#Athena::Serializer::SerializerInterface#deserialize(type,data,format,context)","title":"abstract <code>#deserialize(type : ASR::Model.class, data : String | IO, format : ASR::Format | String, context : ASR::DeserializationContext = ASR::DeserializationContext.new)</code>","text":"<p>Deserializes the provided input_data in the provided format into an instance of type, optionally with the provided context.</p> View source"},{"location":"Serializer/SerializerInterface/#Athena::Serializer::SerializerInterface#serialize(data,format,io,context,**)","title":"abstract <code>#serialize(data : _, format : ASR::Format | String, io : IO, context : ASR::SerializationContext = ASR::SerializationContext.new, **named_args) : Nil</code>","text":"<p>Serializes the provided data into format writing it to the provided io, optionally with the provided context.=</p> View source"},{"location":"Serializer/SerializerInterface/#Athena::Serializer::SerializerInterface#serialize(data,format,context,**)","title":"abstract <code>#serialize(data : _, format : ASR::Format | String, context : ASR::SerializationContext = ASR::SerializationContext.new, **named_args) : String</code>","text":"<p>Serializes the provided data into format, optionally with the provided context.</p> View source"},{"location":"Serializer/Visitors/","title":"Visitors","text":""},{"location":"Serializer/Visitors/#Athena::Serializer::Visitors","title":"module <code>Athena::Serializer::Visitors</code>","text":""},{"location":"Serializer/Visitors/DeserializationVisitor/","title":"DeserializationVisitor","text":""},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor","title":"abstract class <code>Athena::Serializer::Visitors::DeserializationVisitor</code> inherits <code>Reference</code>","text":"<p>Implement deserialization logic based on <code>ASR::Any</code> common to all formats.</p> Included modules <code>Athena::Serializer::Visitors::DeserializationVisitorInterface</code> Direct known subclasses <code>Athena::Serializer::Visitors::JSONDeserializationVisitor</code> <code>Athena::Serializer::Visitors::YAMLDeserializationVisitor</code>"},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor-methods","title":"Methods","text":""},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor#navigator","title":"<code>#navigator : Athena::Serializer::Navigators::DeserializationNavigatorInterface</code>","text":""},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor#navigator=(navigator)","title":"<code>#navigator=(navigator : Athena::Serializer::Navigators::DeserializationNavigatorInterface)</code>","text":"View source"},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor#navigator?","title":"<code>#navigator? : Athena::Serializer::Navigators::DeserializationNavigatorInterface | ::Nil</code>","text":""},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor#visit(type,data)","title":"<code>#visit(type : Nil.class, data : ASR::Any) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor#visit(type,data)","title":"<code>#visit(type : _, data : ASR::Any)</code>","text":"View source"},{"location":"Serializer/Visitors/DeserializationVisitor/#Athena::Serializer::Visitors::DeserializationVisitor#visit(type,data)","title":"<code>#visit(type : T.class, data : _) forall T</code>","text":"View source"},{"location":"Serializer/Visitors/DeserializationVisitorInterface/","title":"DeserializationVisitorInterface","text":""},{"location":"Serializer/Visitors/DeserializationVisitorInterface/#Athena::Serializer::Visitors::DeserializationVisitorInterface","title":"module <code>Athena::Serializer::Visitors::DeserializationVisitorInterface</code>","text":"Direct including types <code>Athena::Serializer::Visitors::DeserializationVisitor</code>"},{"location":"Serializer/Visitors/DeserializationVisitorInterface/#Athena::Serializer::Visitors::DeserializationVisitorInterface-methods","title":"Methods","text":""},{"location":"Serializer/Visitors/DeserializationVisitorInterface/#Athena::Serializer::Visitors::DeserializationVisitorInterface#prepare(data)","title":"abstract <code>#prepare(data : IO | String) : ASR::Any</code>","text":"View source"},{"location":"Serializer/Visitors/DeserializationVisitorInterface/#Athena::Serializer::Visitors::DeserializationVisitorInterface#visit(type,data)","title":"abstract <code>#visit(type : Nil.class, data : ASR::Any) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/DeserializationVisitorInterface/#Athena::Serializer::Visitors::DeserializationVisitorInterface#visit(type,data)","title":"abstract <code>#visit(type : _, data : ASR::Any)</code>","text":"View source"},{"location":"Serializer/Visitors/DeserializationVisitorInterface/#Athena::Serializer::Visitors::DeserializationVisitorInterface#visit(type,data)","title":"abstract <code>#visit(type : _, data : _)</code>","text":"View source"},{"location":"Serializer/Visitors/JSONDeserializationVisitor/","title":"JSONDeserializationVisitor","text":""},{"location":"Serializer/Visitors/JSONDeserializationVisitor/#Athena::Serializer::Visitors::JSONDeserializationVisitor","title":"class <code>Athena::Serializer::Visitors::JSONDeserializationVisitor</code> inherits <code>Athena::Serializer::Visitors::DeserializationVisitor</code>","text":""},{"location":"Serializer/Visitors/JSONDeserializationVisitor/#Athena::Serializer::Visitors::JSONDeserializationVisitor-methods","title":"Methods","text":""},{"location":"Serializer/Visitors/JSONDeserializationVisitor/#Athena::Serializer::Visitors::JSONDeserializationVisitor#prepare(data)","title":"<code>#prepare(data : IO | String) : ASR::Any</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/","title":"JSONSerializationVisitor","text":""},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor","title":"class <code>Athena::Serializer::Visitors::JSONSerializationVisitor</code> inherits <code>Reference</code>","text":"Included modules <code>Athena::Serializer::Visitors::SerializationVisitorInterface</code>"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor-constructors","title":"Constructors","text":""},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor.new(io,named_args)","title":"<code>.new(io : IO, named_args : NamedTuple)</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor-methods","title":"Methods","text":""},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#finish","title":"<code>#finish : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#navigator","title":"<code>#navigator : Athena::Serializer::Navigators::SerializationNavigatorInterface</code>","text":""},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#navigator=(navigator)","title":"<code>#navigator=(navigator : Athena::Serializer::Navigators::SerializationNavigatorInterface)</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#navigator?","title":"<code>#navigator? : Athena::Serializer::Navigators::SerializationNavigatorInterface | ::Nil</code>","text":""},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#prepare","title":"<code>#prepare : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Array(PropertyMetadataBase)) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Nil) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : String | Symbol) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Number) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Bool) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Hash | NamedTuple) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Enumerable) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Time) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : Enum) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : UUID) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : ASR::Model) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : ASR::Any) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/JSONSerializationVisitor/#Athena::Serializer::Visitors::JSONSerializationVisitor#visit(data)","title":"<code>#visit(data : _) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/","title":"SerializationVisitorInterface","text":""},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface","title":"module <code>Athena::Serializer::Visitors::SerializationVisitorInterface</code>","text":"Direct including types <code>Athena::Serializer::Visitors::JSONSerializationVisitor</code> <code>Athena::Serializer::Visitors::YAMLSerializationVisitor</code>"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface-methods","title":"Methods","text":""},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#finish","title":"abstract <code>#finish : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#prepare","title":"abstract <code>#prepare : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Array(ASR::PropertyMetadataBase)) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Bool) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Enum) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Hash) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Enumerable) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : NamedTuple) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Nil) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Number) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : String) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Symbol) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : Time) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : UUID) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : ASR::Any) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/SerializationVisitorInterface/#Athena::Serializer::Visitors::SerializationVisitorInterface#visit(data)","title":"abstract <code>#visit(data : ASR::Model) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLDeserializationVisitor/","title":"YAMLDeserializationVisitor","text":""},{"location":"Serializer/Visitors/YAMLDeserializationVisitor/#Athena::Serializer::Visitors::YAMLDeserializationVisitor","title":"class <code>Athena::Serializer::Visitors::YAMLDeserializationVisitor</code> inherits <code>Athena::Serializer::Visitors::DeserializationVisitor</code>","text":""},{"location":"Serializer/Visitors/YAMLDeserializationVisitor/#Athena::Serializer::Visitors::YAMLDeserializationVisitor-methods","title":"Methods","text":""},{"location":"Serializer/Visitors/YAMLDeserializationVisitor/#Athena::Serializer::Visitors::YAMLDeserializationVisitor#prepare(data)","title":"<code>#prepare(data : IO | String) : ASR::Any</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/","title":"YAMLSerializationVisitor","text":""},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor","title":"class <code>Athena::Serializer::Visitors::YAMLSerializationVisitor</code> inherits <code>Reference</code>","text":"Included modules <code>Athena::Serializer::Visitors::SerializationVisitorInterface</code>"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor-constructors","title":"Constructors","text":""},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor.new(io,named_args)","title":"<code>.new(io : IO, named_args : NamedTuple)</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor-methods","title":"Methods","text":""},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#finish","title":"<code>#finish : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#navigator","title":"<code>#navigator : Athena::Serializer::Navigators::SerializationNavigatorInterface</code>","text":""},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#navigator=(navigator)","title":"<code>#navigator=(navigator : Athena::Serializer::Navigators::SerializationNavigatorInterface)</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#navigator?","title":"<code>#navigator? : Athena::Serializer::Navigators::SerializationNavigatorInterface | ::Nil</code>","text":""},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#prepare","title":"<code>#prepare : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : Array(PropertyMetadataBase)) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : String | Symbol | Number | Bool | Nil) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : Hash | NamedTuple) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : Enumerable) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : Time) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : Enum) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : UUID) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : ASR::Model) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : ASR::Any) : Nil</code>","text":"View source"},{"location":"Serializer/Visitors/YAMLSerializationVisitor/#Athena::Serializer::Visitors::YAMLSerializationVisitor#visit(data)","title":"<code>#visit(data : _) : Nil</code>","text":"View source"},{"location":"Spec/","title":"Spec","text":""},{"location":"Spec/#Athena::Spec","title":"module <code>Athena::Spec</code>","text":"<p>A set of common Spec compliant testing utilities/types.</p>"},{"location":"Spec/#Athena::Spec--getting-started","title":"Getting Started","text":"<p>Unlike the other components, this one requires being manually installed, even if it is being used within the framework. This is due to there not being a way for a library to define development dependencies for the project that it is a dependency of.</p> <p>First add the component as a development dependency:</p> <pre><code>development_dependencies:\n  athena-spec:\n    github: athena-framework/spec\n    version: ~&gt; 0.3.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-spec\"</code> within your <code>spec/spec_helper.cr</code> file. From here you can create some <code>ASPEC::TestCase</code>s, or make use of the provided <code>ASPEC::Methods</code>.</p> <p>If using the component with the framework, also checkout the manual for some additional information on how it is integrated.</p>"},{"location":"Spec/#Athena::Spec-constants","title":"Constants","text":""},{"location":"Spec/#Athena::Spec::VERSION","title":"<code>VERSION = \"0.3.6\"</code>","text":""},{"location":"Spec/#Athena::Spec-class-methods","title":"Class methods","text":""},{"location":"Spec/#Athena::Spec.run_all","title":"<code>.run_all : Nil</code>","text":"<p>Runs all <code>ASPEC::TestCase</code>s.</p> <p>Is equivalent to manually calling <code>.run</code> on each test case.</p> View source"},{"location":"Spec/aliases/","title":"Aliases","text":""},{"location":"Spec/aliases/#ASPEC","title":"alias <code>ASPEC</code>","text":"<p>Convenience alias to make referencing <code>Athena::Spec</code> types easier.</p> Alias definition <code>Athena::Spec</code>"},{"location":"Spec/Methods/","title":"Methods","text":""},{"location":"Spec/Methods/#Athena::Spec::Methods","title":"module <code>Athena::Spec::Methods</code>","text":"<p>Namespace for common/helpful testing methods.</p> <p>This module can be included into your <code>spec_helper</code> in order to allow your specs to use them all.  This module is also included into <code>ASPEC::TestCase</code> by default to allow using them within your unit tests as well.</p> <p>May be reopened to add additional application specific helpers.</p> Extended modules <code>Athena::Spec::Methods</code> Direct including types <code>Athena::Spec::TestCase</code>"},{"location":"Spec/Methods/#Athena::Spec::Methods-methods","title":"Methods","text":""},{"location":"Spec/Methods/#Athena::Spec::Methods#assert_error(message,code,*,codegen,line,file)","title":"<code>#assert_error(message : String, code : String, *, codegen : Bool = false, line : Int32 = __LINE__, file : String = __FILE__) : Nil</code>","text":"<p>Executes the provided Crystal code asserts it errors with the provided message. The main purpose of this method is to test compile time errors.</p> <pre><code>ASPEC::Methods.assert_error \"can't instantiate abstract class Foo\", &lt;&lt;-CR\n  abstract class Foo; end\n  Foo.new\nCR\n</code></pre> <p>Note</p> <p>When files are required within the code, they are relative to the file calling this method.</p> <p>By default this method does not perform any codegen; meaning it only validates that the code can be successfully compiled, excluding any runtime exceptions.</p> <p>The codegen option can be used to enable codegen, thus allowing runtime logic to also be tested. This can be helpful in order to test something in isolation, without affecting other test cases.</p> View source"},{"location":"Spec/Methods/#Athena::Spec::Methods#assert_success(code,*,codegen,line,file)","title":"<code>#assert_success(code : String, *, codegen : Bool = false, line : Int32 = __LINE__, file : String = __FILE__) : Nil</code>","text":"<p>Similar to <code>.assert_error</code>, but asserts the provided Crystal code successfully compiles.</p> <pre><code>ASPEC::Methods.assert_success &lt;&lt;-CR\n  puts 2 + 2\nCR\n</code></pre> <p>Note</p> <p>When files are required within the code, they are relative to the file calling this method.</p> <p>By default this method does not perform any codegen; meaning it only validates that the code can be successfully compiled, excluding any runtime exceptions.</p> <p>The codegen option can be used to enable codegen, thus allowing runtime logic to also be tested. This can be helpful in order to test something in isolation, without affecting other test cases.</p> View source"},{"location":"Spec/Methods/#Athena::Spec::Methods#run_executable(path,args,&)","title":"<code>#run_executable(path : String, args : Array(String) = [] of String, &amp; : String, String, Process::Status -&gt; ) : Nil</code>","text":"<p>Runs the executable at the given path, optionally with the provided args.</p> <p>The standard output, error output, and status of the execution are yielded.</p> <pre><code>require \"athena-spec\"\n\nASPEC::Methods.run_executable \"/usr/bin/ls\" do |output, error, status|\n  output # =&gt; \"docs\\n\" + \"LICENSE\\n\" + \"README.md\\n\" + \"shard.yml\\n\" + \"spec\\n\" + \"src\\n\"\n  error  # =&gt; \"\"\n  status # =&gt; #&lt;Process::Status:0x7f7bc9befb70 @exit_status=0&gt;\nend\n</code></pre> View source"},{"location":"Spec/Methods/#Athena::Spec::Methods#run_executable(path,input,args,&)","title":"<code>#run_executable(path : String, input : IO, args : Array(String) = [] of String, &amp; : String, String, Process::Status -&gt; ) : Nil</code>","text":"<p>Runs the executable at the given path, with the given input, optionally with the provided args.</p> <p>The standard output, error output, and status of the execution are yielded.</p> <pre><code>require \"athena-spec\"\n\ninput = IO::Memory.new %({\"id\":1})\n\nASPEC::Methods.run_executable \"jq\", input, [\".\", \"-c\"] do |output, error, status|\n  output # =&gt; \"{\\\"id\\\":1}\\n\"\n  error  # =&gt; \"\"\n  status # =&gt; #&lt;Process::Status:0x7f26ec698b70 @exit_status=0&gt;\nend\n\ninvalid_input = IO::Memory.new %({\"id\"1})\n\nASPEC::Methods.run_executable \"jq\", invalid_input, [\".\", \"-c\"] do |output, error, status|\n  output # =&gt; \"\"\n  error  # =&gt; \"parse error: Expected separator between values at line 1, column 7\\n\"\n  status # =&gt; #&lt;Process::Status:0x7f0217496900 @exit_status=1024&gt;\nend\n</code></pre> View source"},{"location":"Spec/TestCase/","title":"TestCase","text":""},{"location":"Spec/TestCase/#Athena::Spec::TestCase","title":"abstract struct <code>Athena::Spec::TestCase</code> inherits <code>Struct</code>","text":"<p><code>ASPEC::TestCase</code> provides a Spec compliant alternative DSL for creating unit and integration tests.  It allows structuring tests in a more OOP fashion, with the main benefits of reusability and extendability.</p> <p>This type can be extended to share common testing logic with groups of similar types. Any tests defined within a parent will run for each child test case. <code>abstract def</code>, <code>super</code>, and other OOP features can be used as well to reduce duplication. Some additional features are also built in, such as the <code>DataProvider</code>.</p> <p>Note</p> <p>This is NOT a standalone testing framework.  Everything boils down to standard <code>describe</code>, <code>it</code>, and/or <code>pending</code> blocks.</p> <p>A test case consists of a <code>struct</code> inheriting from <code>self</code>, optionally with an <code>#initialize</code> method in order to initialize the state that should be used for each test.</p> <p>A test is a method that starts with <code>test_</code>, where the method name is used as the description. For example, <code>test_some_method_some_context</code> becomes <code>\"some method some context\"</code>. Internally each test method maps to an <code>it</code> block. All of the stdlib's <code>Spec</code> assertions methods are available, in addition to #pending! and #fail.</p> <p>A method may be focused by either prefixing the method name with an <code>f</code>, or applying the <code>Focus</code> annotation.</p> <p>A method may be marked pending by either prefixing the method name with a <code>p</code>, or applying the <code>Pending</code> annotation. Internally this maps to a <code>pending</code> block.</p> <p>Tags may be applied to a method via the <code>Tags</code> annotation.</p> <p>The <code>Tags</code>, <code>Focus</code>, and <code>Pending</code> annotations may also be applied to the test case type as well, with a similar affect.</p>"},{"location":"Spec/TestCase/#Athena::Spec::TestCase--example","title":"Example","text":"<pre><code># Require the stdlib's spec module.\nrequire \"spec\"\n\n# Define a class to test.\nclass Calculator\n  def add(v1, v2)\n    v1 + v2\n  end\n\n  def subtract(v1, v2)\n    raise NotImplementedError.new \"TODO\"\n  end\nend\n\n# An example test case.\nstruct ExampleSpec &lt; ASPEC::TestCase\n  @target : Calculator\n\n  # Initialize the test target along with any dependencies.\n  def initialize : Nil\n    @target = Calculator.new\n  end\n\n  # All of the stdlib's `Spec` methods can be used,\n  # plus any custom methods defined in `ASPEC::Methods`.\n  def test_add : Nil\n    @target.add(1, 2).should eq 3\n  end\n\n  # A pending test.\n  def ptest_subtract : Nil\n    @target.subtract(10, 5).should eq 5\n  end\n\n  # Private/protected methods can be used to reduce duplication within the context of single test case.\n  private def helper_method\n    # ...\n  end\nend\n</code></pre>"},{"location":"Spec/TestCase/#Athena::Spec::TestCase--inheritance","title":"Inheritance","text":"<p>Inheritance can be used to build reusable test cases for groups of similar objects</p> <pre><code>abstract struct SomeTypeTestCase &lt; ASPEC::TestCase\n  # Require children to define a method to get the object.\n  protected abstract def get_object : Calculator\n\n  # Test cases can use the abstract method for tests common to all test cases of this type.\n  def test_common : Nil\n    obj = self.get_object\n\n    # ...\n  end\nend\n\nstruct CalculatorTest &lt; SomeTypeTestCase\n  protected def get_object : Calculator\n    Calculator.new\n  end\n\n  # Additional tests specific to this type.\n  def test_specific : Nil\n    # ...\n  end\nend\n</code></pre>"},{"location":"Spec/TestCase/#Athena::Spec::TestCase--data-providers","title":"Data Providers","text":"<p>A <code>DataProvider</code> can be used to reduce duplication, see the corresponding annotation or more information.</p> <pre><code>struct DataProviderTest &lt; ASPEC::TestCase\n  # Data Providers allow reusing a test's multiple times with different input.\n  @[DataProvider(\"get_values\")]\n  def test_squares(value : Int32, expected : Int32) : Nil\n    (value ** 2).should eq expected\n  end\n\n  # Returns a hash where the key represents the name of the test,\n  # and the value is a Tuple of data that should be provided to the test.\n  def get_values : Hash\n    {\n      \"two\"   =&gt; {2, 4},\n      \"three\" =&gt; {3, 9},\n    }\n  end\nend\n</code></pre> <pre><code># Run all the test cases\nASPEC.run_all # =&gt;\n# ExampleSpec\n#   add\n#   subtract\n#   a custom method name\n# CalculatorTest\n#   common\n#   specific\n# DataProviderTest\n#   squares two\n#   squares three\n#\n# Pending:\n# ExampleSpec subtract\n#\n# Finished in 172 microseconds\n# 7 examples, 0 failures, 0 errors, 1 pending\n</code></pre> Included modules <code>Athena::Spec::Methods</code> Direct known subclasses <code>Athena::Framework::Spec::WebTestCase</code> <code>Athena::Validator::Spec::ConstraintValidatorTestCase</code>"},{"location":"Spec/TestCase/#Athena::Spec::TestCase-constructors","title":"Constructors","text":""},{"location":"Spec/TestCase/#Athena::Spec::TestCase.new","title":"<code>.new</code>","text":"<p>Runs before each test.</p> <p>Used to create the objects that will be used within the tests.</p> <pre><code>require \"spec\"\nrequire \"athena-spec\"\n\nstruct ExampleSpec &lt; ASpec::TestCase\n  @value : Int32\n\n  def initialize : Nil\n    @value = 1\n  end\n\n  def test_one : Nil\n    @value += 1\n\n    @value # =&gt; 2\n  end\n\n  def test_two : Nil\n    @value # =&gt; 1\n  end\nend\n\nExampleSpec.run\n</code></pre> View source"},{"location":"Spec/TestCase/#Athena::Spec::TestCase-class-methods","title":"Class methods","text":""},{"location":"Spec/TestCase/#Athena::Spec::TestCase.run","title":"<code>.run : Nil</code>","text":"<p>Runs the tests contained within <code>self</code>.</p> <p>See <code>Athena::Spec.run_all</code> to run all test cases.</p> View source"},{"location":"Spec/TestCase/#Athena::Spec::TestCase-methods","title":"Methods","text":""},{"location":"Spec/TestCase/#Athena::Spec::TestCase#after_all","title":"<code>#after_all : Nil</code>","text":"<p>Runs once after all tests within <code>self</code> have been executed.</p> <pre><code>require \"spec\"\nrequire \"athena-spec\"\n\nstruct ExampleSpec &lt; ASPEC::TestCase\n  def after_all : Nil\n    puts \"This prints only once after anything else\"\n  end\n\n  def test_one : Nil\n    true.should be_true\n  end\n\n  def test_two : Nil\n    1.should eq 1\n  end\nend\n\nExampleSpec.run\n</code></pre> View source"},{"location":"Spec/TestCase/#Athena::Spec::TestCase#before_all","title":"<code>#before_all : Nil</code>","text":"<p>Runs once before any tests within <code>self</code> have been executed.</p> <p>Can be used to initialize objects common to every test, but that do not need to be reset before running each test.</p> <pre><code>require \"spec\"\nrequire \"athena-spec\"\n\nstruct ExampleSpec &lt; ASPEC::TestCase\n  def before_all : Nil\n    puts \"This prints only once before anything else\"\n  end\n\n  def test_one : Nil\n    true.should be_true\n  end\n\n  def test_two : Nil\n    1.should eq 1\n  end\nend\n\nExampleSpec.run\n</code></pre> View source"},{"location":"Spec/TestCase/#Athena::Spec::TestCase#tear_down","title":"<code>#tear_down : Nil</code>","text":"<p>Runs after each test.</p> <p>Can be used to cleanup data in between tests, such as releasing a connection or closing a file.</p> <pre><code>require \"spec\"\nrequire \"athena-spec\"\n\nstruct ExampleSpec &lt; ASPEC::TestCase\n  @file : File\n\n  def initialize : Nil\n    @file = File.new \"./foo.txt\", \"w\"\n  end\n\n  def tear_down : Nil\n    @file.close\n  end\n\n  def test_one : Nil\n    @file.path # =&gt; \"./foo.txt\"\n  end\nend\n\nExampleSpec.run\n</code></pre> View source"},{"location":"Spec/TestCase/DataProvider/","title":"DataProvider","text":""},{"location":"Spec/TestCase/DataProvider/#Athena::Spec::TestCase::DataProvider","title":"annotation <code>Athena::Spec::TestCase::DataProvider</code>","text":"<p>Tests can be defined with arbitrary arguments.  These arguments are provided by one or more <code>DataProvider</code>.</p> <p>A data provider is a method that returns either a <code>Hash</code>, <code>NamedTuple</code>, <code>Array</code>, or <code>Tuple</code>.</p> <p>Note</p> <p>The method's return type must be set to one of those types.</p> <p>If the return type is a <code>Hash</code> or <code>NamedTuple</code> then it is a keyed provider; the key will be used as part of the description for each test.</p> <p>If the return type is an <code>Array</code> or <code>Tuple</code> it is considered a keyless provider; the index will be used as part of the description for each test.</p> <p>Note</p> <p>In both cases the value must be a <code>Tuple</code>; the values should be an ordered list of the arguments you want to provide to the test.</p> <p>One or more <code>DataProvider</code> annotations can be applied to a test with a positional argument of the name of the providing methods. An <code>it</code> block will be defined for each \"set\" of data.</p> <p>Data providers can be a very powerful tool when combined with inheritance and <code>abstract def</code>s. A parent test case could define all the testing logic, and child implementations only provide the data.</p>"},{"location":"Spec/TestCase/DataProvider/#Athena::Spec::TestCase::DataProvider--example","title":"Example","text":"<pre><code>require \"athena-spec\"\n\nstruct DataProviderTest &lt; ASPEC::TestCase\n  @[DataProvider(\"get_values_hash\")]\n  @[DataProvider(\"get_values_named_tuple\")]\n  def test_squares(value : Int32, expected : Int32) : Nil\n    (value ** 2).should eq expected\n  end\n\n  # A keyed provider using a Hash.\n  def get_values_hash : Hash\n    {\n      \"two\"   =&gt; {2, 4},\n      \"three\" =&gt; {3, 9},\n    }\n  end\n\n  # A keyed provider using a NamedTuple.\n  def get_values_named_tuple : NamedTuple\n    {\n      four: {4, 16},\n      five: {5, 25},\n    }\n  end\n\n  @[DataProvider(\"get_values_array\")]\n  @[DataProvider(\"get_values_tuple\")]\n  def test_cubes(value : Int32, expected : Int32) : Nil\n    (value ** 3).should eq expected\n  end\n\n  # A keyless provider using an Array.\n  def get_values_array : Array\n    [\n      {2, 8},\n      {3, 27},\n    ]\n  end\n\n  # A keyless provider using a Tuple.\n  def get_values_tuple : Tuple\n    {\n      {4, 64},\n      {5, 125},\n    }\n  end\nend\n\nDataProviderTest.run # =&gt;\n# DataProviderTest\n#   squares two\n#   squares three\n#   squares four\n#   squares five\n#   cubes 0\n#   cubes 1\n#   cubes 2\n#   cubes 3\n</code></pre>"},{"location":"Spec/TestCase/Focus/","title":"Focus","text":""},{"location":"Spec/TestCase/Focus/#Athena::Spec::TestCase::Focus","title":"annotation <code>Athena::Spec::TestCase::Focus</code>","text":"<p>Focuses a specific test case (describe block) or method (it block).</p> <p>Maps to Focusing Specs in the stdlib.</p>"},{"location":"Spec/TestCase/Pending/","title":"Pending","text":""},{"location":"Spec/TestCase/Pending/#Athena::Spec::TestCase::Pending","title":"annotation <code>Athena::Spec::TestCase::Pending</code>","text":"<p>Marks a specific test case (describe block) or method (it block) as <code>pending</code>.</p> <p>Maps to the stdlib's #pending method.</p>"},{"location":"Spec/TestCase/Skip/","title":"Skip","text":""},{"location":"Spec/TestCase/Skip/#Athena::Spec::TestCase::Skip","title":"annotation <code>Athena::Spec::TestCase::Skip</code>","text":"<p>Can be applied to an <code>ASPEC::TestCase</code> type to denote it should be skipped when running tests via <code>ASPEC.run_all</code>. Useful for creating mock types, or to have more control over when it should be ran.</p>"},{"location":"Spec/TestCase/Tags/","title":"Tags","text":""},{"location":"Spec/TestCase/Tags/#Athena::Spec::TestCase::Tags","title":"annotation <code>Athena::Spec::TestCase::Tags</code>","text":"<p>Defines the tags tied to a specific test case (describe block) or method (it block).</p> <p>Maps to Tagging Specs in the stdlib.</p>"},{"location":"Spec/TestCase/TestWith/","title":"TestWith","text":""},{"location":"Spec/TestCase/TestWith/#Athena::Spec::TestCase::TestWith","title":"annotation <code>Athena::Spec::TestCase::TestWith</code>","text":"<p>Instead of created a dedicated methods for use with <code>DataProvider</code>, you can define a data set using the <code>TestWith</code> annotation. The annotations accepts a variadic amount of <code>Tuple</code> positional/named arguments and will create a <code>it</code> case for each \"set\" of data.</p>"},{"location":"Spec/TestCase/TestWith/#Athena::Spec::TestCase::TestWith--example","title":"Example","text":"<pre><code>require \"athena-spec\"\n\nstruct TestWithTest &lt; ASPEC::TestCase\n  @[TestWith(\n    two: {2, 4},\n    three: {3, 9},\n    four: {4, 16},\n    five: {5, 25},\n  )]\n  def test_squares(value : Int32, expected : Int32) : Nil\n    (value ** 2).should eq expected\n  end\n\n  @[TestWith(\n    {2, 8},\n    {3, 27},\n    {4, 64},\n    {5, 125},\n  )]\n  def test_cubes(value : Int32, expected : Int32) : Nil\n    (value ** 3).should eq expected\n  end\nend\n\nTestWithTest.run # =&gt;\n# TestWithTest\n#   squares two\n#   squares three\n#   squares four\n#   squares five\n#   cubes 0\n#   cubes 1\n#   cubes 2\n#   cubes 3\n</code></pre>"},{"location":"Validator/","title":"Validator","text":""},{"location":"Validator/#Athena::Validator","title":"module <code>Athena::Validator</code>","text":"<p>Athena's Validation component, <code>AVD</code> for short, adds an object/value validation framework to your project. The framework consists of <code>AVD::Constraint</code>s that describe some assertion; such as a string should be <code>AVD::Constraints::NotBlank</code> or that a value is <code>AVD::Constraints::GreaterThanOrEqual</code> another value. Constraints, along with a value, are then passed to an <code>AVD::ConstraintValidatorInterface</code> that actually performs the validation, using the data defined in the constraint. If the validator determines that the value is invalid in some way, it creates and adds an <code>AVD::Violation::ConstraintViolationInterface</code> to this runs' <code>AVD::ExecutionContextInterface</code>. The <code>AVD::Validator::ValidatorInterface</code> then returns an <code>AVD::Violation::ConstraintViolationListInterface</code> that contains all the violations.  The value can be considered valid if that list is empty.</p> <p>Note</p> <p>See each type individually for more detailed information.</p>"},{"location":"Validator/#Athena::Validator--getting-started","title":"Getting Started","text":"<p>If using this component within the Athena Framework, it is already installed and required for you. Checkout the manual for some additional information on how to use it within the framework.</p> <p>If using it outside of the framework, you will first need to add it as a dependency:</p> <pre><code>dependencies:\n  athena-validator:\n    github: athena-framework/validator\n    version: ~&gt; 0.3.0\n</code></pre> <p>Then run <code>shards install</code>, being sure to require it via <code>require \"athena-validator\"</code>.</p>"},{"location":"Validator/#Athena::Validator--usage","title":"Usage","text":"<p><code>Athena::Validator</code> comes with a set of common <code>AVD::Constraints</code> built in that any project could find useful. When used on its own, the <code>Athena::Validator.validator</code> method can be used to obtain an <code>AVD::Validator::ValidatorInterface</code> instance to validate a given value/object.</p>"},{"location":"Validator/#Athena::Validator--basics","title":"Basics","text":"<p>A validator accepts a value, and one or more <code>AVD::Constraint</code> to validate the value against. The validator then returns an <code>AVD::Violation::ConstraintViolationListInterface</code> that includes all the violations, if any.</p> <pre><code># Obtain a validator instance.\nvalidator = AVD.validator\n\n# Use the validator to validate a value.\nviolations = validator.validate \"foo\", AVD::Constraints::NotBlank.new\n\n# The validator returns an empty list of violations, indicating the value is valid.\nviolations.inspect # =&gt; Athena::Validator::Violation::ConstraintViolationList(@violations=[])\n</code></pre> <p>In this case it returns an empty list of violations, meaning the value is valid.</p> <pre><code># Using the validator instance from the previous example\nviolations = validator.validate \"\", AVD::Constraints::NotBlank.new\n\nviolations.inspect # =&gt;\n# Athena::Validator::Violation::ConstraintViolationList(\n#   @violations=[\n#     Athena::Validator::Violation::ConstraintViolation(\n#       @cause=nil,\n#       @code=\"0d0c3254-3642-4cb0-9882-46ee5918e6e3\",\n#       @constraint=#&lt;Athena::Validator::Constraints::NotBlank:0x7f8a7291fed0\n#         @allow_nil=false,\n#         @groups=[\"default\"],\n#         @message=\"This value should not be blank.\",\n#         @payload=nil&gt;,\n#       @invalid_value_container=Athena::Validator::ValueContainer(String)(@value=\"\"),\n#       @message=\"This value should not be blank.\",\n#       @message_template=\"This value should not be blank.\",\n#       @parameters={\"{{ value }}\" =&gt; \"\"},\n#       @plural=nil,\n#       @property_path=\"\",\n#       @root_container=Athena::Validator::ValueContainer(String)(@value=\"\")\n#     )\n#   ]\n)\n\n# Both the ConstraintViolationList and ConstraintViolation implement a `#to_s` method.\nputs violations # =&gt;\n# :\n#   This value should not be blank. (code: 0d0c3254-3642-4cb0-9882-46ee5918e6e3)\n</code></pre> <p>However in the case of the value NOT being valid, the list includes all of the <code>AVD::Violation::ConstraintViolationInterface</code>s produced during this run. Each violation includes some metadata; such as the related constraint that failed, a machine readable code, a human readable message, any parameters that should be used to render that message, etc.  The extra context allows for a lot of flexibility; both in terms of how the error could be rendered or handled.</p> <p>By default, in addition to any constraint specific arguments, the majority of the constraints have three optional arguments: <code>message</code>, <code>groups</code>, and <code>payload</code>.</p> <ul> <li>The <code>message</code> argument represents the message that should be used if the value is found to not be valid. The message can also include placeholders, in the form of <code>{{ key }}</code>, that will be replaced when the message is rendered. Most commonly this includes the invalid value itself, but some constraints have additional placeholders.</li> <li>The <code>payload</code> argument can be used to attach any domain specific data to the constraint; such as attaching a severity with each constraint to have more serious violations be handled differently.</li> <li>The <code>groups</code> argument can be used to run a subset of the defined constraints.  More on this in the Validation Groups section.</li> </ul> <p><pre><code>validator = AVD.validator\n\n# Instantiate a constraint with a custom message, using a placeholder.\nviolations = validator.validate -4, AVD::Constraints::PositiveOrZero.new message: \"{{ value }} is not a valid age.  A user cannot have a negative age.\"\n\nputs violations # =&gt;\n# -4:\n#   -4 is not a valid age.  A user cannot have a negative age. (code: e09e52d0-b549-4ba1-8b4e-420aad76f0de)\n</code></pre> Customizing the message can be a good way for those consuming the errors to determine WHY a given value is not valid.</p>"},{"location":"Validator/#Athena::Validator--validating-objects","title":"Validating Objects","text":"<p>Validating arbitrary values against a set of arbitrary constraints can be useful in smaller applications and/or for one off use cases. However to keep in line with our Object Oriented Programming (OOP) principles, we can also validate objects.  The object could be either a struct or a class. The only requirements are that the object includes a specific module, <code>AVD::Validatable</code>, and specifies which properties should be validated and against what constraints. The easiest/most common way to do this is via annotations and the <code>Assert</code> alias.</p> <pre><code># Define a class that can be validated.\nclass User\n  include AVD::Validatable\n\n  def initialize(@name : String, @age : Int32? = nil); end\n\n  # Specify that we want to assert that the user's name is not blank.\n  # Multiple constraints can be defined on a single property.\n  @[Assert::NotBlank]\n  getter name : String\n\n  # Arguments to the constraint can be used normally as well.\n  # The constraint's default argument can also be supplied positionally: `@[Assert::GreaterThan(0)]`.\n  @[Assert::NotNil(message: \"A user's age cannot be null\")]\n  getter age : Int32?\nend\n\n# Obtain a validator instance.\nvalidator = AVD.validator\n\n# Validate a user instance, notice we're not passing in any constraints.\nvalidator.validate(User.new(\"Jim\", 10)).empty? # =&gt; true\nvalidator.validate User.new \"\", 10             # =&gt;\n# Object(User).name:\n#   This value should not be blank. (code: 0d0c3254-3642-4cb0-9882-46ee5918e6e3)\n</code></pre> <p>Notice that in this case we do not need to supply the constraints to the <code>#validate</code> method. This is because the validator is able to extract them from the annotations on the properties. An array of constraints can still be supplied, and will take precedence over the constraints defined within the type.</p> <p>Note</p> <p>By default if a property's value is another object, the sub object will not be validated. use the <code>AVD::Constraints::Valid</code> constraint if you wish to also validate the sub object. This also applies to arrays of objects.</p> <p>Another important thing to point out is that no custom DSL is required to define these constraints. <code>Athena::Validator</code> is intended to be a generic validation solution that could be used outside of the Athena ecosystem. However, in order to be able to use the annotation based approach, you need to be able to apply the annotations to the underlying properties. If this is not possible due to how a specific type is implemented, or if you just don't like the annotation syntax, the type can also be configured via code.</p> <pre><code># Define a class that can be validated.\nclass User\n  include AVD::Validatable\n\n  # This class method is invoked when building the metadata associated with a type,\n  # and can be used to manually wire up the constraints.\n  def self.load_metadata(metadata : AVD::Metadata::ClassMetadata) : Nil\n    metadata.add_property_constraint \"name\", AVD::Constraints::NotBlank.new\n  end\n\n  def initialize(@name : String); end\n\n  getter name : String\nend\n\n# Obtain a validator instance.\nvalidator = AVD.validator\n\n# Validate a user instance, notice we're not passing in any constraints.\nvalidator.validate(User.new(\"Jim\")).empty? # =&gt; true\nvalidator.validate User.new \"\"             # =&gt;\n# Object(User).name:\n#   This value should not be blank. (code: 0d0c3254-3642-4cb0-9882-46ee5918e6e3)\n</code></pre> <p>The metadata for each type is lazily loaded when an instance of that type is validated, and is only built once. See <code>AVD::Metadata::ClassMetadata</code> for some additional ways to register property constraints.</p>"},{"location":"Validator/#Athena::Validator--getters","title":"Getters","text":"<p>Constraints can also be applied to getter methods of an object. This allows for dynamic validations based on the return value of the method. For example, say we wanted to assert that a user's name is not the same as their password.</p> <pre><code>class User\n  include AVD::Validatable\n\n  property name : String\n  property password : String\n\n  def initialize(@name : String, @password : String); end\n\n  @[Assert::IsTrue(message: \"Your password cannot be the same as your name.\")]\n  def is_safe_password? : Bool\n    @name != @password\n  end\nend\n\nvalidator = AVD.validator\n\nuser = User.new \"foo\", \"foo\"\n\nvalidator.validate(user).empty? # =&gt; false\n\nuser.password = \"bar\"\n\nvalidator.validate(user).empty? # =&gt; true\n</code></pre>"},{"location":"Validator/#Athena::Validator--custom-constraints","title":"Custom Constraints","text":"<p>If the built in <code>AVD::Constraints</code> are not sufficient to handle validating a given value/object; custom ones can be defined. Let's make a new constraint that asserts a string contains only alphanumeric characters.</p> <p>This is accomplished by first defining a new class within the <code>AVD::Constraints</code> namespace that inherits from <code>AVD::Constraint</code>. Then define a <code>Validator</code> struct within our constraint that inherits from <code>AVD::ConstraintValidator</code> that actually implements the validation logic.</p> <pre><code>class AVD::Constraints::AlphaNumeric &lt; AVD::Constraint\n  # (Optional) A unique error code can also be defined to provide a machine readable identifier for a specific error.\n  NOT_ALPHANUMERIC_ERROR = \"1a83a8bd-ff79-4d5c-96e7-86d0b25b8a09\"\n\n  # (Optional) Allows using the `.error_message(code : String) : String` method with this constraint.\n  @@error_names = {\n    NOT_ALPHANUMERIC_ERROR =&gt; \"NOT_ALPHANUMERIC_ERROR\",\n  }\n\n  # Define an initializer with our default message, and any additional arguments specific to this constraint.\n  def initialize(\n    message : String = \"This value should contain only alphanumeric characters.\",\n    groups : Array(String) | String | Nil = nil,\n    payload : Hash(String, String)? = nil\n  )\n    super message, groups, payload\n  end\n\n  # Define the validator within our constraint that'll contain our validation logic.\n  class Validator &lt; AVD::ConstraintValidator\n    # Define our validate method that accepts the value to be validated, and the constraint.\n    #\n    # Overloads can be used to filter values of specific types.\n    def validate(value : _, constraint : AVD::Constraints::AlphaNumeric) : Nil\n      # Custom constraints should ignore nil and empty values to allow\n      # other constraints (NotBlank, NotNil, etc.) take care of that\n      return if value.nil? || value == \"\"\n\n      # We'll cast the value to a string,\n      # alternatively we could just ignore non `String?` values.\n      value = value.to_s\n\n      # If all the characters of this string are alphanumeric, then it is valid\n      return if value.each_char.all? &amp;.alphanumeric?\n\n      # Otherwise, it is invalid and we need to add a violation,\n      # see `AVD::ExecutionContextInterface` for additional information.\n      self.context.add_violation constraint.message, NOT_ALPHANUMERIC_ERROR, value\n    end\n  end\nend\n\nputs AVD.validator.validate \"$\", AVD::Constraints::AlphaNumeric.new # =&gt;\n# $:\n#   This value should contain only alphanumeric characters. (code: 1a83a8bd-ff79-4d5c-96e7-86d0b25b8a09)\n</code></pre> <p>Note</p> <p>The constraint MUST be defined within the <code>AVD::Constraints</code> namespace for implementation reasons.  This may change in the future.</p> <p>We are now able to use this constraint as we would one of the built in ones; either by manually instantiating it, or applying an <code>@[Assert::AlphaNumeric]</code> annotation to a property.</p> <p>See <code>AVD::ConstraintValidatorInterface</code> for more information on custom validators.</p>"},{"location":"Validator/#Athena::Validator--validation-groups","title":"Validation Groups","text":"<p>By default when validating an object, all constraints defined on that type will be checked. However, in some cases you may only want to validate the object against some of those constraints. This can be accomplished via assigning each constraint to a validation group, then apply validation against one specific group of constraints.</p> <p>For example, using our <code>User</code> class from earlier, say we only want to validate certain properties when the user is first created. To do this we can utilize the <code>groups</code> argument that all constraints have.</p> <pre><code>class User\n  include AVD::Validatable\n\n  def initialize(@email : String, @password : String, @city : String); end\n\n  @[Assert::Email(groups: \"create\")]\n  getter email : String\n\n  @[Assert::NotBlank(groups: \"create\")]\n  @[Assert::Size(7.., groups: \"create\")]\n  getter password : String\n\n  @[Assert::Size(2..)]\n  getter city : String\nend\n\nuser = User.new \"george@dietrich.app\", \"monkey123\", \"\"\n\n# Validate the user object, but only for those in the \"create\" group,\n# if no groups are supplied, then all constraints in the \"default\" group will be used.\nviolations = AVD.validator.validate user, groups: \"create\"\n\n# There are no violations since the city's size is not validated since it's not in the \"create\" group.\nviolations.empty? # =&gt; true\n</code></pre> <p>See <code>AVD::Constraint@validation-groups</code> for some expanded information.</p>"},{"location":"Validator/#Athena::Validator--sequential-validation","title":"Sequential Validation","text":"<p>By default, all constraints are validated in a single \"batch\".  I.e. all constraints within the provided group(s) are validated, without regard to if the previous/next constraint is/was (in)valid.  However, an <code>AVD::Constraints::GroupSequence</code> can be used to validate batches of constraints in steps. I.e. validate the first \"batch\" of constraints, and only advance to the next batch if all constraints in that step are valid.</p> <pre><code>@[Assert::GroupSequence(\"User\", \"Secondary\")]\nclass User\n  include AVD::Validatable\n\n  @[Assert::NotBlank]\n  getter username : String\n\n  @[Assert::NotBlank(groups: \"Secondary\")]\n  getter password : String\n\n  def initialize(@username : String, @password : String); end\nend\n\n# Instantiate a new `User` object where both properties are invalid.\nuser = User.new \"\", \"\"\n\n# Notice there is only one violation since there was a violation in the `User` group,\n# it did not advance to the `Secondary` group.\nAVD.validator.validate user # =&gt;\n# Object(User).username:\n#   This value should not be blank. (code: 0d0c3254-3642-4cb0-9882-46ee5918e6e3)\n</code></pre>"},{"location":"Validator/#Athena::Validator--group-sequence-providers","title":"Group Sequence Providers","text":"<p>The <code>AVD::Constraints::GroupSequence</code> can be a useful tool for creating efficient validations, but it is quite limiting since the sequence is static on the type. If more flexibility is required the <code>AVD::Constraints::GroupSequence::Provider</code> module can be included into a type. The module allows the object to return the sequence it should use dynamically at runtime.</p> <pre><code>class User\n  include AVD::Validatable\n  include AVD::Constraints::GroupSequence::Provider\n\n  # ...\n\n  def group_sequence : Array(Array(String) | String) | AVD::Constraints::GroupSequence\n    # Build out and return the sequence `self` should use.\n  end\nend\n</code></pre> <p>Alternatively, if you only want to apply constraints sequentially on a single property, the <code>AVD::Constraints::Sequentially</code> constraint can be used to do this in a simpler way.</p> <p>Note</p> <p>See the related types for more detailed information.</p>"},{"location":"Validator/#Athena::Validator-constants","title":"Constants","text":""},{"location":"Validator/#Athena::Validator::VERSION","title":"<code>VERSION = \"0.3.2\"</code>","text":""},{"location":"Validator/#Athena::Validator-class-methods","title":"Class methods","text":""},{"location":"Validator/#Athena::Validator.validator","title":"<code>.validator : AVD::Validator::ValidatorInterface</code>","text":"<p>Returns a new <code>AVD::Validator::ValidatorInterface</code>.</p> <pre><code>validator = AVD.validator\n\nvalidator.validate \"foo\", AVD::Constraints::NotBlank.new\n</code></pre> View source"},{"location":"Validator/aliases/","title":"Aliases","text":""},{"location":"Validator/aliases/#Assert","title":"alias <code>Assert</code>","text":"<p>Used to apply constraints to instance variables and types via annotations.</p> <p><pre><code>@[Assert::NotBlank]\nproperty name : String\n</code></pre> NOTE: Constraints, including custom ones, are automatically added to this namespace.</p> Alias definition <code>Athena::Validator::Annotations</code>"},{"location":"Validator/aliases/#AVD","title":"alias <code>AVD</code>","text":"<p>Convenience alias to make referencing <code>Athena::Validator</code> types easier.</p> Alias definition <code>Athena::Validator</code>"},{"location":"Validator/Constraint/","title":"Constraint","text":""},{"location":"Validator/Constraint/#Athena::Validator::Constraint","title":"abstract class <code>Athena::Validator::Constraint</code> inherits <code>Reference</code>","text":"<p><code>Athena::Validator</code> validates values/objects against a set of constraints, i.e. rules. Each constraint makes an assertive statement that some condition is true. Given a value, a constraint will tell you if that value adheres to the rules of the constraint. An example of this could be asserting a value is not blank, or greater than or equal to another value.</p> <p>It's important to note a constraint does not implement the validation logic itself. Instead, this is handled via an <code>AVD::ConstraintValidator</code> as defined via <code>#validated_by</code>. Having this abstraction allows for better reusability and testability.</p> <p><code>Athena::Validator</code> comes with a set of common constraints built in. See the individual types within <code>AVD::Constraints</code> for more information.</p>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint--usage","title":"Usage","text":"<p>A constraint can be instantiated and passed to a validator directly:</p> <pre><code># An array of constraints can also be passed.\nAVD.validator.validate \"\", AVD::Constraints::NotBlank.new\n</code></pre> <p>Constraint annotation(s) can also be applied to instance variables to assert the value of that property adheres to the constraint.</p> <pre><code>class Example\n  include AVD::Validatable\n\n  def initialize(@name : String); end\n\n  # More than one constraint can be applied to a property.\n  @[Assert::NotBlank]\n  property name : String\nend\n\n# Constraints are extracted from the annotations.\n# An array can also be passed to validate against that list instead.\nAVD.validator.validate Example.new(\"Jim\")\n</code></pre> <p>Constraints can also be added manually via code by defining an <code>self.load_metadata(metadata : AVD::Metadata::ClassMetadata) : Nil</code> method and adding the constraints directly to the <code>AVD::Metadata::ClassMetadata</code> instance.</p> <pre><code># This class method is invoked when building the metadata associated with a type,\n# and can be used to manually wire up the constraints.\ndef self.load_metadata(metadata : AVD::Metadata::ClassMetadata) : Nil\n  metadata.add_property_constraint \"name\", AVD::Constraints::NotBlank.new\nend\n</code></pre> <p>The metadata for each type is lazily loaded when an instance of that type is validated, and is only built once.</p>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint--arguments","title":"Arguments","text":"<p>While most constraints can be instantiated with an argless constructor,they do have a set of optional arguments. * The <code>message</code> argument represents the message that should be used if the value is found to not be valid. The message can also include placeholders, in the form of <code>{{ key }}</code>, that will be replaced when the message is rendered. Most commonly this includes the invalid value itself, but some constraints have additional placeholders. * The <code>payload</code> argument can be used to attach any domain specific data to the constraint; such as attaching a severity with each constraint to have more serious violations be handled differently.  See the Payload section. * The <code>groups</code> argument can be used to run a subset of the defined constraints.  More on this in the Validation Groups section.</p> <p>For example:</p> <p><pre><code>validator = AVD.validator\n\n# Instantiate a constraint with a custom message, using a placeholder.\nviolations = validator.validate -4, AVD::Constraints::PositiveOrZero.new message: \"{{ value }} is not a valid age.  A user cannot have a negative age.\"\n\nputs violations # =&gt;\n# -4:\n#   -4 is not a valid age.  A user cannot have a negative age. (code: e09e52d0-b549-4ba1-8b4e-420aad76f0de)\n</code></pre> Customizing the message can be a good way for those consuming the errors to determine WHY a given value is not valid.</p>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint--default-argument","title":"Default Argument","text":"<p>The first argument of the constructor is known as the default argument. This argument is special when using the annotation based approach in that it can be supplied as a positional argument within the annotation.</p> <p>For example the default argument for <code>AVD::Constraints::GreaterThan</code> is the value that the value being validated should be compared against.</p> <p>Thus:</p> <pre><code>@[Assert::GreaterThan(0)]\nproperty age : Int32\n</code></pre> <p>Is equivalent to:</p> <pre><code>@[Assert::GreaterThan(value: 0)]\nproperty age : Int32\n</code></pre> <p>Note</p> <p>Only the first argument can be supplied positionally, all other arguments must be provided as named arguments within the annotation.</p>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint--message-plurality","title":"Message Plurality","text":"<p><code>Athena::Validator</code> has very basic support for pluralizing constraint <code>#message</code>s via <code>AVD::Violation::ConstraintViolationInterface#plural</code>.</p> <p>For example the <code>#message</code> could have different versions based on the plurality of the violation. Currently this only supports two contexts: singular (1/nil) and plural (2+).</p> <p>Multiple messages, separated by a <code>|</code>, can be included as part of an <code>AVD::Constraint</code> message. For example from <code>AVD::Constraints::Size</code>:</p> <p><code>min_message : String = \"This value is too short. It should have {{ limit }} {{ type }} or more.|This value is too short. It should have {{ limit }} {{ type }}s or more.\"</code></p> <p>If violations' <code>#plural</code> method returns <code>1</code> (or <code>nil</code>) the first message will be used.  If <code>#plural</code> is <code>2</code> or more, the latter message will be used.</p> <p>Todo</p> <p>Support more robust translations; like language or multiple pluralities.</p>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint--payload","title":"Payload","text":"<p>The <code>payload</code> argument defined on every <code>AVD::Constraint</code> type can be used to store custom domain specific information with a constraint. This data can later be retrieved off of an <code>AVD::Violation::ConstraintViolationInterface</code>. An example use case for this could be mapping a \"severity\" to a CSS class based on how important each specific constraint is.</p> <pre><code>class User\n  include AVD::Validatable\n\n  def initialize(@email : String, @password : String); end\n\n  @[Assert::NotBlank(payload: {\"severity\" =&gt; \"error\"})]\n  getter email : String\n\n  @[Assert::NotBlank(payload: {\"severity\" =&gt; \"warning\"})]\n  getter password : String\nend\n\nviolations = AVD.validator.validate User.new \"\", \"\"\n\n# Use this when rendering HTML, or JSON to allow dynamically customizing the response object.\nviolations[0].constraint.payload # =&gt; {\"severity\" =&gt; \"error\"}\nviolations[1].constraint.payload # =&gt; {\"severity\" =&gt; \"warning\"}\n</code></pre>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint--validation-groups","title":"Validation Groups","text":"<p>The <code>groups</code> argument defined on every <code>AVD::Constraint</code> type can be used to run a subset of validations.</p> <p>For example, say we only want to validate certain properties when the user is first created:</p> <pre><code>class User\n  include AVD::Validatable\n\n  def initialize(@email : String, @password : String, @city : String); end\n\n  @[Assert::Email(groups: \"create\")]\n  getter email : String\n\n  @[Assert::NotBlank(groups: \"create\")]\n  @[Assert::Size(7.., groups: \"create\")]\n  getter password : String\n\n  @[Assert::Size(2..)]\n  getter city : String\nend\n\nuser = User.new \"george@dietrich.app\", \"monkey123\", \"\"\n\n# Validate the user object, but only for those in the \"create\" group,\n# if no groups are supplied, then all constraints in the \"default\" group will be used.\nviolations = AVD.validator.validate user, groups: \"create\"\n\n# There are no violations since the city's size is not validated since it's not in the \"create\" group.\nviolations.empty? # =&gt; true\n</code></pre> <p>Using this configuration, there are three groups at play within the <code>User</code> class: 1. <code>default</code> - Contains constraints in the current type, and subtypes, that belong to no other group.  I.e. <code>city</code>. 1. <code>User</code> - In this example, equivalent to all constraints in the <code>default</code> group.  See <code>AVD::Constraints::GroupSequence</code>, and the note below. 1. <code>create</code> - A custom group that only contains the constraints explicitly associated with it.  I.e. <code>email</code>, and <code>password</code>.</p> <p>Note</p> <p>When validating just the <code>User</code> object, the <code>default</code> group is equivalent to the <code>User</code> group. However, if the <code>User</code> object has other embedded types using the <code>AVD::Constraints::Valid</code> constraint, then validating the <code>User</code> object with the <code>User</code> group would only validate constraints that are explicitly in the <code>User</code> group within the embedded types.</p> <p>By default, all constraints are validated in a single \"batch\".  I.e. all constraints within the provided group(s) are validated, without regard to if the previous/next constraint is/was (in)valid.  However, an <code>AVD::Constraints::GroupSequence</code> can be used to validate batches of constraints in steps. I.e. validate the first \"batch\" of constraints, and only advance to the next batch if all constraints in that step are valid.</p> <p>Note</p> <p>The payload is not used with the framework itself.</p>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint--custom-constraints","title":"Custom Constraints","text":"<p>If the built in <code>AVD::Constraints</code> are not sufficient to handle validating a given value/object; custom ones can be defined. Let's make a new constraint that asserts a string contains only alphanumeric characters.</p> <p>This is accomplished by first defining a new class within the <code>AVD::Constraints</code> namespace that inherits from <code>AVD::Constraint</code>. Then define a <code>Validator</code> struct within our constraint that inherits from <code>AVD::ConstraintValidator</code> that actually implements the validation logic.</p> <pre><code>class AVD::Constraints::AlphaNumeric &lt; AVD::Constraint\n  # (Optional) A unique error code can also be defined to provide a machine readable identifier for a specific error.\n  NOT_ALPHANUMERIC_ERROR = \"1a83a8bd-ff79-4d5c-96e7-86d0b25b8a09\"\n\n  # (Optional) Allows using the `.error_message(code : String) : String` method with this constraint.\n  @@error_names = {\n    NOT_ALPHANUMERIC_ERROR =&gt; \"NOT_ALPHANUMERIC_ERROR\",\n  }\n\n  # Define an initializer with our default message, and any additional arguments specific to this constraint.\n  def initialize(\n    message : String = \"This value should contain only alphanumeric characters.\",\n    groups : Array(String) | String | Nil = nil,\n    payload : Hash(String, String)? = nil\n  )\n    super message, groups, payload\n  end\n\n  # Define the validator within our constraint that'll contain our validation logic.\n  class Validator &lt; AVD::ConstraintValidator\n    # Define our validate method that accepts the value to be validated, and the constraint.\n    #\n    # Overloads can be used to filter values of specific types.\n    def validate(value : _, constraint : AVD::Constraints::AlphaNumeric) : Nil\n      # Custom constraints should ignore nil and empty values to allow\n      # other constraints (NotBlank, NotNil, etc.) take care of that\n      return if value.nil? || value == \"\"\n\n      # We'll cast the value to a string,\n      # alternatively we could just ignore non `String?` values.\n      value = value.to_s\n\n      # If all the characters of this string are alphanumeric, then it is valid\n      return if value.each_char.all? &amp;.alphanumeric?\n\n      # Otherwise, it is invalid and we need to add a violation,\n      # see `AVD::ExecutionContextInterface` for additional information.\n      self.context.add_violation constraint.message, NOT_ALPHANUMERIC_ERROR, value\n    end\n  end\nend\n\nputs AVD.validator.validate \"$\", AVD::Constraints::AlphaNumeric.new # =&gt;\n# $:\n#   This value should contain only alphanumeric characters. (code: 1a83a8bd-ff79-4d5c-96e7-86d0b25b8a09)\n</code></pre> <p>Note</p> <p>The constraint MUST be defined within the <code>AVD::Constraints</code> namespace for implementation reasons.  This may change in the future.</p> <p>We are now able to use this constraint as we would one of the built in ones; either by manually instantiating it, or applying an <code>@[Assert::AlphaNumeric]</code> annotation to a property.</p> <p>See <code>AVD::ConstraintValidatorInterface</code> for more information on custom validators.</p> <p>Note</p> <p>The <code>AVD::Constraints::Compound</code> constraint can be used to create a constraint that consists of one or more other constraints.</p> Direct known subclasses <code>Athena::Validator::Constraints::Blank</code> <code>Athena::Validator::Constraints::Callback</code> <code>Athena::Validator::Constraints::Choice</code> <code>Athena::Validator::Constraints::Composite</code> <code>Athena::Validator::Constraints::Email</code> <code>Athena::Validator::Constraints::EqualTo(ValueType)</code> <code>Athena::Validator::Constraints::File</code> <code>Athena::Validator::Constraints::GreaterThan(ValueType)</code> <code>Athena::Validator::Constraints::GreaterThanOrEqual(ValueType)</code> <code>Athena::Validator::Constraints::IP</code> <code>Athena::Validator::Constraints::ISBN</code> <code>Athena::Validator::Constraints::IsFalse</code> <code>Athena::Validator::Constraints::ISIN</code> <code>Athena::Validator::Constraints::IsNil</code> <code>Athena::Validator::Constraints::ISSN</code> <code>Athena::Validator::Constraints::IsTrue</code> <code>Athena::Validator::Constraints::LessThan(ValueType)</code> <code>Athena::Validator::Constraints::LessThanOrEqual(ValueType)</code> <code>Athena::Validator::Constraints::Luhn</code> <code>Athena::Validator::Constraints::NotBlank</code> <code>Athena::Validator::Constraints::NotEqualTo(ValueType)</code> <code>Athena::Validator::Constraints::NotNil</code> <code>Athena::Validator::Constraints::Range</code> <code>Athena::Validator::Constraints::Regex</code> <code>Athena::Validator::Constraints::Size</code> <code>Athena::Validator::Constraints::Unique</code> <code>Athena::Validator::Constraints::URL</code> <code>Athena::Validator::Constraints::Valid</code> <code>Athena::Validator::Spec::FailingConstraint</code>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint-constants","title":"Constants","text":""},{"location":"Validator/Constraint/#Athena::Validator::Constraint::DEFAULT_GROUP","title":"<code>DEFAULT_GROUP = \"default\"</code>","text":"<p>The group that <code>self</code> is a part of if no other group(s) are explicitly defined.</p>"},{"location":"Validator/Constraint/#Athena::Validator::Constraint-constructors","title":"Constructors","text":""},{"location":"Validator/Constraint/#Athena::Validator::Constraint.new(message,groups,payload)","title":"<code>.new(message : String, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraint/#Athena::Validator::Constraint-class-methods","title":"Class methods","text":""},{"location":"Validator/Constraint/#Athena::Validator::Constraint.error_name(error_code)","title":"<code>.error_name(error_code : String) : String</code>","text":"<p>Returns the name of the provided error_code.</p> View source"},{"location":"Validator/Constraint/#Athena::Validator::Constraint-methods","title":"Methods","text":""},{"location":"Validator/Constraint/#Athena::Validator::Constraint#add_implicit_group(group)","title":"<code>#add_implicit_group(group : String) : Nil</code>","text":"<p>Adds the provided group to <code>#groups</code> if <code>self</code> is in the <code>AVD::Constraint::DEFAULT_GROUP</code>.</p> View source"},{"location":"Validator/Constraint/#Athena::Validator::Constraint#groups","title":"<code>#groups : Array(String)</code>","text":"<p>Returns the validation groups <code>self</code> is a part of.</p> View source"},{"location":"Validator/Constraint/#Athena::Validator::Constraint#groups=(groups)","title":"<code>#groups=(groups : Array(String))</code>","text":"<p>Sets the validation groups <code>self</code> is a part of.</p> View source"},{"location":"Validator/Constraint/#Athena::Validator::Constraint#message","title":"<code>#message : String</code>","text":"<p>Returns the message that should be rendered if <code>self</code> is found to be invalid.</p> <p>Note</p> <p>Some subtypes do not use this and instead define multiple message properties in order to support more specific error messages.</p> View source"},{"location":"Validator/Constraint/#Athena::Validator::Constraint#payload","title":"<code>#payload : Hash(String, String) | ::Nil</code>","text":"<p>Returns any domain specific data associated with <code>self</code>.</p> View source"},{"location":"Validator/Constraint/#Athena::Validator::Constraint#validated_by","title":"abstract <code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/ConstraintValidator/","title":"ConstraintValidator","text":""},{"location":"Validator/ConstraintValidator/#Athena::Validator::ConstraintValidator","title":"abstract class <code>Athena::Validator::ConstraintValidator</code> inherits <code>Reference</code>","text":"<p>Basic implementation of <code>AVD::ConstraintValidatorInterface</code>.</p> Included modules <code>Athena::Validator::ConstraintValidatorInterface</code> Direct known subclasses <code>Athena::Validator::Constraints::All::Validator</code> <code>Athena::Validator::Constraints::AtLeastOneOf::Validator</code> <code>Athena::Validator::Constraints::Blank::Validator</code> <code>Athena::Validator::Constraints::Callback::Validator</code> <code>Athena::Validator::Constraints::Choice::Validator</code> <code>Athena::Validator::Constraints::Collection::Validator</code> <code>Athena::Validator::Constraints::ComparisonValidator</code> <code>Athena::Validator::Constraints::Compound::Validator</code> <code>Athena::Validator::Constraints::Email::Validator</code> <code>Athena::Validator::Constraints::File::Validator</code> <code>Athena::Validator::Constraints::IP::Validator</code> <code>Athena::Validator::Constraints::ISBN::Validator</code> <code>Athena::Validator::Constraints::IsFalse::Validator</code> <code>Athena::Validator::Constraints::ISIN::Validator</code> <code>Athena::Validator::Constraints::IsNil::Validator</code> <code>Athena::Validator::Constraints::ISSN::Validator</code> <code>Athena::Validator::Constraints::IsTrue::Validator</code> <code>Athena::Validator::Constraints::Luhn::Validator</code> <code>Athena::Validator::Constraints::NotBlank::Validator</code> <code>Athena::Validator::Constraints::NotNil::Validator</code> <code>Athena::Validator::Constraints::Range::Validator</code> <code>Athena::Validator::Constraints::Regex::Validator</code> <code>Athena::Validator::Constraints::Sequentially::Validator</code> <code>Athena::Validator::Constraints::Size::Validator</code> <code>Athena::Validator::Constraints::Unique::Validator</code> <code>Athena::Validator::Constraints::URL::Validator</code> <code>Athena::Validator::Constraints::Valid::Validator</code> <code>Athena::Validator::ServiceConstraintValidator</code> <code>Athena::Validator::Spec::FailingConstraint::Validator</code>"},{"location":"Validator/ConstraintValidator/#Athena::Validator::ConstraintValidator-methods","title":"Methods","text":""},{"location":"Validator/ConstraintValidator/#Athena::Validator::ConstraintValidator#context","title":"<code>#context : AVD::ExecutionContextInterface</code>","text":"<p>Returns the a reference to the <code>AVD::ExecutionContextInterface</code> to which violations within <code>self</code> should be added.</p> <p>See the type for more information.</p> View source"},{"location":"Validator/ConstraintValidator/#Athena::Validator::ConstraintValidator#raise_invalid_type(value,supported_types)","title":"<code>#raise_invalid_type(value : _, supported_types : String) : NoReturn</code>","text":"<p>Can be used to raise an <code>AVD::Exceptions::UnexpectedValueError</code> in case <code>self</code> is only able to validate values of the supported_types.</p> <pre><code># Define a validate method to catch values of other types.\n# Overloads above would handle the valid types.\ndef validate(value : _, constraint : AVD::Constraints::MyConstraint) : Nil\n  self.raise_invalid_type value, \"Int | Float\"\nend\n</code></pre> <p>This would result in a violation with the message <code>This value should be a valid: Int | Float</code> being added to the current <code>#context</code>.</p> View source"},{"location":"Validator/ConstraintValidator/#Athena::Validator::ConstraintValidator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraint) : Nil</code>","text":"<p>Validate the provided value against the provided constraint.</p> <p>Violations should be added to the current <code>#context</code>.</p> View source"},{"location":"Validator/ConstraintValidatorFactory/","title":"ConstraintValidatorFactory","text":""},{"location":"Validator/ConstraintValidatorFactory/#Athena::Validator::ConstraintValidatorFactory","title":"struct <code>Athena::Validator::ConstraintValidatorFactory</code> inherits <code>Struct</code>","text":"<p>Basic implementation of <code>AVD::ConstraintValidatorFactoryInterface</code>.</p> Included modules <code>Athena::Validator::ConstraintValidatorFactoryInterface</code>"},{"location":"Validator/ConstraintValidatorFactory/#Athena::Validator::ConstraintValidatorFactory-methods","title":"Methods","text":""},{"location":"Validator/ConstraintValidatorFactory/#Athena::Validator::ConstraintValidatorFactory#validator(for)","title":"<code>#validator(for validator_class : AVD::ServiceConstraintValidator.class) : AVD::ConstraintValidator</code>","text":"<p>Returns an <code>AVD::ConstraintValidator</code> based on the provided validator_class.</p> <p>Note</p> <p>This overloaded is intended to be used for service based validators that are already instantiated and were provided via DI.</p> View source"},{"location":"Validator/ConstraintValidatorFactory/#Athena::Validator::ConstraintValidatorFactory#validator(for)","title":"<code>#validator(for validator_class : AVD::ConstraintValidator.class) : AVD::ConstraintValidator</code>","text":"<p>Returns an <code>AVD::ConstraintValidator</code> based on the provided validator_class.</p> View source"},{"location":"Validator/ConstraintValidatorFactoryInterface/","title":"ConstraintValidatorFactoryInterface","text":""},{"location":"Validator/ConstraintValidatorFactoryInterface/#Athena::Validator::ConstraintValidatorFactoryInterface","title":"module <code>Athena::Validator::ConstraintValidatorFactoryInterface</code>","text":"<p>Provides validator instances based on a validator class, caching the instance.</p> <p><code>AVD::ServiceConstraintValidator</code>s are instantiated externally and injected into the factory.</p> Direct including types <code>Athena::Validator::ConstraintValidatorFactory</code>"},{"location":"Validator/ConstraintValidatorFactoryInterface/#Athena::Validator::ConstraintValidatorFactoryInterface-methods","title":"Methods","text":""},{"location":"Validator/ConstraintValidatorFactoryInterface/#Athena::Validator::ConstraintValidatorFactoryInterface#validator(for)","title":"abstract <code>#validator(for validator_class : AVD::ConstraintValidator.class) : AVD::ConstraintValidatorInterface</code>","text":"<p>Returns an <code>AVD::ConstraintValidatorInterface</code> instance based on the provided validator_class.</p> View source"},{"location":"Validator/ConstraintValidatorInterface/","title":"ConstraintValidatorInterface","text":""},{"location":"Validator/ConstraintValidatorInterface/#Athena::Validator::ConstraintValidatorInterface","title":"module <code>Athena::Validator::ConstraintValidatorInterface</code>","text":"<p>A constraint validator is responsible for implementing the actual validation logic for a given <code>AVD::Constraint</code>.</p> <p>Constraint validators should inherit from this type and implement a <code>#validate</code> method. Most commonly the validator type will be defined within the namespace of the related <code>AVD::Constraint</code> itself.</p> <p>The <code>#validate</code> method itself does not return anything. Violations are added to the current <code>#context</code>, either as a single error message, or augmented with additional metadata about the failure. See <code>AVD::ExecutionContextInterface</code> for more information on how violations can be added.</p>"},{"location":"Validator/ConstraintValidatorInterface/#Athena::Validator::ConstraintValidatorInterface--example","title":"Example","text":"<pre><code>class AVD::Constraints::MyConstraint &lt; AVD::Constraint\n  # Initializer/etc for the constraint\n\n  class Validator &lt; AVD::ConstraintValidator\n    # Define a validate method that handles values of any type, and our `MyConstraint` constraint.\n    def validate(value : _, constraint : AVD::Constraints::MyConstraint) : Nil\n      # Implement logic to determine if the value is valid.\n      # Violations should be added to the current `#context`,\n      # See `AVD::ExecutionContextInterface` for more information.\n    end\n  end\nend\n</code></pre> <p>Overloads of the <code>#validate</code> method can also be used to handle validating values of different types independently. If the value cannot be handled by any of <code>self</code>'s validators, it is handled via <code>AVD::ConstraintValidator#validate</code> and is essentially a noop.</p> <p>If a <code>AVD::Constraint</code> can only support values of certain types, <code>AVD::ConstraintValidator#raise_invalid_type</code> in a catchall overload can be used to add an invalid type <code>AVD::Violation::ConstraintViolationInterface</code>.</p> <pre><code>class Validator &lt; AVD::ConstraintValidator\n  def validate(value : Number, constraint : AVD::Constraints::MyConstraint) : Nil\n    # Handle validating `Number` values\n  end\n\n  def validate(value : Time, constraint : AVD::Constraints::MyConstraint) : Nil\n    # Handle validating `Time` values\n  end\n\n  def validate(value : _, constraint : AVD::Constraints::MyConstraint) : Nil\n    # Add an invalid type violation for values of all other types.\n    self.raise_invalid_type value, \"Number | Time\"\n  end\nend\n</code></pre> <p>Note</p> <p>Normally custom validators should not handle <code>nil</code> or <code>blank</code> values as they are handled via other constraints.</p>"},{"location":"Validator/ConstraintValidatorInterface/#Athena::Validator::ConstraintValidatorInterface--service-based-validators","title":"Service Based Validators","text":"<p>If you're using <code>Athena::Validator</code> within the Athena ecosystem, constraint validators can also be defined as services if they require external dependencies. See <code>AVD::ServiceConstraintValidator</code> and the validator component documentation in the external documentation for more information.</p> Direct including types <code>Athena::Validator::ConstraintValidator</code>"},{"location":"Validator/ConstraintValidatorInterface/#Athena::Validator::ConstraintValidatorInterface-methods","title":"Methods","text":""},{"location":"Validator/ConstraintValidatorInterface/#Athena::Validator::ConstraintValidatorInterface#context","title":"abstract <code>#context : AVD::ExecutionContextInterface</code>","text":"<p>Returns the a reference to the <code>AVD::ExecutionContextInterface</code> to which violations within <code>self</code> should be added.</p> <p>See the type for more information.</p> View source"},{"location":"Validator/ConstraintValidatorInterface/#Athena::Validator::ConstraintValidatorInterface#validate(value,constraint)","title":"abstract <code>#validate(value : _, constraint : AVD::Constraint) : Nil</code>","text":"<p>Validate the provided value against the provided constraint.</p> <p>Violations should be added to the current <code>#context</code>.</p> View source"},{"location":"Validator/Constraints/","title":"Constraints","text":""},{"location":"Validator/Constraints/#Athena::Validator::Constraints","title":"module <code>Athena::Validator::Constraints</code>","text":"<p>Contains all of the built in <code>AVD::Constraint</code>s. See each individual constraint for more information. The <code>Assert</code> alias is used to apply these constraints via annotations.</p>"},{"location":"Validator/Constraints/AbstractComparison/","title":"AbstractComparison","text":""},{"location":"Validator/Constraints/AbstractComparison/#Athena::Validator::Constraints::AbstractComparison","title":"module <code>Athena::Validator::Constraints::AbstractComparison(ValueType)</code>","text":"<p>Defines common logic for comparison based constraints, such as <code>AVD::Constraints::GreaterThan</code>, or <code>AVD::Constraints::EqualTo</code>.</p> Direct including types <code>Athena::Validator::Constraints::EqualTo(ValueType)</code> <code>Athena::Validator::Constraints::GreaterThan(ValueType)</code> <code>Athena::Validator::Constraints::GreaterThanOrEqual(ValueType)</code> <code>Athena::Validator::Constraints::LessThan(ValueType)</code> <code>Athena::Validator::Constraints::LessThanOrEqual(ValueType)</code> <code>Athena::Validator::Constraints::NotEqualTo(ValueType)</code>"},{"location":"Validator/Constraints/AbstractComparison/#Athena::Validator::Constraints::AbstractComparison-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/AbstractComparison/#Athena::Validator::Constraints::AbstractComparison.new(value,message,groups,payload)","title":"<code>.new(value : ValueType, message : String = default_error_message, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/AbstractComparison/#Athena::Validator::Constraints::AbstractComparison-methods","title":"Methods","text":""},{"location":"Validator/Constraints/AbstractComparison/#Athena::Validator::Constraints::AbstractComparison#default_error_message","title":"abstract <code>#default_error_message : String</code>","text":"<p>Returns the <code>AVD::Constraint#message</code> for this constraint.</p> View source"},{"location":"Validator/Constraints/AbstractComparison/#Athena::Validator::Constraints::AbstractComparison#value","title":"<code>#value : ValueType</code>","text":"<p>Returns the expected value.</p> View source"},{"location":"Validator/Constraints/AbstractComparison/#Athena::Validator::Constraints::AbstractComparison#value_type","title":"<code>#value_type : ValueType.class</code>","text":"<p>Returns the type of the expected value.</p> View source"},{"location":"Validator/Constraints/All/","title":"All","text":""},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All","title":"class <code>Athena::Validator::Constraints::All</code> inherits <code>Athena::Validator::Constraints::Composite</code>","text":"<p>Validates each element of an <code>Iterable</code> is valid based on a collection of constraints.</p>"},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All--constraints","title":"constraints","text":"<p>Type: <code>Array(AVD::Constraint) | AVD::Constraint</code></p> <p>The <code>AVD::Constraint</code>(s) that you want to apply to each element of the underlying iterable.</p>"},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All--optional-arguments","title":"Optional Arguments","text":"<p>Note</p> <p>This constraint does not support a <code>message</code> argument.</p>"},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All--usage","title":"Usage","text":"<pre><code>class Example\n  include AVD::Validatable\n\n  def initialize(@strings : Array(String)); end\n\n  # Assert each string is not blank and is at least 5 characters long.\n  @[Assert::All([\n    @[Assert::NotBlank],\n    @[Assert::Size(5..)],\n  ])]\n  getter strings : Array(String)\nend\n</code></pre> <p>Note</p> <p>The annotation approach only supports two levels of nested annotations. Manually wire up the constraint via code if you require more than that.</p>"},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All.new(constraints,groups,payload)","title":"<code>.new(constraints : AVD::Constraints::Composite::Type, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All-methods","title":"Methods","text":""},{"location":"Validator/Constraints/All/#Athena::Validator::Constraints::All#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/All/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/All/Validator/#Athena::Validator::Constraints::All::Validator","title":"class <code>Athena::Validator::Constraints::All::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/All/Validator/#Athena::Validator::Constraints::All::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/All/Validator/#Athena::Validator::Constraints::All::Validator#validate(value,constraint)","title":"<code>#validate(value : Hash | Nil, constraint : AVD::Constraints::All) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/All/Validator/#Athena::Validator::Constraints::All::Validator#validate(value,constraint)","title":"<code>#validate(value : Indexable | Nil, constraint : AVD::Constraints::All) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/All/Validator/#Athena::Validator::Constraints::All::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::All) : NoReturn</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/AtLeastOneOf/","title":"AtLeastOneOf","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf","title":"class <code>Athena::Validator::Constraints::AtLeastOneOf</code> inherits <code>Athena::Validator::Constraints::Composite</code>","text":"<p>Validates that a value satisfies at least one of the provided constraints. Validation stops as soon as one constraint is satisfied.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--constraints","title":"constraints","text":"<p>Type: <code>Array(AVD::Constraint) | AVD::Constraint</code></p> <p>The <code>AVD::Constraint</code>(s) from which at least one of has to be satisfied in order for the validation to succeed.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--include_internal_messages","title":"include_internal_messages","text":"<p>Type: <code>Bool</code> Default: <code>true</code></p> <p>If the validation failed message should include the list of messages for the internal constraints. See the message argument for an example.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--message_collection","title":"message_collection","text":"<p>Type: <code>String</code> Default: <code>Each element of this collection should satisfy its own set of constraints.</code></p> <p>The message that will be shown if validation fails and the internal constraint is an <code>AVD::Constraints::All</code>. See the message argument for an example.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should satisfy at least one of the following constraints:</code></p> <p>The intro that will be shown if validation fails. By default, it'll be followed by the list of messages from the internal constraints; configurable via the include_internal_messages argument.</p> <p>For example, if the <code>grades</code> property in the example below fails to validate, the message will be:</p> <p>This value should satisfy at least one of the following constraints: [1] This value is too short. It should have 3 items or more. [2] Each element of this collection should satisfy its own set of constraints.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf--usage","title":"Usage","text":"<pre><code>class Example\n  include AVD::Validatable\n\n  def initialize(@password : String, @grades : Array(Int32)); end\n\n  # Asserts the password contains an `#` or is at least 10 characters long.\n  @[Assert::AtLeastOneOf([\n    @[Assert::Regex(/#/)],\n    @[Assert::Size(10..)],\n  ])]\n  getter password : String\n\n  # Asserts the `grades` array contains at least 3 elements or\n  # that each element is greater than or equal to 5.\n  @[Assert::AtLeastOneOf([\n    @[Assert::Size(3..)],\n    @[Assert::All([\n      @[Assert::GreaterThanOrEqual(5)],\n    ])],\n  ])]\n  getter grades : Array(Int32)\nend\n</code></pre> <p>Note</p> <p>The annotation approach only supports two levels of nested annotations. Manually wire up the constraint via code if you require more than that.</p>"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf-constants","title":"Constants","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf::AT_LEAST_ONE_OF_ERROR","title":"<code>AT_LEAST_ONE_OF_ERROR = \"811994eb-b634-42f5-ae98-13eec66481b6\"</code>","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf::DEFAULT_ERROR_MESSAGE","title":"<code>DEFAULT_ERROR_MESSAGE = \"This value should satisfy at least one of the following constraints:\"</code>","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf.new(constraints,include_internal_messages,message_collection,message,groups,payload)","title":"<code>.new(constraints : AVD::Constraints::Composite::Type, include_internal_messages : Bool = true, message_collection : String = \"Each element of this collection should satisfy its own set of constraints.\", message : String = \"This value should satisfy at least one of the following constraints:\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf-methods","title":"Methods","text":""},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf#include_internal_messages?","title":"<code>#include_internal_messages? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf#message_collection","title":"<code>#message_collection : String</code>","text":"View source"},{"location":"Validator/Constraints/AtLeastOneOf/#Athena::Validator::Constraints::AtLeastOneOf#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/AtLeastOneOf/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/AtLeastOneOf/Validator/#Athena::Validator::Constraints::AtLeastOneOf::Validator","title":"class <code>Athena::Validator::Constraints::AtLeastOneOf::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/AtLeastOneOf/Validator/#Athena::Validator::Constraints::AtLeastOneOf::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/AtLeastOneOf/Validator/#Athena::Validator::Constraints::AtLeastOneOf::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::AtLeastOneOf) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Blank/","title":"Blank","text":""},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank","title":"class <code>Athena::Validator::Constraints::Blank</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is blank; meaning equal to an empty string or <code>nil</code>.</p>"},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be blank.</code></p> <p>The message that will be shown if the value is not blank.</p>"},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank::NOT_BLANK_ERROR","title":"<code>NOT_BLANK_ERROR = \"c815f901-c581-4fb7-a85d-b8c5bc757959\"</code>","text":""},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be blank.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Blank/#Athena::Validator::Constraints::Blank#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Blank/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Blank/Validator/#Athena::Validator::Constraints::Blank::Validator","title":"class <code>Athena::Validator::Constraints::Blank::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Blank/Validator/#Athena::Validator::Constraints::Blank::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Blank/Validator/#Athena::Validator::Constraints::Blank::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Blank) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Callback/","title":"Callback","text":""},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback","title":"class <code>Athena::Validator::Constraints::Callback</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Allows creating totally custom validation rules, assigning any violations to specific fields on your object. This process is achieved via using one or more callback methods which will be invoked during the validation process.</p> <p>Note</p> <p>The callback method itself does fail or return any value. Instead it should directly add violations to the <code>AVD::ExecutionContextInterface</code> argument.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--callback","title":"callback","text":"<p>Type: <code>AVD::Constraints::Callback::CallbackProc?</code> Default: <code>nil</code></p> <p>The proc that should be invoked as the callback for this constraint.</p> <p>Note</p> <p>If this argument is not supplied, the callback_name argument must be.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--callback_name","title":"callback_name","text":"<p>Type: <code>String?</code> Default: <code>nil</code></p> <p>The name of the method that should be invoked as the callback for this constraint.</p> <p>Note</p> <p>If this argument is not supplied, the callback argument must be.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--optional-arguments","title":"Optional Arguments","text":"<p>Note</p> <p>This constraint does not support a <code>message</code> argument.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--usage","title":"Usage","text":"<p>The callback constraint supports two callback methods when validating objects, and one callback method when using the constraint directly.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--instance-methods","title":"Instance Methods","text":"<p>To define an instance callback method, apply the <code>@[Assert::Callback]</code> method to a public instance method defined within an object. This method should accept two arguments: the <code>AVD::ExecutionContextInterface</code> to which violations should be added, and the <code>AVD::Constraint@payload</code> from the related constraint.</p> <p>More than one callback method can exist on a type, and the method name does not have to be <code>validate</code>.</p> <pre><code>class Example\n  include AVD::Validatable\n\n  SPAM_DOMAINS = [\"fake.com\", \"spam.net\"]\n\n  def initialize(@domain_name : String); end\n\n  @[Assert::Callback]\n  def validate(context : AVD::ExecutionContextInterface, payload : Hash(String, String)?) : Nil\n    # Validate that the `domain_name` is not spammy.\n    return unless SPAM_DOMAINS.includes? @domain_name\n\n    context\n      .build_violation(\"This domain name is not legit!\")\n      .at_path(\"domain_name\")\n      .add\n  end\nend\n</code></pre>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--class-methods","title":"Class Methods","text":"<p>The callback method can also be defined as a class method. Since class methods do not have access to the related object instance, it is passed in as an argument.</p> <p>That argument is typed as <code>AVD::Constraints::Callback::Value</code> instance which exposes a <code>AVD::Constraints::Callback::Value#get</code> method that can be used as an easier syntax than <code>.as</code>.</p> <pre><code>class Example\n  include AVD::Validatable\n\n  SPAM_DOMAINS = [\"fake.com\", \"spam.net\"]\n\n  @[Assert::Callback]\n  def self.validate(value : AVD::Constraints::Callback::ValueContainer, context : AVD::ExecutionContextInterface, payload : Hash(String, String)?) : Nil\n    # Get the object from the value, typed as our `Example` class.\n    object = value.get self\n\n    # Validate that the `domain_name` is not spammy.\n    return unless SPAM_DOMAINS.includes? object.domain_name\n\n    context\n      .build_violation(\"This domain name is not legit!\")\n      .at_path(\"domain_name\")\n      .add\n  end\n\n  def initialize(@domain_name : String); end\n\n  getter domain_name : String\nend\n</code></pre>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback--procsblocks","title":"Procs/Blocks","text":"<p>When working with constraints in a non object context, a callback passed in as a proc/block. <code>AVD::Constraints::Callback::CallbackProc</code> alias can be used to more easily create a callback proc. <code>AVD::Constraints::Callback.with_callback</code> can be used to create a callback constraint, using the block as the callback proc. See the related types for more information.</p> <p>Proc/block based callbacks operate similarly to Class Methods in that they receive the value as an argument.</p>"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback.new(callback,callback_name,groups,payload)","title":"<code>.new(callback : AVD::Constraints::Callback::CallbackProc | Nil = nil, callback_name : String | Nil = nil, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback-class-methods","title":"Class methods","text":""},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback.with_callback(**,&)","title":"<code>.with_callback : AVD::Constraints::Callback</code>","text":"<p>Convenience method for creating a <code>AVD::Constraints::Callback</code> with the given &amp;block as the callback.</p> <pre><code># Instantiate a callback constraint, using the block as the callback\nconstraint = AVD::Constraints::Callback.with_callback do |value, context, payload|\n  next if (value = value.get(Int32)).even?\n\n  context.add_violation \"This value should be even.\"\nend\n</code></pre> View source"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback#callback","title":"<code>#callback : AVD::Constraints::Callback::CallbackProc | ::Nil</code>","text":"<p>Returns the proc that this constraint should invoke.</p> View source"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback#callback_name","title":"<code>#callback_name : String | ::Nil</code>","text":"<p>Returns the name of the callback method this constraint should invoke.</p> View source"},{"location":"Validator/Constraints/Callback/#Athena::Validator::Constraints::Callback#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Callback/CallbackProc/","title":"CallbackProc","text":""},{"location":"Validator/Constraints/Callback/CallbackProc/#Athena::Validator::Constraints::Callback::CallbackProc","title":"alias <code>Athena::Validator::Constraints::Callback::CallbackProc</code>","text":"<p>Convenience alias to make creating <code>AVD::Constraints::Callback</code> procs easier.</p> <pre><code># Create a proc to handle the validation\ncallback = AVD::Constraints::Callback::CallbackProc.new do |value, context, payload|\n  return if (value = value.get(Int32)).even?\n\n  context.add_violation \"This value should be even.\"\nend\n\n# Instantiate a callback constraint with this proc\nconstraint = AVD::Constraints::Callback.new callback: callback\n</code></pre> Alias definition <code>Athena::Validator::Constraints::Callback::ValueContainer, Athena::Validator::ExecutionContextInterface, Hash(String, String)? -&gt; Nil</code>"},{"location":"Validator/Constraints/Callback/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Callback/Validator/#Athena::Validator::Constraints::Callback::Validator","title":"class <code>Athena::Validator::Constraints::Callback::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Callback/Validator/#Athena::Validator::Constraints::Callback::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Callback/Validator/#Athena::Validator::Constraints::Callback::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Callback) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Callback/Value/","title":"Value","text":""},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value","title":"struct <code>Athena::Validator::Constraints::Callback::Value(T)</code> inherits <code>Athena::Validator::Constraints::Callback::ValueContainer</code>","text":"<p>Wrapper type to allow passing arbitrarily typed values as arguments in the <code>AVD::Constraints::Callback::CallbackProc</code>.</p>"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value.new(value)","title":"<code>.new(value : T)</code>","text":"View source"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value#==(other)","title":"<code>#==(other) : Bool</code>","text":"<p>Returns <code>true</code> if this struct is equal to other.</p> <p>Both structs' instance vars are compared to each other. Thus, two structs are considered equal if each of their instance variables are equal. Subclasses should override this method to provide specific equality semantics.</p> <pre><code>struct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np2 = Point.new 1, 2\np3 = Point.new 3, 4\n\np1 == p2 # =&gt; true\np1 == p3 # =&gt; false\n</code></pre> View source"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value#clone","title":"<code>#clone</code>","text":"View source"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value#copy_with(value)","title":"<code>#copy_with(value _value = @value)</code>","text":"View source"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value#get(as)","title":"<code>#get(as _t : T.class) : T forall T</code>","text":"<p>Returns the value as <code>T</code>.</p> <p>If used inside a <code>AVD::Constraints::Callback@class-method</code>.</p> <pre><code># Get the wrapped value as the type of the current class.\nobject = value.get self\n</code></pre> <p>If used inside a <code>AVD::Constraints::Callback@procsblocks</code>. ```</p> View source"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value#get(as)--get-the-wrapped-value-as-the-expected-type","title":"Get the wrapped value as the expected type.","text":"<p>value = value.get Int32</p>"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value#get(as)--alternatively-can-use-normal-crystal-semantics-for-narrowing-the-type","title":"Alternatively, can use normal Crystal semantics for narrowing the type.","text":"<p>value = value.value</p> <p>case value when Int32 then \"value is Int32\" when String then \"value is String\" end</p>"},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value#value","title":"<code>#value : T</code>","text":""},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value-macros","title":"Macros","text":""},{"location":"Validator/Constraints/Callback/Value/#Athena::Validator::Constraints::Callback::Value:method_missing(call)","title":"<code>method_missing(call)</code>","text":"View source"},{"location":"Validator/Constraints/Choice/","title":"Choice","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice","title":"class <code>Athena::Validator::Constraints::Choice</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is one of a given set of valid choices; can also be used to validate that each item in a collection is one of those valid values.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--choices","title":"choices","text":"<p>Type: <code>Array(String | Number::Primitive | Symbol)</code></p> <p>The choices that are considered valid.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid choice.</code></p> <p>The message that will be shown if the value is not a valid choice and multiple is <code>false</code>.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ choices }}</code> - The available choices.</li> </ul>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--multiple_message","title":"multiple_message","text":"<p>Type: <code>String</code> Default: <code>One or more of the given values is invalid.</code></p> <p>The message that will be shown if one of the values is not a valid choice and multiple is <code>true</code>.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--placeholders_1","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ choices }}</code> - The available choices.</li> </ul>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--min_message","title":"min_message","text":"<p>Type: <code>String</code> Default: <code>You must select at least {{ limit }} choice.|You must select at least {{ limit }} choices.</code></p> <p>The message that will be shown if too few choices are chosen as per the range option.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--placeholders_2","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ choices }}</code> - The available choices.</li> <li><code>{{ limit }}</code> - If multiple is true, enforces that at most this many values may be selected in order to be valid.</li> </ul>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--max_message","title":"max_message","text":"<p>Type: <code>String</code> Default: <code>You must select at most {{ limit }} choice.|You must select at most {{ limit }} choices.</code></p> <p>The message that will be shown if too many choices are chosen as per the range option.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--placeholders_3","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ choices }}</code> - The available choices.</li> <li><code>{{ limit }}</code> - If multiple is true, enforces that no more than this many values may be selected in order to be valid.</li> </ul>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--range","title":"range","text":"<p>Type: <code>::Range?</code> Default: <code>nil</code></p> <p>If multiple is true, is used to define the \"range\" of how many choices must be valid for the value to be considered valid. For example, if set to <code>(3..)</code>, but there are only 2 valid items in the input enumerable then validation will fail.</p> <p>Beginless/endless ranges can be used to define only a lower/upper bound.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--multiple","title":"multiple","text":"<p>Type: <code>Bool</code> Default: <code>false</code></p> <p>If <code>true</code>, the input value is expected to be an <code>Enumerable</code> instead of a single scalar value. The constraint will check each item in the enumerable is valid choice.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice::NO_SUCH_CHOICE_ERROR","title":"<code>NO_SUCH_CHOICE_ERROR = \"c7398ea5-e787-4ee9-9fca-5f2c130614d6\"</code>","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice::TOO_FEW_ERROR","title":"<code>TOO_FEW_ERROR = \"3573357d-c9a8-4633-a742-c001086fd5aa\"</code>","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice::TOO_MANY_ERROR","title":"<code>TOO_MANY_ERROR = \"91d0d22b-a693-4b9c-8b41-bc6392cf89f4\"</code>","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice.new(choices,message,multiple_message,min_message,max_message,multiple,range,groups,payload)","title":"<code>.new(choices : Array(String | Number::Primitive | Symbol), message : String = \"This value is not a valid choice.\", multiple_message : String = \"One or more of the given values is invalid.\", min_message : String = \"You must select at least {{ limit }} choice.|You must select at least {{ limit }} choices.\", max_message : String = \"You must select at most {{ limit }} choice.|You must select at most {{ limit }} choices.\", multiple : Bool = false, range : ::Range | Nil = nil, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#choices","title":"<code>#choices : Array(String | Number::Primitive | Symbol)</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#max","title":"<code>#max : Number::Primitive | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#max_message","title":"<code>#max_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#min","title":"<code>#min : Number::Primitive | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#min_message","title":"<code>#min_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#multiple?","title":"<code>#multiple? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#multiple_message","title":"<code>#multiple_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Choice/#Athena::Validator::Constraints::Choice#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Choice/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Choice/Validator/#Athena::Validator::Constraints::Choice::Validator","title":"class <code>Athena::Validator::Constraints::Choice::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Choice/Validator/#Athena::Validator::Constraints::Choice::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Choice/Validator/#Athena::Validator::Constraints::Choice::Validator#validate(value,constraint)","title":"<code>#validate(value : Enumerable | Nil, constraint : AVD::Constraints::Choice) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Choice/Validator/#Athena::Validator::Constraints::Choice::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Choice) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Collection/","title":"Collection","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection","title":"class <code>Athena::Validator::Constraints::Collection</code> inherits <code>Athena::Validator::Constraints::Composite</code>","text":"<p>Can be used with any <code>Enumerable({K, V})</code> to validate each key in a different way. For example validating the <code>email</code> key via <code>AVD::Constraints::Email</code>, and the <code>inventory</code> key with the <code>AVD::Constraints::Range</code> constraint. The collection constraint can also ensure that certain collection keys are present and that extra keys are not present.</p> <p>Todo</p> <p>Update it to be <code>Mappable</code> when/if https://github.com/crystal-lang/crystal/issues/10886 is implemented.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--usage","title":"Usage","text":"<pre><code>data = {\n  \"email\"           =&gt; \"...\",\n  \"email_signature\" =&gt; \"...\",\n}\n</code></pre> <p>For example, say you want to ensure the email field is a valid email, and that their email_signature is not blank nor over 100 characters long; without creating a dedicated class to represent the hash.</p> <pre><code>constraint = AVD::Constraints::Collection.new({\n  \"email\"           =&gt; AVD::Constraints::Email.new,\n  \"email_signature\" =&gt; [\n    AVD::Constraints::NotBlank.new,\n    AVD::Constraints::Size.new(..100, max_message: \"Your signature is too long\"),\n  ],\n})\n\nvalidator.validate data, constraint\n</code></pre> <p>The collection constraint expects a hash representing the keys in the collection, with the value being which constraint(s) should be executed against its value. From there we can go ahead and validate our data hash against the constraint.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--presence-and-absence-of-fields","title":"Presence and Absence of Fields","text":"<p>This constraint also will return validation errors if any keys of a collection are missing, or if there are any unrecognized keys in the collection. This can be customized via the allow_extra_fields and allow_missing_fields configuration options respectively.</p> <p>If the latter was set to <code>true</code>, then either email or email_signature could be missing from the data hash, and no validation errors would occur.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--required-and-optional-constraints","title":"Required and Optional Constraints","text":"<p>Each field in the collection is assumed to be required by default. While you could make everything optional via the setting allow_missing_fields to <code>true</code>, this is less than ideal in some cases when you only want to affect a single key, or a subset of keys.</p> <p>In this case, a single constraint, or array of constraints, can be wrapped via the <code>AVD::Constraints::Optional</code> or <code>AVD::Constraints::Required</code> constraints. For example, if you wanted to require that the personal_email field is not blank and is a valid email, but also have an optional alternate_email field that must be a valid email if supplied, you could set things up like:</p> <pre><code>constraint = AVD::Constraints::Collection.new({\n  \"personal_email\" =&gt; AVD::Constraints::Required.new([\n    AVD::Constraints::NotBlank.new,\n    AVD::Constraints::Email.new,\n  ]),\n  \"alternate_email\" =&gt; AVD::Constraints::Optional.new([\n    AVD::Constraints::Email.new,\n  ] of AVD::Constraint),\n})\n</code></pre> <p>In this way, even if allow_missing_fields is <code>true</code>, you would be able to omit alternate_email since it is optional. However, since personal_email is required, the not blank assertion will still be applied and a violation will occur if it is missing.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--groups","title":"Groups","text":"<p>Any groups defined in nested constraints are automatically added to the collection constraint itself such that it can be traversed for all nested groups.</p> <pre><code>constraint = AVD::Constraints::Collection.new({\n  \"name\"  =&gt; AVD::Constraints::NotBlank.new(groups: \"basic\"),\n  \"email\" =&gt; AVD::Constraints::NotBlank.new(groups: \"contact\"),\n})\n\nconstraint.groups # =&gt; [\"basic\", \"contact\"]\n</code></pre> <p>Tip</p> <p>The collection constraint can be used to validate form data via a URI::Param instance.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--fields","title":"fields","text":"<p>Type: <code>Hash(String, AVD::Constraint | Array(AVD::Constraint))</code></p> <p>A hash defining the keys in the collection, and for which constraint(s) should be executed against them.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--allow_extra_fields","title":"allow_extra_fields","text":"<p>Type: <code>Bool</code> Default: <code>false</code></p> <p>If extra fields in the collection other than those defined within fields are allowed. By default extra fields will result in a validation error.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--allow_missing_fields","title":"allow_missing_fields","text":"<p>Type: <code>Bool</code> Default: <code>false</code></p> <p>If the fields defined within fields are allowed to be missing. By default a validation error will be returned if one or more field is missing.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--extra_fields_message","title":"extra_fields_message","text":"<p>Type: <code>String</code> Default: <code>This field was not expected.</code></p> <p>The message that will be shown if allow_extra_fields is <code>false</code> and a field in the collection was not defined within <code>#fields</code>.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ field }}</code> - The name of the extra field.</li> </ul>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--missing_fields_message","title":"missing_fields_message","text":"<p>Type: <code>String</code> Default: <code>This field is missing.</code></p> <p>The message that will be shown if allow_missing_fields is <code>false</code> and a field defined within <code>#fields</code> is missing from the collection.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--placeholders_1","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ field }}</code> - The name of the missing field.</li> </ul>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--groups_1","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection::MISSING_FIELD_ERROR","title":"<code>MISSING_FIELD_ERROR = \"af103ee5-3bcb-448e-98ad-b4ef76c05060\"</code>","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection::NO_SUCH_FIELD_ERROR","title":"<code>NO_SUCH_FIELD_ERROR = \"70e60467-4078-4f92-acf9-d1e6683d0922\"</code>","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection.new(fields,allow_extra_fields,allow_missing_fields,extra_fields_message,missing_fields_message,groups,payload)","title":"<code>.new(fields : Hash(String, AVD::Constraint | Array(AVD::Constraint)), allow_extra_fields : Bool = false, allow_missing_fields : Bool = false, extra_fields_message : String = \"This field was not expected.\", missing_fields_message : String = \"This field is missing.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection#allow_extra_fields?","title":"<code>#allow_extra_fields? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection#allow_missing_fields?","title":"<code>#allow_missing_fields? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection#extra_fields_message","title":"<code>#extra_fields_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection#missing_fields_message","title":"<code>#missing_fields_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Collection/#Athena::Validator::Constraints::Collection#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Collection/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Collection/Validator/#Athena::Validator::Constraints::Collection::Validator","title":"class <code>Athena::Validator::Constraints::Collection::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Collection/Validator/#Athena::Validator::Constraints::Collection::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Collection/Validator/#Athena::Validator::Constraints::Collection::Validator#validate(value,constraint)","title":"<code>#validate(value : Enumerable(Tuple(K, V)) | Nil, constraint : AVD::Constraints::Collection) : Nil forall K, V</code>","text":"<p>:inherit:</p> <p>Todo</p> <p>Support https://github.com/crystal-lang/crystal/issues/10886 when/if implemented.</p> View source"},{"location":"Validator/Constraints/Collection/Validator/#Athena::Validator::Constraints::Collection::Validator#validate(actual,expected)","title":"<code>#validate(actual : _, expected : _) : NoReturn</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/ComparisonValidator/","title":"ComparisonValidator","text":""},{"location":"Validator/Constraints/ComparisonValidator/#Athena::Validator::Constraints::ComparisonValidator","title":"abstract class <code>Athena::Validator::Constraints::ComparisonValidator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":"<p>Defines common logic for comparison based constraint validators.</p> Direct known subclasses <code>Athena::Validator::Constraints::EqualTo::Validator</code> <code>Athena::Validator::Constraints::GreaterThan::Validator</code> <code>Athena::Validator::Constraints::GreaterThanOrEqual::Validator</code> <code>Athena::Validator::Constraints::LessThan::Validator</code> <code>Athena::Validator::Constraints::LessThanOrEqual::Validator</code> <code>Athena::Validator::Constraints::NotEqualTo::Validator</code>"},{"location":"Validator/Constraints/ComparisonValidator/#Athena::Validator::Constraints::ComparisonValidator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ComparisonValidator/#Athena::Validator::Constraints::ComparisonValidator#compare_values(actual,expected)","title":"abstract <code>#compare_values(actual : _, expected : _) : Bool</code>","text":"<p>Returns <code>true</code> if the provided actual and expected values are compatible, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Constraints/ComparisonValidator/#Athena::Validator::Constraints::ComparisonValidator#error_code","title":"abstract <code>#error_code : String</code>","text":"<p>Returns the expected error code for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/ComparisonValidator/#Athena::Validator::Constraints::ComparisonValidator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::AbstractComparison) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Composite/","title":"Composite","text":""},{"location":"Validator/Constraints/Composite/#Athena::Validator::Constraints::Composite","title":"abstract class <code>Athena::Validator::Constraints::Composite</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>A constraint composed of other constraints. handles normalizing the groups of the nested constraints, via the following algorithm:</p> <ul> <li>If groups are passed explicitly to the composite constraint, but   not to the nested constraints, the options of the composite   constraint are copied to the nested constraints</li> <li>If groups are passed explicitly to the nested constraints, but not   to the composite constraint, the groups of all nested constraints   are merged and used as groups for the composite constraint</li> <li>If groups are passed explicitly to both the composite and its nested   constraints, the groups of the nested constraints must be a subset   of the groups of the composite constraint.</li> </ul> <p>Note</p> <p>You most likely want to use <code>AVD::Constraints::Compound</code> instead of this type.</p> Direct known subclasses <code>Athena::Validator::Constraints::All</code> <code>Athena::Validator::Constraints::AtLeastOneOf</code> <code>Athena::Validator::Constraints::Collection</code> <code>Athena::Validator::Constraints::Compound</code> <code>Athena::Validator::Constraints::Existence</code> <code>Athena::Validator::Constraints::Sequentially</code>"},{"location":"Validator/Constraints/Composite/#Athena::Validator::Constraints::Composite-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Composite/#Athena::Validator::Constraints::Composite.new(constraints,message,groups,payload)","title":"<code>.new(constraints : AVD::Constraints::Composite::Type, message : String, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Composite/#Athena::Validator::Constraints::Composite-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Composite/#Athena::Validator::Constraints::Composite#add_implicit_group(group)","title":"<code>#add_implicit_group(group : String) : Nil</code>","text":"<p>Adds the provided group to <code>#groups</code> if <code>self</code> is in the <code>AVD::Constraint::DEFAULT_GROUP</code>.</p> View source"},{"location":"Validator/Constraints/Composite/#Athena::Validator::Constraints::Composite#constraints","title":"<code>#constraints : Enumerable(::Tuple(String | Int32, AVD::Constraint))</code>","text":"View source"},{"location":"Validator/Constraints/Composite/Type/","title":"Type","text":""},{"location":"Validator/Constraints/Composite/Type/#Athena::Validator::Constraints::Composite::Type","title":"alias <code>Athena::Validator::Constraints::Composite::Type</code>","text":"Alias definition <code>Array(Athena::Validator::Constraint) | Athena::Validator::Constraint | Enumerable({Int32 | String, Athena::Validator::Constraint})</code>"},{"location":"Validator/Constraints/Compound/","title":"Compound","text":""},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound","title":"abstract class <code>Athena::Validator::Constraints::Compound</code> inherits <code>Athena::Validator::Constraints::Composite</code>","text":"<p>Allows creating a custom set of reusable constraints, representing rules to use consistently across your application.</p> <p>Note</p> <p>See the custom constraint documentation for information on defining custom constraints.</p>"},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound--optional-arguments","title":"Optional Arguments","text":"<p>Note</p> <p>This constraint does not support a <code>message</code> argument.</p>"},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound--usage","title":"Usage","text":"<p>This constraint is not used directly on its own; instead it's used to create another constraint.</p> <pre><code># Define a compound constraint to centralize the logic to validate a password.\n#\n# NOTE: The constraint _MUST_ be defined within the `AVD::Constraints` namespace for implementation reasons.  This may change in the future.\nclass AVD::Constraints::ValidPassword &lt; AVD::Constraints::Compound\n  # Define a method that returns an array of the constraints we want to be a part of `self`.\n  def constraints : Type\n    [\n      AVD::Constraints::NotBlank.new,       # Not empty/null\n      AVD::Constraints::Size.new(12..),     # At least 12 characters longs\n      AVD::Constraints::Regex.new(/^\\d.*/), # Must start with a number\n    ]\n  end\nend\n</code></pre> <p>We can then use this constraint as we would any other.</p> <p>Either as an annotation</p> <p><pre><code>@[Assert::ValidPassword]\ngetter password : String\n</code></pre> or directly.</p> <pre><code>constraint = AVD::Constraints::ValidPassword.new\n</code></pre>"},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound.new(groups,payload)","title":"<code>.new(groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound#constraints","title":"abstract <code>#constraints : AVD::Constraints::Composite::Type</code>","text":"View source"},{"location":"Validator/Constraints/Compound/#Athena::Validator::Constraints::Compound#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Compound/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Compound/Validator/#Athena::Validator::Constraints::Compound::Validator","title":"class <code>Athena::Validator::Constraints::Compound::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Compound/Validator/#Athena::Validator::Constraints::Compound::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Compound/Validator/#Athena::Validator::Constraints::Compound::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Compound) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Email/","title":"Email","text":""},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email","title":"class <code>Athena::Validator::Constraints::Email</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is a valid email address. The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email--mode","title":"mode","text":"<p>Type: <code>AVD::Constraints::Email::Mode</code> Default: <code>AVD::Constraints::Email::Mode::HTML5</code></p> <p>Defines the pattern that should be used to validate the email address.</p>"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid email address.</code></p> <p>The message that will be shown if the value is not a valid email address.</p>"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email::INVALID_FORMAT_ERROR","title":"<code>INVALID_FORMAT_ERROR = \"ad9d877d-9ad1-4dd7-b77b-e419934e5910\"</code>","text":""},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email.new(mode,message,groups,payload)","title":"<code>.new(mode : AVD::Constraints::Email::Mode = :html5, message : String = \"This value is not a valid email address.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email#mode","title":"<code>#mode : AVD::Constraints::Email::Mode</code>","text":"View source"},{"location":"Validator/Constraints/Email/#Athena::Validator::Constraints::Email#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Email/Mode/","title":"Mode","text":""},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode","title":"enum <code>Athena::Validator::Constraints::Email::Mode</code>","text":"<p>Determines how the email address should be validated.</p>"},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode-members","title":"Members","text":""},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode::HTML5","title":"<code>HTML5 = 0</code>","text":"<p>Validates the email against the HTML5 input pattern, but requires a TLD to be present.</p>"},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode::HTML5_ALLOW_NO_TLD","title":"<code>HTML5_ALLOW_NO_TLD = 1</code>","text":"<p>Same as <code>HTML5</code>, but follows the pattern exactly, allowing there to be no TLD.</p>"},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode#html5?","title":"<code>#html5?</code>","text":"View source"},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode#html5_allow_no_tld?","title":"<code>#html5_allow_no_tld?</code>","text":"View source"},{"location":"Validator/Constraints/Email/Mode/#Athena::Validator::Constraints::Email::Mode#pattern","title":"<code>#pattern : ::Regex</code>","text":"<p>Returns the <code>::Regex</code> pattern for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Email/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Email/Validator/#Athena::Validator::Constraints::Email::Validator","title":"class <code>Athena::Validator::Constraints::Email::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Email/Validator/#Athena::Validator::Constraints::Email::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Email/Validator/#Athena::Validator::Constraints::Email::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Email) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/EqualTo/","title":"EqualTo","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo","title":"class <code>Athena::Validator::Constraints::EqualTo(ValueType)</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is equal to another.</p>"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--value","title":"value","text":"<p>Defines the value that the value being validated should be compared to.</p>"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be equal to {{ compared_value }}.</code></p> <p>The message that will be shown if the value is not equal to the comparison value.</p>"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p> Included modules <code>Athena::Validator::Constraints::AbstractComparison</code>"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo-constants","title":"Constants","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo::NOT_EQUAL_ERROR","title":"<code>NOT_EQUAL_ERROR = \"47d83d11-15d5-4267-b469-1444f80fd169\"</code>","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo.new(value,message,groups,payload)","title":"<code>.new(value : ValueType, message : String = default_error_message, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo-methods","title":"Methods","text":""},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo#default_error_message","title":"<code>#default_error_message : String</code>","text":"<p>Returns the <code>AVD::Constraint#message</code> for this constraint.</p> View source"},{"location":"Validator/Constraints/EqualTo/#Athena::Validator::Constraints::EqualTo#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/EqualTo/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/EqualTo/Validator/#Athena::Validator::Constraints::EqualTo::Validator","title":"class <code>Athena::Validator::Constraints::EqualTo::Validator</code> inherits <code>Athena::Validator::Constraints::ComparisonValidator</code>","text":""},{"location":"Validator/Constraints/EqualTo/Validator/#Athena::Validator::Constraints::EqualTo::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/EqualTo/Validator/#Athena::Validator::Constraints::EqualTo::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : _, expected : _) : Bool</code>","text":"<p>Returns <code>true</code> if the provided actual and expected values are compatible, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Constraints/EqualTo/Validator/#Athena::Validator::Constraints::EqualTo::Validator#error_code","title":"<code>#error_code : String</code>","text":"<p>Returns the expected error code for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Existence/","title":"Existence","text":""},{"location":"Validator/Constraints/Existence/#Athena::Validator::Constraints::Existence","title":"abstract class <code>Athena::Validator::Constraints::Existence</code> inherits <code>Athena::Validator::Constraints::Composite</code>","text":"<p>See AVD::Constraints::Collection for more information.</p> Direct known subclasses <code>Athena::Validator::Constraints::Optional</code> <code>Athena::Validator::Constraints::Required</code>"},{"location":"Validator/Constraints/Existence/#Athena::Validator::Constraints::Existence-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Existence/#Athena::Validator::Constraints::Existence.new(constraints,groups,payload)","title":"<code>.new(constraints : Array(AVD::Constraint) | AVD::Constraint = [] of AVD::Constraint, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/File/","title":"File","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File","title":"class <code>Athena::Validator::Constraints::File</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is a valid file. If the underlying value is a ::File, then its path is used as the value. Otherwise the value is converted to a string via <code>#to_s</code> before being validated, which is assumed to be a path to a file.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--max_size","title":"max_size","text":"<p>Type: <code>Int | String | Nil</code> Default: <code>nil</code></p> <p>Defines that maximum size the file must be in order to be considered valid. The value may be an integer representing the size in bytes, or a format string in one of the following formats:</p> Suffix Unit Name Value Example (none) byte 1 byte <code>4096</code> <code>k</code> kilobyte 1,000 bytes <code>\"200k\"</code> <code>M</code> megabyte 1,000,000 bytes <code>\"2M\"</code> <code>Ki</code> kibibyte 1,024 bytes <code>\"32Ki\"</code> <code>Mi</code> mebibyte 1,048,576 bytes <code>\"8Mi\"</code>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--mime_types","title":"mime_types","text":"<p>Type: <code>Enumerable(String)?</code> Default: <code>nil</code></p> <p>If set, allows checking that the MIME type of the file is one of an allowed set of types. This value is ignored if the MIME type of the file could not be determined.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--binary_format","title":"binary_format","text":"<p>Type: <code>Bool?</code> Default: <code>nil</code></p> <p>When <code>true</code>, the sizes will be displayed in messages with binary-prefixed units (KiB, MiB). When <code>false</code>, the sizes will be displayed with SI-prefixed units (kB, MB). When <code>nil</code>, then the binaryFormat will be guessed from the value defined in the max_size option.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--max_size_message","title":"max_size_message","text":"<p>Type: <code>String</code> Default: <code>The file is too large ({{ size }} {{ suffix }}). Allowed maximum size is {{ limit }} {{ suffix }}.</code></p> <p>The message that will be shown if the file is greater than the max_size.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ file }}</code> - Absolute path to the invalid file.</li> <li><code>{{ limit }}</code> - Maximum file size allowed.</li> <li><code>{{ name }}</code> - Basename of the invalid file.</li> <li><code>{{ size }}</code> - The size of the invalid file.</li> <li><code>{{ suffix }}</code> - Suffix for the used file size unit.</li> </ul>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--not_found_message","title":"not_found_message","text":"<p>Type: <code>String</code> Default: <code>The file could not be found.</code></p> <p>The message that will be shown if no file could be found at the given path.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--placeholders_1","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ file }}</code> - Absolute path to the invalid file.</li> </ul>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--empty_message","title":"empty_message","text":"<p>Type: <code>String</code> Default: <code>An empty file is not allowed.</code></p> <p>The message that will be shown if the file is empty.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--placeholders_2","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ file }}</code> - Absolute path to the invalid file.</li> <li><code>{{ name }}</code> - Basename of the invalid file.</li> </ul>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--not_readable_message","title":"not_readable_message","text":"<p>Type: <code>String</code> Default: <code>The file is not readable.</code></p> <p>The message that will be shown if the file is not readable.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--placeholders_3","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ file }}</code> - Absolute path to the invalid file.</li> <li><code>{{ name }}</code> - Basename of the invalid file.</li> </ul>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--mime_type_message","title":"mime_type_message","text":"<p>Type: <code>String</code> Default: <code>The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}.</code></p> <p>The message that will be shown if the MIME type of the file is not one of the valid mime_types.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--placeholders_4","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ file }}</code> - Absolute path to the invalid file.</li> <li><code>{{ name }}</code> - Basename of the invalid file.</li> <li><code>{{ type }}</code> - The MIME type of the invalid file.</li> <li><code>{{ types }}</code> - The list of allowed MIME types.</li> </ul>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p> Direct known subclasses <code>Athena::Validator::Constraints::Image</code>"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File-constants","title":"Constants","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File::EMPTY_ERROR","title":"<code>EMPTY_ERROR = \"de1a4b3c-a69f-46bd-b017-4a60361a1765\"</code>","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File::INVALID_MIME_TYPE_ERROR","title":"<code>INVALID_MIME_TYPE_ERROR = \"96c8591c-e990-48f6-b82b-75c878ae9fd9\"</code>","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File::NOT_FOUND_ERROR","title":"<code>NOT_FOUND_ERROR = \"b6ae563c-4aec-4dfa-b268-2bb282912ed8\"</code>","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File::NOT_READABLE_ERROR","title":"<code>NOT_READABLE_ERROR = \"e9f18a3d-f968-469f-868e-2331c8c982c2\"</code>","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File::TOO_LARGE_ERROR","title":"<code>TOO_LARGE_ERROR = \"4ce61d7c-43a0-44c2-bfe0-a59072b6cd17\"</code>","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File.new(max_size,binary_format,mime_types,not_found_message,not_readable_message,empty_message,max_size_message,mime_type_message,groups,payload)","title":"<code>.new(max_size : Int | String | Nil = nil, binary_format : Bool | Nil = nil, mime_types : Enumerable(String) | Nil = nil, not_found_message : String = \"The file could not be found.\", not_readable_message : String = \"The file is not readable.\", empty_message : String = \"An empty file is not allowed.\", max_size_message : String = \"The file is too large ({{ size }} {{ suffix }}). Allowed maximum size is {{ limit }} {{ suffix }}.\", mime_type_message : String = \"The mime type of the file is invalid ({{ type }}). Allowed mime types are {{ types }}.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File-methods","title":"Methods","text":""},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#binary_format?","title":"<code>#binary_format? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#empty_message","title":"<code>#empty_message : String</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#max_size","title":"<code>#max_size : Int64 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#max_size_message","title":"<code>#max_size_message : String</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#mime_type_message","title":"<code>#mime_type_message : String</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#mime_types","title":"<code>#mime_types : Set(String) | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#not_found_message","title":"<code>#not_found_message : String</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#not_readable_message","title":"<code>#not_readable_message : String</code>","text":"View source"},{"location":"Validator/Constraints/File/#Athena::Validator::Constraints::File#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/File/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/File/Validator/#Athena::Validator::Constraints::File::Validator","title":"class <code>Athena::Validator::Constraints::File::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":"Direct known subclasses <code>Athena::Validator::Constraints::Image::Validator</code>"},{"location":"Validator/Constraints/File/Validator/#Athena::Validator::Constraints::File::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/File/Validator/#Athena::Validator::Constraints::File::Validator#factorize_sizes(size,limit,binary_format)","title":"<code>#factorize_sizes(size : Int, limit : Int, binary_format : Bool) : Tuple(String, String, String)</code>","text":"<p>Todo</p> <p>Can we use <code>#humaize_bytes</code> for this?</p> View source"},{"location":"Validator/Constraints/File/Validator/#Athena::Validator::Constraints::File::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::File) : Nil</code>","text":"<p>:inherit: ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Validator/Constraints/GreaterThan/","title":"GreaterThan","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan","title":"class <code>Athena::Validator::Constraints::GreaterThan(ValueType)</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is greater than another.</p>"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--value","title":"value","text":"<p>Type: <code>Number | String | Time</code></p> <p>Defines the value that the value being validated should be compared to.</p>"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be greater than {{ compared_value }}.</code></p> <p>The message that will be shown if the value is not greater than the comparison value.</p>"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p> Included modules <code>Athena::Validator::Constraints::AbstractComparison</code> Direct known subclasses <code>Athena::Validator::Constraints::Positive</code>"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan-constants","title":"Constants","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan::TOO_LOW_ERROR","title":"<code>TOO_LOW_ERROR = \"a221096d-d125-44e8-a865-4270379ac11a\"</code>","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan.new(value,message,groups,payload)","title":"<code>.new(value : ValueType, message : String = default_error_message, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan-methods","title":"Methods","text":""},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan#default_error_message","title":"<code>#default_error_message : String</code>","text":"<p>Returns the <code>AVD::Constraint#message</code> for this constraint.</p> View source"},{"location":"Validator/Constraints/GreaterThan/#Athena::Validator::Constraints::GreaterThan#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/GreaterThan/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/GreaterThan/Validator/#Athena::Validator::Constraints::GreaterThan::Validator","title":"class <code>Athena::Validator::Constraints::GreaterThan::Validator</code> inherits <code>Athena::Validator::Constraints::ComparisonValidator</code>","text":""},{"location":"Validator/Constraints/GreaterThan/Validator/#Athena::Validator::Constraints::GreaterThan::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/GreaterThan/Validator/#Athena::Validator::Constraints::GreaterThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Number, expected : Number) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThan/Validator/#Athena::Validator::Constraints::GreaterThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : String, expected : String) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThan/Validator/#Athena::Validator::Constraints::GreaterThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Time, expected : Time) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThan/Validator/#Athena::Validator::Constraints::GreaterThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : _, expected : _) : NoReturn</code>","text":"<p>Returns <code>true</code> if the provided actual and expected values are compatible, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Constraints/GreaterThan/Validator/#Athena::Validator::Constraints::GreaterThan::Validator#error_code","title":"<code>#error_code : String</code>","text":"<p>Returns the expected error code for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/","title":"GreaterThanOrEqual","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual","title":"class <code>Athena::Validator::Constraints::GreaterThanOrEqual(ValueType)</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is greater than or equal to another.</p>"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--value","title":"value","text":"<p>Type: <code>Number | String | Time</code></p> <p>Defines the value that the value being validated should be compared to.</p>"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be greater than or equal to {{ compared_value }}.</code></p> <p>The message that will be shown if the value is not greater than or equal to the comparison value.</p>"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p> Included modules <code>Athena::Validator::Constraints::AbstractComparison</code> Direct known subclasses <code>Athena::Validator::Constraints::PositiveOrZero</code>"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual-constants","title":"Constants","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual::TOO_LOW_ERROR","title":"<code>TOO_LOW_ERROR = \"e09e52d0-b549-4ba1-8b4e-420aad76f0de\"</code>","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual.new(value,message,groups,payload)","title":"<code>.new(value : ValueType, message : String = default_error_message, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual-methods","title":"Methods","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual#default_error_message","title":"<code>#default_error_message : String</code>","text":"<p>Returns the <code>AVD::Constraint#message</code> for this constraint.</p> View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/#Athena::Validator::Constraints::GreaterThanOrEqual#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/#Athena::Validator::Constraints::GreaterThanOrEqual::Validator","title":"class <code>Athena::Validator::Constraints::GreaterThanOrEqual::Validator</code> inherits <code>Athena::Validator::Constraints::ComparisonValidator</code>","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/#Athena::Validator::Constraints::GreaterThanOrEqual::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/#Athena::Validator::Constraints::GreaterThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Number, expected : Number) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/#Athena::Validator::Constraints::GreaterThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : String, expected : String) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/#Athena::Validator::Constraints::GreaterThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Time, expected : Time) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/#Athena::Validator::Constraints::GreaterThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : _, expected : _) : NoReturn</code>","text":"<p>Returns <code>true</code> if the provided actual and expected values are compatible, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Constraints/GreaterThanOrEqual/Validator/#Athena::Validator::Constraints::GreaterThanOrEqual::Validator#error_code","title":"<code>#error_code : String</code>","text":"<p>Returns the expected error code for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/GroupSequence/","title":"GroupSequence","text":""},{"location":"Validator/Constraints/GroupSequence/#Athena::Validator::Constraints::GroupSequence","title":"struct <code>Athena::Validator::Constraints::GroupSequence</code> inherits <code>Struct</code>","text":"<p>Allows validating your <code>AVD::Constraint@validation-groups</code> in steps. I.e. only continue to the next group if all constraints in the first group are valid.</p> <pre><code>@[Assert::GroupSequence(\"User\", \"strict\")]\nclass User\n  include AVD::Validatable\n\n  @[Assert::NotBlank]\n  property name : String\n\n  @[Assert::NotBlank]\n  property password : String\n\n  def initialize(@name : String, @password : String); end\n\n  @[Assert::IsTrue(message: \"Your password cannot be the same as your name.\", groups: \"strict\")]\n  def is_safe_password? : Bool\n    @name != @password\n  end\nend\n</code></pre> <p>In this case, it'll validate the <code>name</code> and <code>password</code> properties are not blank before validating they are not the same. If either property is blank, the <code>is_safe_password?</code> validation will be skipped.</p> <p>Note</p> <p>The <code>default</code> group is not allowed as part of a group sequence.</p> <p>Note</p> <p>Calling <code>validate</code> with a group in the sequence, such as <code>strict</code>, will cause violations to ONLY use that group and not all groups within the sequence. This is because the group sequence is now referred to as the <code>default</code> group.</p> <p>See <code>AVD::Constraints::GroupSequence::Provider</code> for a way to dynamically determine the sequence an object should use.</p>"},{"location":"Validator/Constraints/GroupSequence/#Athena::Validator::Constraints::GroupSequence-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/GroupSequence/#Athena::Validator::Constraints::GroupSequence.new(groups)","title":"<code>.new(groups : Array(String))</code>","text":"View source"},{"location":"Validator/Constraints/GroupSequence/#Athena::Validator::Constraints::GroupSequence.new(groups)","title":"<code>.new(groups : Array(String | Array(String)))</code>","text":"View source"},{"location":"Validator/Constraints/GroupSequence/#Athena::Validator::Constraints::GroupSequence-methods","title":"Methods","text":""},{"location":"Validator/Constraints/GroupSequence/#Athena::Validator::Constraints::GroupSequence#groups","title":"<code>#groups : Array(String | Array(String))</code>","text":"View source"},{"location":"Validator/Constraints/GroupSequence/Provider/","title":"Provider","text":""},{"location":"Validator/Constraints/GroupSequence/Provider/#Athena::Validator::Constraints::GroupSequence::Provider","title":"module <code>Athena::Validator::Constraints::GroupSequence::Provider</code>","text":"<p><code>AVD::Constraints::GroupSequence</code>s can be a good way to create efficient validations. However, since the sequence is static, it is not a very flexible solution.</p> <p>Group sequence providers allow the sequence to be dynamically determined at runtime. This allows running specific validations only when the object is in a specific state, such as validating a \"registered\" user differently than a non-registered user.</p> <pre><code>class User\n  include AVD::Validatable\n\n  # Include the interface that informs the validator this object will provide its sequence.\n  include AVD::Constraints::GroupSequence::Provider\n\n  @[Assert::NotBlank]\n  property name : String\n\n  # Only validate the `email` property if the `#group_sequence` method includes \"registered\"\n  # Which can be determined using the current state of the object.\n  @[Assert::Email(groups: \"registered\")]\n  @[Assert::NotBlank(groups: \"registered\")]\n  property email : String?\n\n  def initialize(@name : String, @email : String); end\n\n  # Define a method that returns the sequence.\n  def group_sequence : Array(String | Array(String)) | AVD::Constraints::GroupSequence\n    # When returning a 1D array, if there is a vaiolation in any group\n    # the rest of the groups are not validated.  E.g. if `User` fails,\n    # `registered` and `api` are not validated:\n    return [\"User\", \"registered\", \"api\"]\n\n    # When returning a nested array, all groups included in each array are validated.\n    # E.g. if `User` fails, `Premium` is also validated (and you'll get its violations),\n    # but `api` will not be validated\n    return [[\"User\", \"registered\"], \"api\"]\n  end\nend\n</code></pre> <p>See <code>AVD::Constraints::Sequentially</code> for a more straightforward method of applying constraints sequentially on a single property.</p> Direct including types <code>Athena::Validator::Spec::EntityGroupSequenceProvider</code> <code>Athena::Validator::Spec::EntitySequenceProvider</code>"},{"location":"Validator/Constraints/GroupSequence/Provider/#Athena::Validator::Constraints::GroupSequence::Provider-methods","title":"Methods","text":""},{"location":"Validator/Constraints/GroupSequence/Provider/#Athena::Validator::Constraints::GroupSequence::Provider#group_sequence","title":"abstract <code>#group_sequence : Array(String | Array(String)) | AVD::Constraints::GroupSequence</code>","text":"View source"},{"location":"Validator/Constraints/IP/","title":"IP","text":""},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP","title":"class <code>Athena::Validator::Constraints::IP</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is a valid IP address. By default validates the value as an <code>IPv4</code> address, but can be customized to validate <code>IPv6</code>s, or both. The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP--version","title":"version","text":"<p>Type: <code>AVD::Constraints::IP::Version</code> Default: <code>AVD::Constraints::IP::Version::V4</code></p> <p>Defines the pattern that should be used to validate the IP address.</p>"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This is not a valid IP address.</code></p> <p>The message that will be shown if the value is not a valid IP address.</p>"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP-constants","title":"Constants","text":""},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP::INVALID_IP_ERROR","title":"<code>INVALID_IP_ERROR = \"326b0aa4-3871-404d-986d-fe3e6c82005c\"</code>","text":""},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP.new(version,message,groups,payload)","title":"<code>.new(version : AVD::Constraints::IP::Version = :v4, message : String = \"This value is not a valid IP address.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/IP/#Athena::Validator::Constraints::IP#version","title":"<code>#version : AVD::Constraints::IP::Version</code>","text":"View source"},{"location":"Validator/Constraints/IP/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/IP/Validator/#Athena::Validator::Constraints::IP::Validator","title":"class <code>Athena::Validator::Constraints::IP::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/IP/Validator/#Athena::Validator::Constraints::IP::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IP/Validator/#Athena::Validator::Constraints::IP::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::IP) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/IP/Version/","title":"Version","text":""},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version","title":"enum <code>Athena::Validator::Constraints::IP::Version</code>","text":"<p>Determines how the IP address should be validated.</p>"},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version-members","title":"Members","text":""},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version::V4","title":"<code>V4 = 0</code>","text":"<p>Validates for <code>IPv4</code> addresses.</p>"},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version::V6","title":"<code>V6 = 1</code>","text":"<p>Validates for <code>IPv6</code> addresses.</p>"},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version::V4_V6","title":"<code>V4_V6 = 2</code>","text":"<p>Validates for <code>IPv4</code> or <code>IPv6</code> addresses.</p>"},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version#v4?","title":"<code>#v4?</code>","text":"View source"},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version#v4_v6?","title":"<code>#v4_v6?</code>","text":"View source"},{"location":"Validator/Constraints/IP/Version/#Athena::Validator::Constraints::IP::Version#v6?","title":"<code>#v6?</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/","title":"ISBN","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN","title":"class <code>Athena::Validator::Constraints::ISBN</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that an International Standard Book Number (ISBN) is either a valid <code>ISBN-10</code> or <code>ISBN-13</code>. The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--type","title":"type","text":"<p>Type: <code>AVD::Constraints::ISBN::Type</code> Default: <code>AVD::Constraints::ISBN::Type::Both</code></p> <p>Type of ISBN to validate against.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>\"\"</code></p> <p>The message that will be shown if the value is invalid. This message has priority over the other messages if not empty.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--isbn10_message","title":"isbn10_message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid ISBN-10.</code></p> <p>The message that will be shown if type is <code>AVD::Constraints::ISBN::Type::ISBN10</code> and the value is invalid.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--placeholders_1","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--isbn13_message","title":"isbn13_message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid ISBN-13.</code></p> <p>The message that will be shown if type is <code>AVD::Constraints::ISBN::Type::ISBN13</code> and the value is invalid.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--placeholders_2","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--both_message","title":"both_message","text":"<p>Type: <code>String</code> Default: <code>This value is neither a valid ISBN-10 nor a valid ISBN-13.</code></p> <p>The message that will be shown if type is <code>AVD::Constraints::ISBN::Type::Both</code> and the value is invalid.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--placeholders_3","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN-constants","title":"Constants","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN::CHECKSUM_FAILED_ERROR","title":"<code>CHECKSUM_FAILED_ERROR = \"f51bae62-6833-43b1-bc27-ae4445c59e30\"</code>","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN::INVALID_CHARACTERS_ERROR","title":"<code>INVALID_CHARACTERS_ERROR = \"25d35907-d822-4bcc-82cc-852e30c89c0d\"</code>","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN::TOO_LONG_ERROR","title":"<code>TOO_LONG_ERROR = \"ebd28c75-bb42-43d6-9053-f0ea2ea93d44\"</code>","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN::TOO_SHORT_ERROR","title":"<code>TOO_SHORT_ERROR = \"5da9e91f-7956-40f7-9788-4124463d783e\"</code>","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN::TYPE_NOT_RECOGNIZED_ERROR","title":"<code>TYPE_NOT_RECOGNIZED_ERROR = \"8d83f04d-2503-4547-97a1-935fcccd1ae1\"</code>","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN.new(type,isbn10_message,isbn13_message,both_message,message,groups,payload)","title":"<code>.new(type : AVD::Constraints::ISBN::Type = :both, isbn10_message : String = \"This value is not a valid ISBN-10.\", isbn13_message : String = \"This value is not a valid ISBN-13.\", both_message : String = \"This value is neither a valid ISBN-10 nor a valid ISBN-13.\", message : String = \"\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN#both_message","title":"<code>#both_message : String</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN#isbn10_message","title":"<code>#isbn10_message : String</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN#isbn13_message","title":"<code>#isbn13_message : String</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN#message","title":"<code>#message : String</code>","text":"<p>Returns the message that should be rendered if <code>self</code> is found to be invalid.</p> <p>Note</p> <p>Some subtypes do not use this and instead define multiple message properties in order to support more specific error messages.</p> View source"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN#type","title":"<code>#type : AVD::Constraints::ISBN::Type</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/#Athena::Validator::Constraints::ISBN#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/ISBN/Type/","title":"Type","text":""},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type","title":"enum <code>Athena::Validator::Constraints::ISBN::Type</code>","text":""},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type-members","title":"Members","text":""},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type::ISBN10","title":"<code>ISBN10 = 0</code>","text":""},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type::ISBN13","title":"<code>ISBN13 = 1</code>","text":""},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type::Both","title":"<code>Both = 2</code>","text":""},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type#both?","title":"<code>#both?</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type#isbn10?","title":"<code>#isbn10?</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type#isbn13?","title":"<code>#isbn13?</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/Type/#Athena::Validator::Constraints::ISBN::Type#message(constraint)","title":"<code>#message(constraint : AVD::Constraints::ISBN) : String</code>","text":"View source"},{"location":"Validator/Constraints/ISBN/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/ISBN/Validator/#Athena::Validator::Constraints::ISBN::Validator","title":"class <code>Athena::Validator::Constraints::ISBN::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/ISBN/Validator/#Athena::Validator::Constraints::ISBN::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ISBN/Validator/#Athena::Validator::Constraints::ISBN::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::ISBN) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/ISIN/","title":"ISIN","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN","title":"class <code>Athena::Validator::Constraints::ISIN</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is a valid International Securities Identification Number (ISIN). The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid International Securities Identification Number (ISIN).</code></p> <p>The message that will be shown if the value is not a valid ISIN.</p>"},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN-constants","title":"Constants","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN::INVALID_CHECKSUM_ERROR","title":"<code>INVALID_CHECKSUM_ERROR = \"c7d37ffb-0273-4f57-91f7-f47bf49aad08\"</code>","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN::INVALID_LENGTH_ERROR","title":"<code>INVALID_LENGTH_ERROR = \"1d1c3fbe-5b6f-42be-afa5-6840655865da\"</code>","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN::INVALID_PATTERN_ERROR","title":"<code>INVALID_PATTERN_ERROR = \"0b6ba8c4-b6aa-44dc-afac-a6f7a9a2556d\"</code>","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN.new(message,groups,payload)","title":"<code>.new(message : String = \"This value is not a valid International Securities Identification Number (ISIN).\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ISIN/#Athena::Validator::Constraints::ISIN#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/ISIN/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/ISIN/Validator/#Athena::Validator::Constraints::ISIN::Validator","title":"class <code>Athena::Validator::Constraints::ISIN::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/ISIN/Validator/#Athena::Validator::Constraints::ISIN::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ISIN/Validator/#Athena::Validator::Constraints::ISIN::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::ISIN) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/ISSN/","title":"ISSN","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN","title":"class <code>Athena::Validator::Constraints::ISSN</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is a valid International Standard Serial Number (ISSN). The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--case_sensitive","title":"case_sensitive","text":"<p>Type: <code>Bool</code> Default: <code>false</code></p> <p>The validator will allow ISSN values to end with a lowercase <code>x</code> by default. When set to <code>true</code>, this requires an uppcase case <code>X</code>.</p>"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--require_hyphen","title":"require_hyphen","text":"<p>Type: <code>Bool</code> Default: <code>false</code></p> <p>The validator will allow non hyphenated values by default. When set to <code>true</code>, this requires a hyphenated ISSN value.</p>"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid International Standard Serial Number (ISSN).</code></p> <p>The message that will be shown if the value is not a valid ISSN.</p>"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN-constants","title":"Constants","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN::CHECKSUM_FAILED_ERROR","title":"<code>CHECKSUM_FAILED_ERROR = \"62c01bab-fe8f-4072-aac8-aa4bdcde8361\"</code>","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN::INVALID_CASE_ERROR","title":"<code>INVALID_CASE_ERROR = \"66f892f3-9eed-4176-b823-0dafde72202a\"</code>","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN::INVALID_CHARACTERS_ERROR","title":"<code>INVALID_CHARACTERS_ERROR = \"85c5d3aa-fd0a-4cd0-8cf7-e014e6379d59\"</code>","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN::MISSING_HYPHEN_ERROR","title":"<code>MISSING_HYPHEN_ERROR = \"d6c120a9-0b56-4e45-b4bc-7fd186f2cfbd\"</code>","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN::TOO_LONG_ERROR","title":"<code>TOO_LONG_ERROR = \"fab8e3ea-2f77-4da7-b40f-d9b24ff8c0cc\"</code>","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN::TOO_SHORT_ERROR","title":"<code>TOO_SHORT_ERROR = \"85c5d3aa-fd0a-4cd0-8cf7-e014e6379d59\"</code>","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN.new(case_sensitive,require_hyphen,message,groups,payload)","title":"<code>.new(case_sensitive : Bool = false, require_hyphen : Bool = false, message : String = \"This value is not a valid International Standard Serial Number (ISSN).\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN#case_sensitive?","title":"<code>#case_sensitive? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN#require_hyphen?","title":"<code>#require_hyphen? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/ISSN/#Athena::Validator::Constraints::ISSN#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/ISSN/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/ISSN/Validator/#Athena::Validator::Constraints::ISSN::Validator","title":"class <code>Athena::Validator::Constraints::ISSN::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/ISSN/Validator/#Athena::Validator::Constraints::ISSN::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/ISSN/Validator/#Athena::Validator::Constraints::ISSN::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::ISSN) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Image/","title":"Image","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image","title":"class <code>Athena::Validator::Constraints::Image</code> inherits <code>Athena::Validator::Constraints::File</code>","text":"<p>An extension of <code>AVD::Constraints::File</code> whose <code>AVD::Constraints::File#mime_types</code> and <code>AVD::Constraints::File#mime_type_message</code> are setup to specifically handle image files. This constraint also provides the ability to validate against various image specific parameters.</p> <p>See <code>AVD::Constraints::File</code> for common documentation.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--mime_types","title":"mime_types","text":"<p>Type: <code>Enumerable(String)?</code> Default: <code>{\"image/*\"}</code></p> <p>Requires the file to have a valid image MIME type. See IANA website for the full listing.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--mime_type_message","title":"mime_type_message","text":"<p>Type: <code>String</code> Default: <code>This file is not a valid image.</code></p> <p>The message that will be shown if the file is not an image.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_height","title":"min_height","text":"<p>Type: <code>Int32</code> Default: <code>nil</code></p> <p>If set, the image's height in pixels must be greater than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_height_message","title":"min_height_message","text":"<p>Type: <code>String</code> Default: <code>The image height is too small ({{ height }}px). Minimum height expected is {{ min_height }}px.</code></p> <p>The message that will be shown if the height of the image is less than <code>#min_height</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ height }}</code> - The current (invalid) height.</li> <li><code>{{ min_height }}</code> - The minimum required height.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_height","title":"max_height","text":"<p>Type: <code>Int32</code> Default: <code>nil</code></p> <p>If set, the image's height in pixels must be less than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_height_message","title":"max_height_message","text":"<p>Type: <code>String</code> Default: <code>The image height is too big ({{ height }}px). Allowed maximum height is {{ max_height }}px.</code></p> <p>The message that will be shown if the height of the image exceeds <code>#max_height</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_1","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ height }}</code> - The current (invalid) height.</li> <li><code>{{ max_height }}</code> - The maximum allowed height.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_width","title":"min_width","text":"<p>Type: <code>Int32</code> Default: <code>nil</code></p> <p>If set, the image's width in pixels must be greater than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_width_message","title":"min_width_message","text":"<p>Type: <code>String</code> Default: <code>The image width is too small ({{ width }}px). Minimum width expected is {{ min_width }}px.</code></p> <p>The message that will be shown if the width of the image is less than <code>#min_width</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_2","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ width }}</code> - The current (invalid) width.</li> <li><code>{{ min_width }}</code> - The minimum required width.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_width","title":"max_width","text":"<p>Type: <code>Int32</code> Default: <code>nil</code></p> <p>If set, the image's width in pixels must be less than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_width_message","title":"max_width_message","text":"<p>Type: <code>String</code> Default: <code>The image width is too big ({{ width }}px). Allowed maximum width is {{ max_width }}px.</code></p> <p>The message that will be shown if the width of the image exceeds <code>#max_width</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_3","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ width }}</code> - The current (invalid) width.</li> <li><code>{{ max_width }}</code> - The maximum allowed width.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--size_not_detected_message","title":"size_not_detected_message","text":"<p>Type: <code>String</code> Default: <code>The size of the image could not be detected.</code></p> <p>The message that will be shown if the size of the image is unable to be determined. Will only occur if at least one of the size related options has been set.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_ratio","title":"min_ratio","text":"<p>Type: <code>Float64</code> Default: <code>nil</code></p> <p>If set, the image's aspect ratio (<code>width / height</code>) must be greater than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_ratio_message","title":"min_ratio_message","text":"<p>Type: <code>String</code> Default: <code>The image ratio is too small ({{ ratio }}). Minimum ratio expected is {{ min_ratio }}.</code></p> <p>The message that will be shown if the aspect ratio of the image is less than <code>#min_ratio</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_4","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ ratio }}</code> - The current (invalid) ratio.</li> <li><code>{{ min_ratio }}</code> - The minimum required ratio.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_ratio","title":"max_ratio","text":"<p>Type: <code>Float64</code> Default: <code>nil</code></p> <p>If set, the image's aspect ratio (<code>width / height</code>) must be less than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_ratio_message","title":"max_ratio_message","text":"<p>Type: <code>String</code> Default: <code>The image ratio is too big ({{ ratio }}). Allowed maximum ratio is {{ max_ratio }}.</code></p> <p>The message that will be shown if the aspect ratio of the image exceeds <code>#max_ratio</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_5","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ ratio }}</code> - The current (invalid) ratio.</li> <li><code>{{ max_ratio }}</code> - The maximum allowed ratio.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_pixels","title":"min_pixels","text":"<p>Type: <code>Float64</code> Default: <code>nil</code></p> <p>If set, the amount of pixels of the image file must be greater than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--min_pixels_message","title":"min_pixels_message","text":"<p>Type: <code>String</code> Default: <code>The image has too few pixels ({{ pixels }} pixels). Minimum amount expected is {{ min_pixels }} pixels.</code></p> <p>The message that will be shown if the amount of pixels of the image is less than <code>#min_pixels</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_6","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ height }}</code> - The image's height.</li> <li><code>{{ width }}</code> - The image's width.</li> <li><code>{{ pixels }}</code> - The image's pixels.</li> <li><code>{{ min_pixels }}</code> - The minimum required pixels.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_pixels","title":"max_pixels","text":"<p>Type: <code>Float64</code> Default: <code>nil</code></p> <p>If set, the amount of pixels of the image file must be less than or equal to this value.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--max_pixels_message","title":"max_pixels_message","text":"<p>Type: <code>String</code> Default: <code>The image has too many pixels ({{ pixels }} pixels). Maximum amount expected is {{ max_pixels }} pixels.</code></p> <p>The message that will be shown if the amount of pixels of the image is greater than <code>#max_pixels</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_7","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ height }}</code> - The image's height.</li> <li><code>{{ width }}</code> - The image's width.</li> <li><code>{{ pixels }}</code> - The image's pixels.</li> <li><code>{{ max_pixels }}</code> - The maximum allowed pixels.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--allow_landscape","title":"allow_landscape","text":"<p>Type: <code>Bool</code> Default: <code>true</code></p> <p>If <code>false</code>, the image cannot be landscape oriented.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--allow_landscape_message","title":"allow_landscape_message","text":"<p>Type: <code>String</code> Default: <code>The image is landscape oriented ({{ width }}x{{ height }}px). Landscape oriented images are not allowed.</code></p> <p>The message that will be shown if the <code>#allow_landscape</code> is <code>false</code> and the image is landscape oriented.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_8","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ height }}</code> - The image's height.</li> <li><code>{{ width }}</code> - The image's width.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--allow_portrait","title":"allow_portrait","text":"<p>Type: <code>Bool</code> Default: <code>true</code></p> <p>If <code>false</code>, the image cannot be portrait oriented.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--allow_portrait_message","title":"allow_portrait_message","text":"<p>Type: <code>String</code> Default: <code>The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.</code></p> <p>The message that will be shown if the <code>#allow_portrait</code> is <code>false</code> and the image is portrait oriented.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_9","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ height }}</code> - The image's height.</li> <li><code>{{ width }}</code> - The image's width.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--allow_square","title":"allow_square","text":"<p>Type: <code>Bool</code> Default: <code>true</code></p> <p>If <code>false</code>, the image cannot be a square. If you want to force the image to be a square, keep this as is and set <code>#allow_landscape</code> and <code>#allow_portrait</code> to <code>false</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--allow_square_message","title":"allow_square_message","text":"<p>Type: <code>String</code> Default: <code>The image is square ({{ width }}x{{ height }}px). Square images are not allowed.</code></p> <p>The message that will be shown if the <code>#allow_square</code> is <code>false</code> and the image is square.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--placeholders_10","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ height }}</code> - The image's height.</li> <li><code>{{ width }}</code> - The image's width.</li> </ul>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::CORRUPTED_IMAGE_ERROR","title":"<code>CORRUPTED_IMAGE_ERROR = \"5d4163f3-648f-4e39-87fd-cc5ea7aad2d1\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::LANDSCAPE_NOT_ALLOWED_ERROR","title":"<code>LANDSCAPE_NOT_ALLOWED_ERROR = \"6f895685-7cf2-4d65-b3da-9029c5581d88\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::PORTRAIT_NOT_ALLOWED_ERROR","title":"<code>PORTRAIT_NOT_ALLOWED_ERROR = \"65608156-77da-4c79-a88c-02ef6d18c782\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::RATIO_TOO_BIG_ERROR","title":"<code>RATIO_TOO_BIG_ERROR = \"70cafca6-168f-41c9-8c8c-4e47a52be643\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::RATIO_TOO_SMALL_ERROR","title":"<code>RATIO_TOO_SMALL_ERROR = \"59b8c6ef-bcf2-4ceb-afff-4642ed92f12e\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::SIZE_NOT_DETECTED_ERROR","title":"<code>SIZE_NOT_DETECTED_ERROR = \"6d55c3f4-e58e-4fe3-91ee-74b492199956\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::SQUARE_NOT_ALLOWED_ERROR","title":"<code>SQUARE_NOT_ALLOWED_ERROR = \"5d41425b-facb-47f7-a55a-de9fbe45cb46\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::TOO_FEW_PIXEL_ERROR","title":"<code>TOO_FEW_PIXEL_ERROR = \"1b06b97d-ae48-474e-978f-038a74854c43\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::TOO_HIGH_ERROR","title":"<code>TOO_HIGH_ERROR = \"7efae81c-4877-47ba-aa65-d01ccb0d4645\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::TOO_LOW_ERROR","title":"<code>TOO_LOW_ERROR = \"aef0cb6a-c07f-4894-bc08-1781420d7b4c\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::TOO_MANY_PIXEL_ERROR","title":"<code>TOO_MANY_PIXEL_ERROR = \"ee0804e8-44db-4eac-9775-be91aaf72ce1\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::TOO_NARROW_ERROR","title":"<code>TOO_NARROW_ERROR = \"9afbd561-4f90-4a27-be62-1780fc43604a\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image::TOO_WIDE_ERROR","title":"<code>TOO_WIDE_ERROR = \"7f87163d-878f-47f5-99ba-a8eb723a1ab2\"</code>","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image.new(min_width,max_width,min_height,max_height,min_ratio,max_ratio,min_pixels,max_pixels,allow_square,allow_landscape,allow_portrait,size_not_detected_message,min_width_message,max_width_message,min_height_message,max_height_message,min_pixels_message,max_pixels_message,min_ratio_message,max_ratio_message,allow_square_message,allow_landscape_message,allow_portrait_message,max_size,binary_format,mime_types,not_found_message,not_readable_message,empty_message,max_size_message,mime_type_message,groups,payload)","title":"<code>.new(min_width : Int32 | Nil = nil, max_width : Int32 | Nil = nil, min_height : Int32 | Nil = nil, max_height : Int32 | Nil = nil, min_ratio : Float64 | Nil = nil, max_ratio : Float64 | Nil = nil, min_pixels : Float64 | Nil = nil, max_pixels : Float64 | Nil = nil, allow_square : Bool = true, allow_landscape : Bool = true, allow_portrait : Bool = true, size_not_detected_message : String = \"The size of the image could not be detected.\", min_width_message : String = \"The image width is too small ({{ width }}px). Minimum width expected is {{ min_width }}px.\", max_width_message : String = \"The image width is too big ({{ width }}px). Allowed maximum width is {{ max_width }}px.\", min_height_message : String = \"The image height is too small ({{ height }}px). Minimum height expected is {{ min_height }}px.\", max_height_message : String = \"The image height is too big ({{ height }}px). Allowed maximum height is {{ max_height }}px.\", min_pixels_message : String = \"The image has too few pixels ({{ pixels }} pixels). Minimum amount expected is {{ min_pixels }} pixels.\", max_pixels_message : String = \"The image has too many pixels ({{ pixels }} pixels). Maximum amount expected is {{ max_pixels }} pixels.\", min_ratio_message : String = \"The image ratio is too small ({{ ratio }}). Minimum ratio expected is {{ min_ratio }}.\", max_ratio_message : String = \"The image ratio is too big ({{ ratio }}). Allowed maximum ratio is {{ max_ratio }}.\", allow_square_message : String = \"The image is square ({{ width }}x{{ height }}px). Square images are not allowed.\", allow_landscape_message : String = \"The image is landscape oriented ({{ width }}x{{ height }}px). Landscape oriented images are not allowed.\", allow_portrait_message : String = \"The image is portrait oriented ({{ width }}x{{ height }}px). Portrait oriented images are not allowed.\", max_size : Int | String | Nil = nil, binary_format : Bool | Nil = nil, mime_types : Enumerable(String) | Nil = {\"image/*\"}, not_found_message : String = \"The file could not be found.\", not_readable_message : String = \"The file is not readable.\", empty_message : String = \"An empty file is not allowed.\", max_size_message : String = \"The file is too large ({{ size }} {{ suffix }}). Allowed maximum size is {{ limit }} {{ suffix }}.\", mime_type_message : String = \"This file is not a valid image.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#allow_landscape?","title":"<code>#allow_landscape? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#allow_landscape_message","title":"<code>#allow_landscape_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#allow_portrait?","title":"<code>#allow_portrait? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#allow_portrait_message","title":"<code>#allow_portrait_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#allow_square?","title":"<code>#allow_square? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#allow_square_message","title":"<code>#allow_square_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_height","title":"<code>#max_height : Int32 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_height_message","title":"<code>#max_height_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_pixels","title":"<code>#max_pixels : Float64 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_pixels_message","title":"<code>#max_pixels_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_ratio","title":"<code>#max_ratio : Float64 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_ratio_message","title":"<code>#max_ratio_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_width","title":"<code>#max_width : Int32 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#max_width_message","title":"<code>#max_width_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_height","title":"<code>#min_height : Int32 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_height_message","title":"<code>#min_height_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_pixels","title":"<code>#min_pixels : Float64 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_pixels_message","title":"<code>#min_pixels_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_ratio","title":"<code>#min_ratio : Float64 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_ratio_message","title":"<code>#min_ratio_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_width","title":"<code>#min_width : Int32 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#min_width_message","title":"<code>#min_width_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#size_not_detected_message","title":"<code>#size_not_detected_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Image/#Athena::Validator::Constraints::Image#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Image/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Image/Validator/#Athena::Validator::Constraints::Image::Validator","title":"class <code>Athena::Validator::Constraints::Image::Validator</code> inherits <code>Athena::Validator::Constraints::File::Validator</code>","text":""},{"location":"Validator/Constraints/Image/Validator/#Athena::Validator::Constraints::Image::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Image/Validator/#Athena::Validator::Constraints::Image::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Image) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/IsFalse/","title":"IsFalse","text":""},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse","title":"class <code>Athena::Validator::Constraints::IsFalse</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is <code>false</code>.</p>"},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be false.</code></p> <p>The message that will be shown if the value is not <code>false</code>.</p>"},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse-constants","title":"Constants","text":""},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse::NOT_FALSE_ERROR","title":"<code>NOT_FALSE_ERROR = \"55c076a0-dbaf-453c-90cf-b94664276dbc\"</code>","text":""},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be false.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IsFalse/#Athena::Validator::Constraints::IsFalse#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/IsFalse/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/IsFalse/Validator/#Athena::Validator::Constraints::IsFalse::Validator","title":"class <code>Athena::Validator::Constraints::IsFalse::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/IsFalse/Validator/#Athena::Validator::Constraints::IsFalse::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IsFalse/Validator/#Athena::Validator::Constraints::IsFalse::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::IsFalse) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/IsNil/","title":"IsNil","text":""},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil","title":"class <code>Athena::Validator::Constraints::IsNil</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is <code>nil</code>.</p>"},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be null.</code></p> <p>The message that will be shown if the value is not <code>nil</code>.</p>"},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil-constants","title":"Constants","text":""},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil::NOT_NIL_ERROR","title":"<code>NOT_NIL_ERROR = \"2c88e3c7-9275-4b9b-81b4-48c6c44b1804\"</code>","text":""},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be null.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IsNil/#Athena::Validator::Constraints::IsNil#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/IsNil/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/IsNil/Validator/#Athena::Validator::Constraints::IsNil::Validator","title":"class <code>Athena::Validator::Constraints::IsNil::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/IsNil/Validator/#Athena::Validator::Constraints::IsNil::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IsNil/Validator/#Athena::Validator::Constraints::IsNil::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::IsNil) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/IsTrue/","title":"IsTrue","text":""},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue","title":"class <code>Athena::Validator::Constraints::IsTrue</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is <code>true</code>.</p>"},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be true.</code></p> <p>The message that will be shown if the value is not <code>true</code>.</p>"},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue-constants","title":"Constants","text":""},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue::NOT_TRUE_ERROR","title":"<code>NOT_TRUE_ERROR = \"beabd93e-3673-4dfc-8796-01bd1504dd19\"</code>","text":""},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be true.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IsTrue/#Athena::Validator::Constraints::IsTrue#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/IsTrue/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/IsTrue/Validator/#Athena::Validator::Constraints::IsTrue::Validator","title":"class <code>Athena::Validator::Constraints::IsTrue::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/IsTrue/Validator/#Athena::Validator::Constraints::IsTrue::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/IsTrue/Validator/#Athena::Validator::Constraints::IsTrue::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::IsTrue) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/LessThan/","title":"LessThan","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan","title":"class <code>Athena::Validator::Constraints::LessThan(ValueType)</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is less than another.</p>"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--value","title":"value","text":"<p>Type: <code>Number | String | Time</code></p> <p>Defines the value that the value being validated should be compared to.</p>"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be less than {{ compared_value }}.</code></p> <p>The message that will be shown if the value is not less than the comparison value.</p>"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p> Included modules <code>Athena::Validator::Constraints::AbstractComparison</code> Direct known subclasses <code>Athena::Validator::Constraints::Negative</code>"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan-constants","title":"Constants","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan::TOO_HIGH_ERROR","title":"<code>TOO_HIGH_ERROR = \"d9fbedb3-c576-45b5-b4dc-996030349bbf\"</code>","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan.new(value,message,groups,payload)","title":"<code>.new(value : ValueType, message : String = default_error_message, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan-methods","title":"Methods","text":""},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan#default_error_message","title":"<code>#default_error_message : String</code>","text":"<p>Returns the <code>AVD::Constraint#message</code> for this constraint.</p> View source"},{"location":"Validator/Constraints/LessThan/#Athena::Validator::Constraints::LessThan#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/LessThan/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/LessThan/Validator/#Athena::Validator::Constraints::LessThan::Validator","title":"class <code>Athena::Validator::Constraints::LessThan::Validator</code> inherits <code>Athena::Validator::Constraints::ComparisonValidator</code>","text":""},{"location":"Validator/Constraints/LessThan/Validator/#Athena::Validator::Constraints::LessThan::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/LessThan/Validator/#Athena::Validator::Constraints::LessThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Number, expected : Number) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/LessThan/Validator/#Athena::Validator::Constraints::LessThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : String, expected : String) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/LessThan/Validator/#Athena::Validator::Constraints::LessThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Time, expected : Time) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/LessThan/Validator/#Athena::Validator::Constraints::LessThan::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : _, expected : _) : NoReturn</code>","text":"<p>Returns <code>true</code> if the provided actual and expected values are compatible, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Constraints/LessThan/Validator/#Athena::Validator::Constraints::LessThan::Validator#error_code","title":"<code>#error_code : String</code>","text":"<p>Returns the expected error code for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/LessThanOrEqual/","title":"LessThanOrEqual","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual","title":"class <code>Athena::Validator::Constraints::LessThanOrEqual(ValueType)</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is less than or equal to another.</p>"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--value","title":"value","text":"<p>Type: <code>Number | String | Time</code></p> <p>Defines the value that the value being validated should be compared to.</p>"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be less than or equal to {{ compared_value }}.</code></p> <p>The message that will be shown if the value is not less than or equal to the comparison value.</p>"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p> Included modules <code>Athena::Validator::Constraints::AbstractComparison</code> Direct known subclasses <code>Athena::Validator::Constraints::NegativeOrZero</code>"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual-constants","title":"Constants","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual::TOO_HIGH_ERROR","title":"<code>TOO_HIGH_ERROR = \"515a12ff-82f2-4434-9635-137164d5b467\"</code>","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual.new(value,message,groups,payload)","title":"<code>.new(value : ValueType, message : String = default_error_message, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual-methods","title":"Methods","text":""},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual#default_error_message","title":"<code>#default_error_message : String</code>","text":"<p>Returns the <code>AVD::Constraint#message</code> for this constraint.</p> View source"},{"location":"Validator/Constraints/LessThanOrEqual/#Athena::Validator::Constraints::LessThanOrEqual#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/LessThanOrEqual/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/LessThanOrEqual/Validator/#Athena::Validator::Constraints::LessThanOrEqual::Validator","title":"class <code>Athena::Validator::Constraints::LessThanOrEqual::Validator</code> inherits <code>Athena::Validator::Constraints::ComparisonValidator</code>","text":""},{"location":"Validator/Constraints/LessThanOrEqual/Validator/#Athena::Validator::Constraints::LessThanOrEqual::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/LessThanOrEqual/Validator/#Athena::Validator::Constraints::LessThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Number, expected : Number) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/LessThanOrEqual/Validator/#Athena::Validator::Constraints::LessThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : String, expected : String) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/LessThanOrEqual/Validator/#Athena::Validator::Constraints::LessThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : Time, expected : Time) : Bool</code>","text":"View source"},{"location":"Validator/Constraints/LessThanOrEqual/Validator/#Athena::Validator::Constraints::LessThanOrEqual::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : _, expected : _) : NoReturn</code>","text":"<p>Returns <code>true</code> if the provided actual and expected values are compatible, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Constraints/LessThanOrEqual/Validator/#Athena::Validator::Constraints::LessThanOrEqual::Validator#error_code","title":"<code>#error_code : String</code>","text":"<p>Returns the expected error code for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Luhn/","title":"Luhn","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn","title":"class <code>Athena::Validator::Constraints::Luhn</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a credit card number passes the Luhn algorithm; a useful first step to validating a credit card. The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid credit card number.</code></p> <p>The message that will be shown if the value is not pass the Luhn check.</p>"},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn::CHECKSUM_FAILED_ERROR","title":"<code>CHECKSUM_FAILED_ERROR = \"a4f089dd-fd63-4d50-ac30-34ed2a8dc9dd\"</code>","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn::INVALID_CHARACTERS_ERROR","title":"<code>INVALID_CHARACTERS_ERROR = \"c42b8d36-d9e9-4f5f-aad6-5190e27a1102\"</code>","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn.new(message,groups,payload)","title":"<code>.new(message : String = \"This value is not a valid credit card number.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Luhn/#Athena::Validator::Constraints::Luhn#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Luhn/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Luhn/Validator/#Athena::Validator::Constraints::Luhn::Validator","title":"class <code>Athena::Validator::Constraints::Luhn::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Luhn/Validator/#Athena::Validator::Constraints::Luhn::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Luhn/Validator/#Athena::Validator::Constraints::Luhn::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Luhn) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Negative/","title":"Negative","text":""},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative","title":"class <code>Athena::Validator::Constraints::Negative</code> inherits <code>Athena::Validator::Constraints::LessThan</code>","text":"<p>Validates that a value is a negative number. Use <code>AVD::Constraints::NegativeOrZero</code> if you wish to also allow <code>0</code>.</p>"},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be negative.</code></p> <p>The message that will be shown if the value is not less than <code>0</code>.</p>"},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be negative.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Negative/#Athena::Validator::Constraints::Negative#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/NegativeOrZero/","title":"NegativeOrZero","text":""},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero","title":"class <code>Athena::Validator::Constraints::NegativeOrZero</code> inherits <code>Athena::Validator::Constraints::LessThanOrEqual</code>","text":"<p>Validates that a value is a negative number, or <code>0</code>. Use <code>AVD::Constraints::Negative</code> if you don't want to allow <code>0</code>.</p>"},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be negative or zero.</code></p> <p>The message that will be shown if the value is not less than or equal to <code>0</code>.</p>"},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The <code>AVD::Constraint@payload</code> is not used by <code>Athena::Validator</code>, but its processing is completely up to you</p>"},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be negative or zero.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero-methods","title":"Methods","text":""},{"location":"Validator/Constraints/NegativeOrZero/#Athena::Validator::Constraints::NegativeOrZero#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/NotBlank/","title":"NotBlank","text":""},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank","title":"class <code>Athena::Validator::Constraints::NotBlank</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is not blank; meaning not equal to a blank string, an empty <code>Iterable</code>, <code>false</code>, or optionally <code>nil</code>.</p>"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank--allow_nil","title":"allow_nil","text":"<p>Type: <code>Bool</code> Default: <code>false</code></p> <p>If set to <code>true</code>, <code>nil</code> values are considered valid and will not trigger a violation.</p>"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should not be blank.</code></p> <p>The message that will be shown if the value is blank.</p>"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank-constants","title":"Constants","text":""},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank::IS_BLANK_ERROR","title":"<code>IS_BLANK_ERROR = \"0d0c3254-3642-4cb0-9882-46ee5918e6e3\"</code>","text":""},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank.new(allow_nil,message,groups,payload)","title":"<code>.new(allow_nil : Bool = false, message : String = \"This value should not be blank.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank-methods","title":"Methods","text":""},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank#allow_nil?","title":"<code>#allow_nil? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/NotBlank/#Athena::Validator::Constraints::NotBlank#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/NotBlank/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/NotBlank/Validator/#Athena::Validator::Constraints::NotBlank::Validator","title":"class <code>Athena::Validator::Constraints::NotBlank::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/NotBlank/Validator/#Athena::Validator::Constraints::NotBlank::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/NotBlank/Validator/#Athena::Validator::Constraints::NotBlank::Validator#validate(value,constraint)","title":"<code>#validate(value : String | Nil, constraint : AVD::Constraints::NotBlank) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/NotBlank/Validator/#Athena::Validator::Constraints::NotBlank::Validator#validate(value,constraint)","title":"<code>#validate(value : Bool | Nil, constraint : AVD::Constraints::NotBlank) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/NotBlank/Validator/#Athena::Validator::Constraints::NotBlank::Validator#validate(value,constraint)","title":"<code>#validate(value : Iterable | Nil, constraint : AVD::Constraints::NotBlank) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/NotEqualTo/","title":"NotEqualTo","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo","title":"class <code>Athena::Validator::Constraints::NotEqualTo(ValueType)</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is not equal to another.</p>"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--value","title":"value","text":"<p>Defines the value that the value being validated should be compared to.</p>"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should not be equal to {{ compared_value }}.</code></p> <p>The message that will be shown if the value is equal to the comparison value.</p>"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p> Included modules <code>Athena::Validator::Constraints::AbstractComparison</code>"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo-constants","title":"Constants","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo::IS_EQUAL_ERROR","title":"<code>IS_EQUAL_ERROR = \"984a0525-d73e-40c0-81c2-2ecbca7e4c96\"</code>","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo.new(value,message,groups,payload)","title":"<code>.new(value : ValueType, message : String = default_error_message, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo-methods","title":"Methods","text":""},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo#default_error_message","title":"<code>#default_error_message : String</code>","text":"<p>Returns the <code>AVD::Constraint#message</code> for this constraint.</p> View source"},{"location":"Validator/Constraints/NotEqualTo/#Athena::Validator::Constraints::NotEqualTo#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/NotEqualTo/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/NotEqualTo/Validator/#Athena::Validator::Constraints::NotEqualTo::Validator","title":"class <code>Athena::Validator::Constraints::NotEqualTo::Validator</code> inherits <code>Athena::Validator::Constraints::ComparisonValidator</code>","text":""},{"location":"Validator/Constraints/NotEqualTo/Validator/#Athena::Validator::Constraints::NotEqualTo::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/NotEqualTo/Validator/#Athena::Validator::Constraints::NotEqualTo::Validator#compare_values(actual,expected)","title":"<code>#compare_values(actual : _, expected : _) : Bool</code>","text":"<p>Returns <code>true</code> if the provided actual and expected values are compatible, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Constraints/NotEqualTo/Validator/#Athena::Validator::Constraints::NotEqualTo::Validator#error_code","title":"<code>#error_code : String</code>","text":"<p>Returns the expected error code for <code>self</code>.</p> View source"},{"location":"Validator/Constraints/NotNil/","title":"NotNil","text":""},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil","title":"class <code>Athena::Validator::Constraints::NotNil</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is not <code>nil</code>.</p> <p>Note</p> <p>Due to Crystal's static typing, when validating objects the property's type must be nilable, otherwise <code>nil</code> is inherently not allowed due to the compiler's type checking.</p>"},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should not be null.</code></p> <p>The message that will be shown if the value is <code>nil</code>.</p>"},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil-constants","title":"Constants","text":""},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil::IS_NIL_ERROR","title":"<code>IS_NIL_ERROR = \"c7e77b14-744e-44c0-aa7e-391c69cc335c\"</code>","text":""},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should not be null.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil-methods","title":"Methods","text":""},{"location":"Validator/Constraints/NotNil/#Athena::Validator::Constraints::NotNil#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/NotNil/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/NotNil/Validator/#Athena::Validator::Constraints::NotNil::Validator","title":"class <code>Athena::Validator::Constraints::NotNil::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/NotNil/Validator/#Athena::Validator::Constraints::NotNil::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/NotNil/Validator/#Athena::Validator::Constraints::NotNil::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::NotNil) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Optional/","title":"Optional","text":""},{"location":"Validator/Constraints/Optional/#Athena::Validator::Constraints::Optional","title":"class <code>Athena::Validator::Constraints::Optional</code> inherits <code>Athena::Validator::Constraints::Existence</code>","text":"<p>Allows wrapping <code>AVD::Constraint</code>(s) to denote it as being optional within an <code>AVD::Constraints::Collection</code>. See this for more information.</p>"},{"location":"Validator/Constraints/Optional/#Athena::Validator::Constraints::Optional-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Optional/#Athena::Validator::Constraints::Optional#validated_by","title":"<code>#validated_by : NoReturn</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Positive/","title":"Positive","text":""},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive","title":"class <code>Athena::Validator::Constraints::Positive</code> inherits <code>Athena::Validator::Constraints::GreaterThan</code>","text":"<p>Validates that a value is a positive number. Use <code>AVD::Constraints::PositiveOrZero</code> if you wish to also allow <code>0</code>.</p>"},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be positive.</code></p> <p>The message that will be shown if the value is not greater than <code>0</code>.</p>"},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be positive.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Positive/#Athena::Validator::Constraints::Positive#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/PositiveOrZero/","title":"PositiveOrZero","text":""},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero","title":"class <code>Athena::Validator::Constraints::PositiveOrZero</code> inherits <code>Athena::Validator::Constraints::GreaterThanOrEqual</code>","text":"<p>Validates that a value is a positive number, or <code>0</code>. Use <code>AVD::Constraints::Positive</code> if you don't want to allow <code>0</code>.</p>"},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should be positive or zero.</code></p> <p>The message that will be shown if the value is not greater than or equal to <code>0</code>.</p>"},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ compared_value }}</code> - The expected value.</li> <li><code>{{ compared_value_type }}</code> - The type of the expected value.</li> </ul>"},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero.new(message,groups,payload)","title":"<code>.new(message : String = \"This value should be positive or zero.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero-methods","title":"Methods","text":""},{"location":"Validator/Constraints/PositiveOrZero/#Athena::Validator::Constraints::PositiveOrZero#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Range/","title":"Range","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range","title":"class <code>Athena::Validator::Constraints::Range</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a <code>Number</code> or <code>Time</code> value is between some minimum and maximum.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--range","title":"range","text":"<p>Type: <code>::Range</code></p> <p>The <code>::Range</code> that defines the minimum and maximum values, if any. An endless range can be used to only have a minimum or maximum.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--optional-arguments","title":"Optional Arguments","text":"<p>Note</p> <p>This constraint does not support a <code>message</code> argument.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--not_in_range_message","title":"not_in_range_message","text":"<p>Type: <code>String</code> Default: <code>This value should be between {{ min }} and {{ max }}.</code></p> <p>The message that will be shown if the value is less than the min or greater than the max.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ min }}</code> - The lower limit.</li> <li><code>{{ max }}</code> - The upper limit.</li> </ul>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--min_message","title":"min_message","text":"<p>Type: <code>String</code> Default: <code>This value should be {{ limit }} or more.</code></p> <p>The message that will be shown if the value is less than the min, and no max has been provided.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--placeholders_1","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ limit }}</code> - The lower limit.</li> </ul>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--max_message","title":"max_message","text":"<p>Type: <code>String</code> Default: <code>This value should be {{ limit }} or less.</code></p> <p>The message that will be shown if the value is more than the max, and no min has been provided.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--placeholders_2","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ limit }}</code> - The upper limit.</li> </ul>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range::NOT_IN_RANGE_ERROR","title":"<code>NOT_IN_RANGE_ERROR = \"7e62386d-30ae-4e7c-918f-1b7e571c6d69\"</code>","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range::TOO_HIGH_ERROR","title":"<code>TOO_HIGH_ERROR = \"5d9aed01-ac49-4d8e-9c16-e4aab74ea774\"</code>","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range::TOO_LOW_ERROR","title":"<code>TOO_LOW_ERROR = \"f0316644-882e-4779-a404-ee7ac97ddecc\"</code>","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range.new(range,not_in_range_message,min_message,max_message,groups,payload)","title":"<code>.new(range : ::Range, not_in_range_message : String = \"This value should be between {{ min }} and {{ max }}.\", min_message : String = \"This value should be {{ limit }} or more.\", max_message : String = \"This value should be {{ limit }} or less.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range#max","title":"<code>#max : Number::Primitive | Time | Nil</code>","text":"View source"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range#max_message","title":"<code>#max_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range#min","title":"<code>#min : Number::Primitive | Time | Nil</code>","text":"View source"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range#min_message","title":"<code>#min_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range#not_in_range_message","title":"<code>#not_in_range_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Range/#Athena::Validator::Constraints::Range#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Range/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Range/Validator/#Athena::Validator::Constraints::Range::Validator","title":"class <code>Athena::Validator::Constraints::Range::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Range/Validator/#Athena::Validator::Constraints::Range::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Range/Validator/#Athena::Validator::Constraints::Range::Validator#validate(value,constraint)","title":"<code>#validate(value : Number | Time | Nil, constraint : AVD::Constraints::Range) : Nil</code>","text":"<p>:inherit:</p> <p>ameba:disable Metrics/CyclomaticComplexity</p> View source"},{"location":"Validator/Constraints/Range/Validator/#Athena::Validator::Constraints::Range::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Range) : Nil</code>","text":"View source"},{"location":"Validator/Constraints/Regex/","title":"Regex","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex","title":"class <code>Athena::Validator::Constraints::Regex</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value matches a regular expression. The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--pattern","title":"pattern","text":"<p>Type: <code>::Regex</code></p> <p>The <code>::Regex</code> pattern that the value should match.</p>"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--match","title":"match","text":"<p>Type: <code>Bool</code> Default: <code>true</code></p> <p>If set to <code>false</code>, validation will require the value does NOT match the pattern.</p>"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value should match '{{ pattern }}'.</code></p> <p>The message that will be shown if the value does not match the pattern.</p>"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ pattern }}</code> - The regular expression pattern that the value should match.</li> </ul>"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex::REGEX_FAILED_ERROR","title":"<code>REGEX_FAILED_ERROR = \"108987a0-2d81-44a0-b8d4-1c7ab8815343\"</code>","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex.new(pattern,match,message,groups,payload)","title":"<code>.new(pattern : ::Regex, match : Bool = true, message : String = \"This value should match '{{ pattern }}'.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex#match?","title":"<code>#match? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex#pattern","title":"<code>#pattern : ::Regex</code>","text":"View source"},{"location":"Validator/Constraints/Regex/#Athena::Validator::Constraints::Regex#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Regex/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Regex/Validator/#Athena::Validator::Constraints::Regex::Validator","title":"class <code>Athena::Validator::Constraints::Regex::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Regex/Validator/#Athena::Validator::Constraints::Regex::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Regex/Validator/#Athena::Validator::Constraints::Regex::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Regex) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Required/","title":"Required","text":""},{"location":"Validator/Constraints/Required/#Athena::Validator::Constraints::Required","title":"class <code>Athena::Validator::Constraints::Required</code> inherits <code>Athena::Validator::Constraints::Existence</code>","text":"<p>Allows wrapping <code>AVD::Constraint</code>(s) to denote it as being required within an <code>AVD::Constraints::Collection</code>. See this for more information.</p>"},{"location":"Validator/Constraints/Required/#Athena::Validator::Constraints::Required-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Required/#Athena::Validator::Constraints::Required#validated_by","title":"<code>#validated_by : NoReturn</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Sequentially/","title":"Sequentially","text":""},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially","title":"class <code>Athena::Validator::Constraints::Sequentially</code> inherits <code>Athena::Validator::Constraints::Composite</code>","text":"<p>Validates a value against a collection of constraints, stopping once the first violation is raised.</p>"},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially--constraints","title":"constraints","text":"<p>Type: <code>Array(AVD::Constraint) | AVD::Constraint</code></p> <p>The <code>AVD::Constraint</code>(s) that are to be applied sequentially.</p>"},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially--optional-arguments","title":"Optional Arguments","text":"<p>Note</p> <p>This constraint does not support a <code>message</code> argument.</p>"},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially--usage","title":"Usage","text":"<p>Suppose you have an object with a <code>address</code> property which should meet the following criteria:</p> <ul> <li>Is not a blank string</li> <li>Is at least 10 characters long</li> <li>Is in a specific format</li> <li>Is geolocalizable using an external API</li> </ul> <p>If you were to apply all of these constraints to the <code>address</code> property, you may run into some problems. For example, multiple violations may be added for the same property, or you may perform a useless and heavy external call to geolocalize the address when it is not in a proper format.</p> <p>To solve this we can validate these constraints sequentially.</p> <pre><code>class Location\n  include AVD::Validatable\n\n  PATTERN = /some_pattern/\n\n  def initialize(@address : String); end\n\n  @[Assert::Sequentially([\n    @[Assert::NotBlank],\n    @[Assert::Size(10..)],\n    @[Assert::Regex(Location::PATTERN)],\n    @[Assert::CustomGeolocalizationConstraint],\n  ])]\n  getter address : String\nend\n</code></pre> <p>Note</p> <p>The annotation approach only supports two levels of nested annotations. Manually wire up the constraint via code if you require more than that.</p>"},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially.new(constraints,groups,payload)","title":"<code>.new(constraints : AVD::Constraints::Composite::Type, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Sequentially/#Athena::Validator::Constraints::Sequentially#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Sequentially/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Sequentially/Validator/#Athena::Validator::Constraints::Sequentially::Validator","title":"class <code>Athena::Validator::Constraints::Sequentially::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Sequentially/Validator/#Athena::Validator::Constraints::Sequentially::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Sequentially/Validator/#Athena::Validator::Constraints::Sequentially::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Sequentially) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Size/","title":"Size","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size","title":"class <code>Athena::Validator::Constraints::Size</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that the <code>#size</code> of a <code>String</code> or <code>Indexable</code> value is between some minimum and maximum.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--required-arguments","title":"Required Arguments","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--range","title":"range","text":"<p>Type: <code>::Range</code></p> <p>The <code>::Range</code> that defines the minimum and maximum values, if any. An endless range can be used to only have a minimum or maximum.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--optional-arguments","title":"Optional Arguments","text":"<p>Note</p> <p>This constraint does not support a <code>message</code> argument.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--exact_message","title":"exact_message","text":"<p>Type: <code>String</code> Default: <code>This value should have exactly {{ limit }} {{ type }}.|This value should have exactly {{ limit }} {{ type }}s.</code></p> <p>The message that will be shown if min and max values are equal and the underlying value\u2019s size is not exactly this value. The message is pluralized depending on how many elements/characters the underlying value has.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ limit }}</code> - The exact expected size.</li> <li><code>{{ type }}</code> - <code>character</code> if the value is a string or <code>item</code> if the value is an indexable.</li> </ul>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--min_message","title":"min_message","text":"<p>Type: <code>String</code> Default: <code>This value is too short. It should have {{ limit }} {{ type }} or more.|This value is too short. It should have {{ limit }} {{ type }}s or more.</code></p> <p>The message that will be shown if the underlying value\u2019s size is less than the min. The message is pluralized depending on how many elements/characters the underlying value has.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--placeholders_1","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ limit }}</code> - The expected minimum size.</li> <li><code>{{ type }}</code> - <code>character</code> if the value is a string or <code>item</code> if the value is an indexable.</li> </ul>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--max_message","title":"max_message","text":"<p>Type: <code>String</code> Default: <code>This value is too long. It should have {{ limit }} {{ type }} or less.|This value is too long. It should have {{ limit }} {{ type }}s or less.</code></p> <p>The message that will be shown if the underlying value\u2019s size is greater than the max. The message is pluralized depending on how many elements/characters the underlying value has.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--placeholders_2","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> <li><code>{{ limit }}</code> - The expected minimum size.</li> <li><code>{{ type }}</code> - <code>character</code> if the value is a string or <code>item</code> if the value is an indexable.</li> </ul>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size::TOO_LONG_ERROR","title":"<code>TOO_LONG_ERROR = \"a1fa7a63-ea3b-46a0-adcc-5e1bcc26f73a\"</code>","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size::TOO_SHORT_ERROR","title":"<code>TOO_SHORT_ERROR = \"8ba31c71-1b37-4b76-8bc9-66896589b01f\"</code>","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size.new(range,min_message,max_message,exact_message,groups,payload)","title":"<code>.new(range : ::Range, min_message : String = \"This value is too short. It should have {{ limit }} {{ type }} or more.|This value is too short. It should have {{ limit }} {{ type }}s or more.\", max_message : String = \"This value is too long. It should have {{ limit }} {{ type }} or less.|This value is too long. It should have {{ limit }} {{ type }}s or less.\", exact_message : String = \"This value should have exactly {{ limit }} {{ type }}.|This value should have exactly {{ limit }} {{ type }}s.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size#exact_message","title":"<code>#exact_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size#max","title":"<code>#max : Int32 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size#max_message","title":"<code>#max_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size#min","title":"<code>#min : Int32 | ::Nil</code>","text":"View source"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size#min_message","title":"<code>#min_message : String</code>","text":"View source"},{"location":"Validator/Constraints/Size/#Athena::Validator::Constraints::Size#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Size/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Size/Validator/#Athena::Validator::Constraints::Size::Validator","title":"class <code>Athena::Validator::Constraints::Size::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Size/Validator/#Athena::Validator::Constraints::Size::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Size/Validator/#Athena::Validator::Constraints::Size::Validator#validate(value,constraint)","title":"<code>#validate(value : String | Indexable, constraint : AVD::Constraints::Size) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/URL/","title":"URL","text":""},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL","title":"class <code>Athena::Validator::Constraints::URL</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that a value is a valid URL string. The underlying value is converted to a string via <code>#to_s</code> before being validated.</p> <p>Note</p> <p>As with most other constraints, <code>nil</code> and empty strings are considered valid values, in order to allow the value to be optional. If the value is required, consider combining this constraint with <code>AVD::Constraints::NotBlank</code>.</p>"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--protocols","title":"protocols","text":"<p>Type: <code>Array(String)</code> Default: <code>[\"http\", \"https\"]</code></p> <p>The protocols considered to be valid for the URL.</p>"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--relative_protocol","title":"relative_protocol","text":"<p>Type: <code>Bool</code> Default: <code>false</code></p> <p>If <code>true</code> the protocol is considered optional.</p>"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This value is not a valid URL.</code></p> <p>The message that will be shown if the URL is not valid.</p>"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL-constants","title":"Constants","text":""},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL::INVALID_URL_ERROR","title":"<code>INVALID_URL_ERROR = \"e87ceba6-a896-4906-9957-b102045272ee\"</code>","text":""},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL.new(protocols,relative_protocol,message,groups,payload)","title":"<code>.new(protocols : Array(String) = [\"http\", \"https\"], relative_protocol : Bool = false, message : String = \"This value is not a valid URL.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL-methods","title":"Methods","text":""},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL#protocols","title":"<code>#protocols : Array(String)</code>","text":"View source"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL#relative_protocol?","title":"<code>#relative_protocol? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/URL/#Athena::Validator::Constraints::URL#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/URL/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/URL/Validator/#Athena::Validator::Constraints::URL::Validator","title":"class <code>Athena::Validator::Constraints::URL::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/URL/Validator/#Athena::Validator::Constraints::URL::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/URL/Validator/#Athena::Validator::Constraints::URL::Validator#pattern(constraint)","title":"<code>#pattern(constraint : AVD::Constraints::URL) : ::Regex</code>","text":"View source"},{"location":"Validator/Constraints/URL/Validator/#Athena::Validator::Constraints::URL::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::URL) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Unique/","title":"Unique","text":""},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique","title":"class <code>Athena::Validator::Constraints::Unique</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Validates that all elements of an <code>Indexable</code> are unique.</p>"},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique--optional-arguments","title":"Optional Arguments","text":""},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique--message","title":"message","text":"<p>Type: <code>String</code> Default: <code>This collection should contain only unique elements.</code></p> <p>The message that will be shown if at least one element is repeated in the collection.</p>"},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique--placeholders","title":"Placeholders","text":"<p>The following placeholders can be used in this message:</p> <ul> <li><code>{{ value }}</code> - The current (invalid) value.</li> </ul>"},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique-constants","title":"Constants","text":""},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique::IS_NOT_UNIQUE_ERROR","title":"<code>IS_NOT_UNIQUE_ERROR = \"fd1f83d6-94b5-44bc-b39d-b1ff367ebfb8\"</code>","text":""},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique.new(message,groups,payload)","title":"<code>.new(message : String = \"This collection should contain only unique elements.\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Unique/#Athena::Validator::Constraints::Unique#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Unique/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Unique/Validator/#Athena::Validator::Constraints::Unique::Validator","title":"class <code>Athena::Validator::Constraints::Unique::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Unique/Validator/#Athena::Validator::Constraints::Unique::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Unique/Validator/#Athena::Validator::Constraints::Unique::Validator#validate(value,constraint)","title":"<code>#validate(value : Indexable | Nil, constraint : AVD::Constraints::Unique) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Unique/Validator/#Athena::Validator::Constraints::Unique::Validator#validate(actual,expected)","title":"<code>#validate(actual : _, expected : _) : NoReturn</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Constraints/Valid/","title":"Valid","text":""},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid","title":"class <code>Athena::Validator::Constraints::Valid</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>Tells the validator that it should also validate objects embedded as properties on an object being validated.</p>"},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid--configuration","title":"Configuration","text":""},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid--optional-arguments","title":"Optional Arguments","text":"<p>Note</p> <p>This constraint does not support a <code>message</code> argument.</p>"},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid--groups","title":"groups","text":"<p>Type: <code>Array(String) | String | Nil</code> Default: <code>nil</code></p> <p>The validation groups this constraint belongs to. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if <code>nil</code>.</p>"},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid--payload","title":"payload","text":"<p>Type: <code>Hash(String, String)?</code> Default: <code>nil</code></p> <p>Any arbitrary domain-specific data that should be stored with this constraint. The payload is not used by <code>Athena::Validator</code>, but its processing is completely up to you.</p>"},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid--usage","title":"Usage","text":"<p>Without this constraint, objects embedded in another object are not valided.</p> <pre><code>class SubObjectOne\n  include AVD::Validatable\n\n  @[Assert::NotBlank]\n  getter string : String = \"\"\nend\n\nclass SubObjectTwo\n  include AVD::Validatable\n\n  @[Assert::NotBlank]\n  getter string : String = \"\"\nend\n\nclass MyObject\n  include AVD::Validatable\n\n  # This object is not validated when validating `MyObject`.\n  getter sub_object_one : SubObjectOne = SubObjectOne.new\n\n  # Have the validator also validate `SubObjectTwo` when validating `MyObject`.\n  @[Assert::Valid]\n  getter sub_object_two : SubObjectTwo = SubObjectTwo.new\nend\n</code></pre>"},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid-constructors","title":"Constructors","text":""},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid.new(traverse,groups,payload)","title":"<code>.new(traverse : Bool = true, groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid#traverse?","title":"<code>#traverse? : Bool</code>","text":"View source"},{"location":"Validator/Constraints/Valid/#Athena::Validator::Constraints::Valid#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Constraints/Valid/Validator/","title":"Validator","text":""},{"location":"Validator/Constraints/Valid/Validator/#Athena::Validator::Constraints::Valid::Validator","title":"class <code>Athena::Validator::Constraints::Valid::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Constraints/Valid/Validator/#Athena::Validator::Constraints::Valid::Validator-methods","title":"Methods","text":""},{"location":"Validator/Constraints/Valid/Validator/#Athena::Validator::Constraints::Valid::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : AVD::Constraints::Valid) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Exceptions/","title":"Exceptions","text":""},{"location":"Validator/Exceptions/#Athena::Validator::Exceptions","title":"module <code>Athena::Validator::Exceptions</code>","text":"<p>Contains all custom exceptions defined within <code>Athena::Validator</code>.</p>"},{"location":"Validator/Exceptions/Logic/","title":"Logic","text":""},{"location":"Validator/Exceptions/Logic/#Athena::Validator::Exceptions::Logic","title":"class <code>Athena::Validator::Exceptions::Logic</code> inherits <code>Athena::Validator::Exceptions::ValidatorError</code>","text":"<p>Represents a code logic error that should lead directly to a fix in your code.</p>"},{"location":"Validator/Exceptions/UnexpectedValueError/","title":"UnexpectedValueError","text":""},{"location":"Validator/Exceptions/UnexpectedValueError/#Athena::Validator::Exceptions::UnexpectedValueError","title":"class <code>Athena::Validator::Exceptions::UnexpectedValueError</code> inherits <code>Athena::Validator::Exceptions::ValidatorError</code>","text":"<p>Raised when an <code>AVD::ConstraintValidatorInterface</code> is unable to validate a value of an unsupported type.</p> <p>See <code>AVD::ConstraintValidator#raise_invalid_type</code>.</p>"},{"location":"Validator/Exceptions/UnexpectedValueError/#Athena::Validator::Exceptions::UnexpectedValueError-constructors","title":"Constructors","text":""},{"location":"Validator/Exceptions/UnexpectedValueError/#Athena::Validator::Exceptions::UnexpectedValueError.new(value,supported_types)","title":"<code>.new(value : _, supported_types : String)</code>","text":"View source"},{"location":"Validator/Exceptions/UnexpectedValueError/#Athena::Validator::Exceptions::UnexpectedValueError-methods","title":"Methods","text":""},{"location":"Validator/Exceptions/UnexpectedValueError/#Athena::Validator::Exceptions::UnexpectedValueError#supported_types","title":"<code>#supported_types : String</code>","text":"<p>A string representing a union of the supported_type(s).</p> View source"},{"location":"Validator/Exceptions/ValidationFailed/","title":"ValidationFailed","text":""},{"location":"Validator/Exceptions/ValidationFailed/#Athena::Validator::Exceptions::ValidationFailed","title":"class <code>Athena::Validator::Exceptions::ValidationFailed</code> inherits <code>Athena::Framework::Exceptions::UnprocessableEntity</code>","text":"<p>Wraps an <code>AVD::Violation::ConstraintViolationListInterface</code> as an <code>ATH::Exceptions::UnprocessableEntity</code>; exposing the violations within the response body.</p>"},{"location":"Validator/Exceptions/ValidationFailed/#Athena::Validator::Exceptions::ValidationFailed-constructors","title":"Constructors","text":""},{"location":"Validator/Exceptions/ValidationFailed/#Athena::Validator::Exceptions::ValidationFailed.new(violations,cause,headers)","title":"<code>.new(violations : AVD::Violation::ConstraintViolationInterface | AVD::Violation::ConstraintViolationListInterface, cause : Exception | Nil = nil, headers : HTTP::Headers = HTTP::Headers.new)</code>","text":"View source"},{"location":"Validator/Exceptions/ValidationFailed/#Athena::Validator::Exceptions::ValidationFailed-methods","title":"Methods","text":""},{"location":"Validator/Exceptions/ValidationFailed/#Athena::Validator::Exceptions::ValidationFailed#to_json(builder)","title":"<code>#to_json(builder : JSON::Builder) : Nil</code>","text":"<p>Serializes <code>self</code> to JSON in the format of <code>{\"code\":400,\"message\":\"Exception message\"}</code></p> View source"},{"location":"Validator/Exceptions/ValidationFailed/#Athena::Validator::Exceptions::ValidationFailed#violations","title":"<code>#violations : Athena::Validator::Violation::ConstraintViolationListInterface</code>","text":"View source"},{"location":"Validator/Exceptions/ValidatorError/","title":"ValidatorError","text":""},{"location":"Validator/Exceptions/ValidatorError/#Athena::Validator::Exceptions::ValidatorError","title":"class <code>Athena::Validator::Exceptions::ValidatorError</code> inherits <code>Exception</code>","text":"<p>Base type of all <code>Athena::Validator</code> errors. Can be used to rescue any exception originating from <code>Athena::Validator</code>.</p> Direct known subclasses <code>Athena::Validator::Exceptions::Logic</code> <code>Athena::Validator::Exceptions::UnexpectedValueError</code>"},{"location":"Validator/ExecutionContext/","title":"ExecutionContext","text":""},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext","title":"class <code>Athena::Validator::ExecutionContext</code> inherits <code>Reference</code>","text":"<p>Basic implementation of <code>AVD::ExecutionContextInterface</code>.</p> Included modules <code>Athena::Validator::ExecutionContextInterface</code>"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext-methods","title":"Methods","text":""},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#add_violation(message,code,value)","title":"<code>#add_violation(message : String, code : String, value : _) : Nil</code>","text":"<p>Adds a violation with the provided message, and code, value parameter.</p> <p>The provided value is added to the violations' parameters as <code>\"{{ value }}\"</code>.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#add_violation(message,code)","title":"<code>#add_violation(message : String, code : String) : Nil</code>","text":"<p>Adds a violation with the provided message and code</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#add_violation(message,parameters)","title":"<code>#add_violation(message : String, parameters : Hash(String, String) = {} of String =&gt; String) : Nil</code>","text":"<p>Adds a violation with the provided message, and optionally parameters based on the node currently being validated.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#build_violation(message,code,value)","title":"<code>#build_violation(message : String, code : String, value : _) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Returns an <code>AVD::Violation::ConstraintViolationBuilderInterface</code> with the provided message, and code, and value.</p> <p>The provided value is added to the violations' parameters as <code>\"{{ value }}\"</code>.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#build_violation(message,code)","title":"<code>#build_violation(message : String, code : String) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Returns an <code>AVD::Violation::ConstraintViolationBuilderInterface</code> with the provided message, and code.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#build_violation(message,parameters)","title":"<code>#build_violation(message : String, parameters : Hash(String, String) = {} of String =&gt; String) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Returns an <code>AVD::Violation::ConstraintViolationBuilderInterface</code> with the provided message.</p> <p>Can be used to add additional information to the <code>AVD::Violation::ConstraintViolationInterface</code> being adding it to <code>self</code>.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#class_name","title":"<code>#class_name</code>","text":"<p>Returns the class that is currently being validated.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#constraint","title":"<code>#constraint : AVD::Constraint | ::Nil</code>","text":"<p>Returns the <code>AVD::Constraint</code> that is currently being validated, if any.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#group","title":"<code>#group : String | ::Nil</code>","text":"<p>Returns the group that is currently being validated, if any.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#metadata","title":"<code>#metadata : AVD::Metadata::MetadataInterface | ::Nil</code>","text":"<p>Returns an <code>AVD::Metadata::MetadataInterface</code> object for the value currently being validated.</p> <p>This would be an <code>AVD::Metadata::PropertyMetadataInterface</code> if the current value is an object, an <code>AVD::Metadata::GenericMetadata</code> if the current value is a plain value, and an <code>AVD::Metadata::ClassMetadata</code> if the current value value is an entire class.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#object","title":"<code>#object</code>","text":"<p>Returns the object that is currently being validated.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#object_container","title":"<code>#object_container : AVD::Container</code>","text":"<p>The object that is currently being validated.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#property_name","title":"<code>#property_name : String | ::Nil</code>","text":"<p>Returns the property name of the node currently being validated.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#property_path(path)","title":"<code>#property_path(path : String = \"\") : String</code>","text":"<p>Returns the path to the property that is currently being validated.</p> <p>For example, given a <code>Person</code> object that has an <code>Address</code> property; the property path would be empty initially.  When the <code>address</code> property is being validated the property_path would be <code>address</code>. When the street property of the related <code>Address</code> object is being validated the property_path would be <code>address.street</code>.</p> <p>This also works for collections of objects.  If the <code>Person</code> object had multiple addresses, the property path when validating the first street of the first address would be <code>addresses[0].street</code>.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#root","title":"<code>#root</code>","text":"<p>Returns the object initially passed to <code>AVD::Validator::ValidatorInterface#validate</code>.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#validator","title":"<code>#validator : AVD::Validator::ValidatorInterface</code>","text":"<p>Returns a reference to an <code>AVD::Validator::ValidatorInterface</code> that can be used to validate additional constraints as part of another constraint.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#value","title":"<code>#value</code>","text":"<p>Returns the value that is currently being validated.</p> View source"},{"location":"Validator/ExecutionContext/#Athena::Validator::ExecutionContext#violations","title":"<code>#violations : AVD::Violation::ConstraintViolationList</code>","text":"<p>Returns the <code>AVD::Violation::ConstraintViolationInterface</code> instances generated by the validator thus far.</p> View source"},{"location":"Validator/ExecutionContextInterface/","title":"ExecutionContextInterface","text":""},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface","title":"module <code>Athena::Validator::ExecutionContextInterface</code>","text":"<p>Stores contextual data related to the current validation run.</p> <p>This includes the violations generated so far, the current constraint, value being validated, etc.</p>"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface--adding-violations","title":"Adding Violations","text":"<p>As mentioned in the <code>AVD::ConstraintValidatorInterface</code> documentation, violations are not returned from the <code>AVD::ConstraintValidatorInterface#validate</code> method. Instead they are added to the <code>AVD::ConstraintValidatorInterface#context</code> instance.</p> <p>The simplest way to do so is via the <code>#add_violation</code> method, which accepts the violation message, and any parameters that should be used to render the message. Additional overloads exist to make adding a value with a specific message, and code, or message, code, and <code>{{ value }}</code> placeholder value easier.</p>"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface--building-violations","title":"Building violations","text":"<p>In some cases you may wish to add additional data to the <code>AVD::Violation::ConstraintViolationInterface</code> before adding it to <code>self</code>. To do this, you can also use the <code>#build_violation</code> method, which returns an <code>AVD::Violation::ConstraintViolationBuilderInterface</code> that can be used to construct a violation, with an easier API.</p> Direct including types <code>Athena::Validator::ExecutionContext</code>"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface-methods","title":"Methods","text":""},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#add_violation(message,code,value)","title":"abstract <code>#add_violation(message : String, code : String, value : _) : Nil</code>","text":"<p>Adds a violation with the provided message, and code, value parameter.</p> <p>The provided value is added to the violations' parameters as <code>\"{{ value }}\"</code>.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#add_violation(message,parameters)","title":"abstract <code>#add_violation(message : String, parameters : Hash(String, String) = {} of String =&gt; String) : Nil</code>","text":"<p>Adds a violation with the provided message, and optionally parameters based on the node currently being validated.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#add_violation(message,code)","title":"abstract <code>#add_violation(message : String, code : String) : Nil</code>","text":"<p>Adds a violation with the provided message and code</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#build_violation(message,code,value)","title":"abstract <code>#build_violation(message : String, code : String, value : _) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Returns an <code>AVD::Violation::ConstraintViolationBuilderInterface</code> with the provided message, and code, and value.</p> <p>The provided value is added to the violations' parameters as <code>\"{{ value }}\"</code>.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#build_violation(message,parameters)","title":"abstract <code>#build_violation(message : String, parameters : Hash(String, String) = {} of String =&gt; String) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Returns an <code>AVD::Violation::ConstraintViolationBuilderInterface</code> with the provided message.</p> <p>Can be used to add additional information to the <code>AVD::Violation::ConstraintViolationInterface</code> being adding it to <code>self</code>.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#build_violation(message,code)","title":"abstract <code>#build_violation(message : String, code : String) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Returns an <code>AVD::Violation::ConstraintViolationBuilderInterface</code> with the provided message, and code.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#class_name","title":"abstract <code>#class_name</code>","text":"<p>Returns the class that is currently being validated.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#constraint","title":"abstract <code>#constraint : AVD::Constraint | ::Nil</code>","text":"<p>Returns the <code>AVD::Constraint</code> that is currently being validated, if any.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#group","title":"abstract <code>#group : String | ::Nil</code>","text":"<p>Returns the group that is currently being validated, if any.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#metadata","title":"abstract <code>#metadata : AVD::Metadata::MetadataInterface | ::Nil</code>","text":"<p>Returns an <code>AVD::Metadata::MetadataInterface</code> object for the value currently being validated.</p> <p>This would be an <code>AVD::Metadata::PropertyMetadataInterface</code> if the current value is an object, an <code>AVD::Metadata::GenericMetadata</code> if the current value is a plain value, and an <code>AVD::Metadata::ClassMetadata</code> if the current value value is an entire class.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#object","title":"abstract <code>#object</code>","text":"<p>Returns the object that is currently being validated.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#property_name","title":"abstract <code>#property_name : String | ::Nil</code>","text":"<p>Returns the property name of the node currently being validated.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#property_path","title":"abstract <code>#property_path : String</code>","text":"<p>Returns the path to the property that is currently being validated.</p> <p>For example, given a <code>Person</code> object that has an <code>Address</code> property; the property path would be empty initially.  When the <code>address</code> property is being validated the property_path would be <code>address</code>. When the street property of the related <code>Address</code> object is being validated the property_path would be <code>address.street</code>.</p> <p>This also works for collections of objects.  If the <code>Person</code> object had multiple addresses, the property path when validating the first street of the first address would be <code>addresses[0].street</code>.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#root","title":"abstract <code>#root</code>","text":"<p>Returns the object initially passed to <code>AVD::Validator::ValidatorInterface#validate</code>.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#validator","title":"abstract <code>#validator : AVD::Validator::ValidatorInterface</code>","text":"<p>Returns a reference to an <code>AVD::Validator::ValidatorInterface</code> that can be used to validate additional constraints as part of another constraint.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#value","title":"abstract <code>#value</code>","text":"<p>Returns the value that is currently being validated.</p> View source"},{"location":"Validator/ExecutionContextInterface/#Athena::Validator::ExecutionContextInterface#violations","title":"abstract <code>#violations : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Returns the <code>AVD::Violation::ConstraintViolationInterface</code> instances generated by the validator thus far.</p> View source"},{"location":"Validator/Metadata/","title":"Metadata","text":""},{"location":"Validator/Metadata/#Athena::Validator::Metadata","title":"module <code>Athena::Validator::Metadata</code>","text":"<p>Contains types used to store metadata associated with a given <code>AVD::Validatable</code> instance.</p> <p>Most likely you won't have to work any of these directly. However if you are adding constraints manually to properties using the <code>self.load_metadata</code> method, you should be familiar with <code>AVD::Metadata::ClassMetadata</code>.</p>"},{"location":"Validator/Metadata/CascadingStrategy/","title":"CascadingStrategy","text":""},{"location":"Validator/Metadata/CascadingStrategy/#Athena::Validator::Metadata::CascadingStrategy","title":"enum <code>Athena::Validator::Metadata::CascadingStrategy</code>","text":"<p>Determines whether an object should be cascaded.</p> <p>If cascading is enabled, the validator will also validate embedded objects.</p>"},{"location":"Validator/Metadata/CascadingStrategy/#Athena::Validator::Metadata::CascadingStrategy-members","title":"Members","text":""},{"location":"Validator/Metadata/CascadingStrategy/#Athena::Validator::Metadata::CascadingStrategy::None","title":"<code>None = 0</code>","text":""},{"location":"Validator/Metadata/CascadingStrategy/#Athena::Validator::Metadata::CascadingStrategy::Cascade","title":"<code>Cascade = 1</code>","text":""},{"location":"Validator/Metadata/CascadingStrategy/#Athena::Validator::Metadata::CascadingStrategy-methods","title":"Methods","text":""},{"location":"Validator/Metadata/CascadingStrategy/#Athena::Validator::Metadata::CascadingStrategy#cascade?","title":"<code>#cascade?</code>","text":"View source"},{"location":"Validator/Metadata/CascadingStrategy/#Athena::Validator::Metadata::CascadingStrategy#none?","title":"<code>#none?</code>","text":"View source"},{"location":"Validator/Metadata/ClassMetadata/","title":"ClassMetadata","text":""},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata","title":"class <code>Athena::Validator::Metadata::ClassMetadata(T)</code> inherits <code>Reference</code>","text":"<p>Represents metadata associated with an <code>AVD::Validatable</code> instance.</p> <p><code>self</code> is lazily initialized and cached at the class level.</p> <p>Includes metadata about the class; such as its name, constraints, etc.</p> Included modules <code>Athena::Validator::Metadata::GenericMetadata</code>"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata-constructors","title":"Constructors","text":""},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata.build","title":"<code>.build : self</code>","text":"<p>Builds <code>self</code>, auto registering any annotation based annotations on <code>T</code>, as well as those registered via <code>T.load_metadata</code>.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata.new","title":"<code>.new</code>","text":"View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata-methods","title":"Methods","text":""},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#add_constraint(constraints)","title":"<code>#add_constraint(constraints : Array(AVD::Constraint)) : self</code>","text":"<p>Adds each of the provided constraints to <code>self</code>.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#add_constraint(constraint)","title":"<code>#add_constraint(constraint : AVD::Constraint) : self</code>","text":"<p>Adds the provided constraint to <code>self</code>'s <code>#constraints</code> array.</p> <p>Sets <code>#cascading_strategy</code> to <code>AVD::Metadata::CascadingStrategy::Cascade</code> if the constraint is <code>AVD::Constraints::Valid</code>.</p> <p>Also adds the <code>#class_name</code> based group via <code>AVD::Constraint#add_implicit_group</code>.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#add_getter_constraint(method_name,constraint)","title":"<code>#add_getter_constraint(method_name : String, constraint : AVD::Constraint) : self</code>","text":"<p>Adds the provided constraint to the provided method_name.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#add_property_constraint(property_name,constraints)","title":"<code>#add_property_constraint(property_name : String, constraints : Array(AVD::Constraint)) : self</code>","text":"<p>Adds each of the provided constraints to the provided property_name.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#add_property_constraint(property_name,constraint)","title":"<code>#add_property_constraint(property_name : String, constraint : AVD::Constraint) : self</code>","text":"<p>Adds the provided constraint to the provided property_name.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#add_property_constraints(property_hash)","title":"<code>#add_property_constraints(property_hash : Hash(String, AVD::Constraint | Array(AVD::Constraint))) : self</code>","text":"<p>Adds a hash of constraints to <code>self</code>, where the keys represent the property names, and the value is the constraint/array of constraints to add.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#class_name","title":"<code>#class_name : T.class</code>","text":"View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#constrained_properties","title":"<code>#constrained_properties : Array(String)</code>","text":"<p>Returns an array of the properties who <code>self</code> has constraints defined for.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#default_group","title":"<code>#default_group : String</code>","text":"<p>The <code>#class_name</code> based group for <code>self</code>.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#group_sequence","title":"<code>#group_sequence : AVD::Constraints::GroupSequence | ::Nil</code>","text":"<p>The <code>AVD::Constraints::GroupSequence</code> used by <code>self</code>, if any.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#group_sequence=(sequence)","title":"<code>#group_sequence=(sequence : Array(String) | AVD::Constraints::GroupSequence) : self</code>","text":"<p>Sets the <code>AVD::Constraints::GroupSequence</code> that should be used for <code>self</code>.</p> <p>Raises an <code>ArgumentError</code> if <code>self</code> is an <code>AVD::Constraints::GroupSequence::Provider</code>, the sequence contains <code>AVD::Constraint::DEFAULT_GROUP</code>, or the <code>#class_name</code> based group is missing.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#group_sequence_provider=(active)","title":"<code>#group_sequence_provider=(active : Bool) : Nil</code>","text":"<p>Denotes <code>self</code> as a <code>AVD::Constraints::GroupSequence::Provider</code>.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#has_property_metadata?(property_name)","title":"<code>#has_property_metadata?(property_name : String) : Bool</code>","text":"<p>Returns <code>true</code> if <code>self</code> has property metadata for the provided property_name.</p> View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#name","title":"<code>#name : String | ::Nil</code>","text":"View source"},{"location":"Validator/Metadata/ClassMetadata/#Athena::Validator::Metadata::ClassMetadata#property_metadata(property_name)","title":"<code>#property_metadata(property_name : String) : Array(AVD::Metadata::PropertyMetadataInterface)</code>","text":"<p>Returns an <code>AVD::Metadata::PropertyMetadataInterface</code> instance for the provided property_name, if any.</p> View source"},{"location":"Validator/Metadata/GenericMetadata/","title":"GenericMetadata","text":""},{"location":"Validator/Metadata/GenericMetadata/#Athena::Validator::Metadata::GenericMetadata","title":"module <code>Athena::Validator::Metadata::GenericMetadata</code>","text":"Included modules <code>Athena::Validator::Metadata::MetadataInterface</code> Direct including types <code>Athena::Validator::Metadata::ClassMetadata(T)</code> <code>Athena::Validator::Metadata::GetterMetadata(EntityType, MethodIdx)</code> <code>Athena::Validator::Metadata::PropertyMetadata(EntityType, PropertyIdx)</code>"},{"location":"Validator/Metadata/GenericMetadata/#Athena::Validator::Metadata::GenericMetadata-methods","title":"Methods","text":""},{"location":"Validator/Metadata/GenericMetadata/#Athena::Validator::Metadata::GenericMetadata#add_constraint(constraint)","title":"<code>#add_constraint(constraint : AVD::Constraint) : AVD::Metadata::GenericMetadata</code>","text":"<p>Adds the provided constraint to <code>self</code>'s <code>#constraints</code> array.</p> <p>Sets <code>#cascading_strategy</code> to <code>AVD::Metadata::CascadingStrategy::Cascade</code> if the constraint is <code>AVD::Constraints::Valid</code>.</p> View source"},{"location":"Validator/Metadata/GenericMetadata/#Athena::Validator::Metadata::GenericMetadata#add_constraints(constraints)","title":"<code>#add_constraints(constraints : Array(AVD::Constraint)) : AVD::Metadata::GenericMetadata</code>","text":"<p>Adds each of the provided constraints to <code>self</code>.</p> View source"},{"location":"Validator/Metadata/GenericMetadata/#Athena::Validator::Metadata::GenericMetadata#cascading_strategy","title":"<code>#cascading_strategy : AVD::Metadata::CascadingStrategy</code>","text":"<p>Returns the <code>AVD::Metadata::CascadingStrategy</code> for <code>self</code>.</p> View source"},{"location":"Validator/Metadata/GenericMetadata/#Athena::Validator::Metadata::GenericMetadata#constraints","title":"<code>#constraints : Array(AVD::Constraint)</code>","text":"View source"},{"location":"Validator/Metadata/GenericMetadata/#Athena::Validator::Metadata::GenericMetadata#find_constraints(group)","title":"<code>#find_constraints(group : String) : Array(AVD::Constraint)</code>","text":"<p>Returns an array of all constraints in the provided group.</p> View source"},{"location":"Validator/Metadata/GetterMetadata/","title":"GetterMetadata","text":""},{"location":"Validator/Metadata/GetterMetadata/#Athena::Validator::Metadata::GetterMetadata","title":"class <code>Athena::Validator::Metadata::GetterMetadata(EntityType, MethodIdx)</code> inherits <code>Reference</code>","text":"Included modules <code>Athena::Validator::Metadata::GenericMetadata</code> <code>Athena::Validator::Metadata::PropertyMetadataInterface</code>"},{"location":"Validator/Metadata/GetterMetadata/#Athena::Validator::Metadata::GetterMetadata-constructors","title":"Constructors","text":""},{"location":"Validator/Metadata/GetterMetadata/#Athena::Validator::Metadata::GetterMetadata.new(name)","title":"<code>.new(name : String)</code>","text":"View source"},{"location":"Validator/Metadata/GetterMetadata/#Athena::Validator::Metadata::GetterMetadata-methods","title":"Methods","text":""},{"location":"Validator/Metadata/GetterMetadata/#Athena::Validator::Metadata::GetterMetadata#class_name","title":"<code>#class_name : EntityType.class</code>","text":"<p>Returns the class the method <code>self</code> represents, belongs to.</p> View source"},{"location":"Validator/Metadata/GetterMetadata/#Athena::Validator::Metadata::GetterMetadata#name","title":"<code>#name : String</code>","text":"<p>Returns the name of the member represented by <code>self</code>.</p> View source"},{"location":"Validator/Metadata/MetadataFactory/","title":"MetadataFactory","text":""},{"location":"Validator/Metadata/MetadataFactory/#Athena::Validator::Metadata::MetadataFactory","title":"class <code>Athena::Validator::Metadata::MetadataFactory</code> inherits <code>Reference</code>","text":"<p>Basic implementation of <code>AVD::Metadata::MetadataFactoryInterface</code>.</p> Included modules <code>Athena::Validator::Metadata::MetadataFactoryInterface</code>"},{"location":"Validator/Metadata/MetadataFactory/#Athena::Validator::Metadata::MetadataFactory-methods","title":"Methods","text":""},{"location":"Validator/Metadata/MetadataFactory/#Athena::Validator::Metadata::MetadataFactory#metadata(object)","title":"<code>#metadata(object : AVD::Validatable) : AVD::Metadata::ClassMetadata</code>","text":"<p>Returns an <code>AVD::Metadata::ClassMetadata</code> instance for the related <code>AVD::Validatable</code> object.</p> View source"},{"location":"Validator/Metadata/MetadataFactoryInterface/","title":"MetadataFactoryInterface","text":""},{"location":"Validator/Metadata/MetadataFactoryInterface/#Athena::Validator::Metadata::MetadataFactoryInterface","title":"module <code>Athena::Validator::Metadata::MetadataFactoryInterface</code>","text":"Direct including types <code>Athena::Validator::Metadata::MetadataFactory</code> <code>Athena::Validator::Spec::MockMetadataFactory(T1, T2, T3, T4, T5)</code>"},{"location":"Validator/Metadata/MetadataFactoryInterface/#Athena::Validator::Metadata::MetadataFactoryInterface-methods","title":"Methods","text":""},{"location":"Validator/Metadata/MetadataFactoryInterface/#Athena::Validator::Metadata::MetadataFactoryInterface#metadata(object)","title":"abstract <code>#metadata(object : AVD::Validatable) : AVD::Metadata::ClassMetadata</code>","text":"<p>Returns an <code>AVD::Metadata::ClassMetadata</code> instance for the related <code>AVD::Validatable</code> object.</p> View source"},{"location":"Validator/Metadata/MetadataInterface/","title":"MetadataInterface","text":""},{"location":"Validator/Metadata/MetadataInterface/#Athena::Validator::Metadata::MetadataInterface","title":"module <code>Athena::Validator::Metadata::MetadataInterface</code>","text":"Direct including types <code>Athena::Validator::Metadata::GenericMetadata</code> <code>Athena::Validator::Metadata::PropertyMetadataInterface</code>"},{"location":"Validator/Metadata/MetadataInterface/#Athena::Validator::Metadata::MetadataInterface-methods","title":"Methods","text":""},{"location":"Validator/Metadata/MetadataInterface/#Athena::Validator::Metadata::MetadataInterface#cascading_strategy","title":"abstract <code>#cascading_strategy : AVD::Metadata::CascadingStrategy</code>","text":"<p>Returns the <code>AVD::Metadata::CascadingStrategy</code> for <code>self</code>.</p> View source"},{"location":"Validator/Metadata/MetadataInterface/#Athena::Validator::Metadata::MetadataInterface#constraints","title":"abstract <code>#constraints : Array(AVD::Constraint)</code>","text":"View source"},{"location":"Validator/Metadata/MetadataInterface/#Athena::Validator::Metadata::MetadataInterface#find_constraints(group)","title":"abstract <code>#find_constraints(group : String) : Array(AVD::Constraint)</code>","text":"<p>Returns an array of all constraints in the provided group.</p> View source"},{"location":"Validator/Metadata/PropertyMetadata/","title":"PropertyMetadata","text":""},{"location":"Validator/Metadata/PropertyMetadata/#Athena::Validator::Metadata::PropertyMetadata","title":"class <code>Athena::Validator::Metadata::PropertyMetadata(EntityType, PropertyIdx)</code> inherits <code>Reference</code>","text":"Included modules <code>Athena::Validator::Metadata::GenericMetadata</code> <code>Athena::Validator::Metadata::PropertyMetadataInterface</code>"},{"location":"Validator/Metadata/PropertyMetadata/#Athena::Validator::Metadata::PropertyMetadata-constructors","title":"Constructors","text":""},{"location":"Validator/Metadata/PropertyMetadata/#Athena::Validator::Metadata::PropertyMetadata.new(name)","title":"<code>.new(name : String)</code>","text":"View source"},{"location":"Validator/Metadata/PropertyMetadata/#Athena::Validator::Metadata::PropertyMetadata-methods","title":"Methods","text":""},{"location":"Validator/Metadata/PropertyMetadata/#Athena::Validator::Metadata::PropertyMetadata#class_name","title":"<code>#class_name : EntityType.class</code>","text":"<p>Returns the class the property <code>self</code> represents, belongs to.</p> View source"},{"location":"Validator/Metadata/PropertyMetadata/#Athena::Validator::Metadata::PropertyMetadata#name","title":"<code>#name : String</code>","text":"<p>Returns the name of the member represented by <code>self</code>.</p> View source"},{"location":"Validator/Metadata/PropertyMetadataInterface/","title":"PropertyMetadataInterface","text":""},{"location":"Validator/Metadata/PropertyMetadataInterface/#Athena::Validator::Metadata::PropertyMetadataInterface","title":"module <code>Athena::Validator::Metadata::PropertyMetadataInterface</code>","text":"<p>Stores metadata associated with a specific property.</p> Included modules <code>Athena::Validator::Metadata::MetadataInterface</code> Direct including types <code>Athena::Validator::Metadata::GetterMetadata(EntityType, MethodIdx)</code> <code>Athena::Validator::Metadata::PropertyMetadata(EntityType, PropertyIdx)</code>"},{"location":"Validator/Metadata/PropertyMetadataInterface/#Athena::Validator::Metadata::PropertyMetadataInterface-methods","title":"Methods","text":""},{"location":"Validator/Metadata/PropertyMetadataInterface/#Athena::Validator::Metadata::PropertyMetadataInterface#name","title":"abstract <code>#name : String</code>","text":"<p>Returns the name of the member represented by <code>self</code>.</p> View source"},{"location":"Validator/PropertyPath/","title":"PropertyPath","text":""},{"location":"Validator/PropertyPath/#Athena::Validator::PropertyPath","title":"module <code>Athena::Validator::PropertyPath</code>","text":"<p>Utility type for working with property paths.</p>"},{"location":"Validator/PropertyPath/#Athena::Validator::PropertyPath-class-methods","title":"Class methods","text":""},{"location":"Validator/PropertyPath/#Athena::Validator::PropertyPath.append(base_path,sub_path)","title":"<code>.append(base_path : String, sub_path : String) : String</code>","text":"<p>Appends the provided sub_path to the provided base_path based on the following rules:</p> <ul> <li>If the base path is empty, the sub path is returned as is.</li> <li>If the base path is not empty, and the sub path starts with an <code>[</code>, the concatenation of the two paths is returned.</li> <li>If the base path is not empty, and the sub path does not start with an <code>[</code>, the concatenation of the two paths is returned, separated by a <code>.</code>.</li> </ul> <pre><code>AVD::PropertyPath.append \"\", \"sub_path\"          # =&gt; \"sub_path\"\nAVD::PropertyPath.append \"base_path\", \"[0]\"      # =&gt; \"base_path[0]\"\nAVD::PropertyPath.append \"base_path\", \"sub_path\" # =&gt; \"base_path.sub_path\"\n</code></pre> View source"},{"location":"Validator/ServiceConstraintValidator/","title":"ServiceConstraintValidator","text":""},{"location":"Validator/ServiceConstraintValidator/#Athena::Validator::ServiceConstraintValidator","title":"abstract class <code>Athena::Validator::ServiceConstraintValidator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":"<p>Extension of <code>AVD::ConstraintValidator</code> used to denote a service validator that can be used with Athena Dependency Injection.</p>"},{"location":"Validator/Spec/","title":"Spec","text":""},{"location":"Validator/Spec/#Athena::Validator::Spec","title":"module <code>Athena::Validator::Spec</code>","text":"<p>A set of testing utilities/types to aid in testing <code>Athena::Validator</code> related types.</p>"},{"location":"Validator/Spec/#Athena::Validator::Spec--getting-started","title":"Getting Started","text":"<p>Require this module in your <code>spec_helper.cr</code> file.</p> <pre><code># This also requires \"spec\" and \"athena-spec\".\nrequire \"athena-validator/spec\"\n</code></pre> <p>Add <code>Athena::Spec</code> as a development dependency, then run a <code>shards install</code>. See the individual types for more information.</p>"},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/","title":"ComparisonConstraintValidatorTestCase","text":""},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase","title":"abstract struct <code>Athena::Validator::Spec::ComparisonConstraintValidatorTestCase</code> inherits <code>Athena::Validator::Spec::ConstraintValidatorTestCase</code>","text":"<p>Extension of <code>AVD::Spec::ConstraintValidatorTestCase</code> used for testing <code>AVD::Constraints::AbstractComparison</code> based constraints.</p>"},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase--example","title":"Example","text":"<p>Using the spec from <code>AVD::Constraints::EqualTo</code>:</p> <pre><code># Makes for a bit less typing when needing to reference the constraint.\nprivate alias CONSTRAINT = AVD::Constraints::EqualTo\n\n# Define our test case inheriting from the abstract `ComparisonConstraintValidatorTestCase`.\nstruct EqualToValidatorTest &lt; AVD::Spec::ComparisonConstraintValidatorTestCase\n  # Returns a Tuple of Tuples representing valid comparisons.\n  # The first item  is the actual value and the second item is the expected value.\n  def valid_comparisons : Tuple\n    {\n      {3, 3},\n      {'a', 'a'},\n      {\"a\", \"a\"},\n      {Time.utc(2020, 4, 7), Time.utc(2020, 4, 7)},\n      {nil, false},\n    }\n  end\n\n  # Returns a Tuple of Tuples representing invalid comparisons.\n  # The first item  is the actual value and the second item is the expected value.\n  def invalid_comparisons : Tuple\n    {\n      {1, 3},\n      {'b', 'a'},\n      {\"b\", \"a\"},\n      {Time.utc(2020, 4, 8), Time.utc(2020, 4, 7)},\n    }\n  end\n\n  # The error code related to the current CONSTRAINT.\n  def error_code : String\n    CONSTRAINT::NOT_EQUAL_ERROR\n  end\n\n  # Implement some abstract defs to return the validator and constraint class.\n  def create_validator : AVD::ConstraintValidatorInterface\n    CONSTRAINT::Validator.new\n  end\n\n  def constraint_class : AVD::Constraint.class\n    CONSTRAINT\n  end\nend\n</code></pre>"},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase-methods","title":"Methods","text":""},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase#error_code","title":"abstract <code>#error_code : String</code>","text":"<p>The code for the current constraint.</p> View source"},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase#invalid_comparisons","title":"abstract <code>#invalid_comparisons : Tuple</code>","text":"<p>A <code>Tuple</code> of tuples representing invalid comparisons.</p> View source"},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase#test_invalid_comparisons(actual,expected)","title":"<code>#test_invalid_comparisons(actual, expected : T) : Nil forall T</code>","text":"View source"},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase#test_valid_comparisons(actual,expected)","title":"<code>#test_valid_comparisons(actual, expected) : Nil</code>","text":"View source"},{"location":"Validator/Spec/ComparisonConstraintValidatorTestCase/#Athena::Validator::Spec::ComparisonConstraintValidatorTestCase#valid_comparisons","title":"abstract <code>#valid_comparisons : Tuple</code>","text":"<p>A <code>Tuple</code> of tuples representing valid comparisons.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/","title":"ConstraintValidatorTestCase","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase","title":"abstract struct <code>Athena::Validator::Spec::ConstraintValidatorTestCase</code> inherits <code>Athena::Spec::TestCase</code>","text":"<p>Test case designed to make testing <code>AVD::ConstraintValidatorInterface</code> easier.</p>"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase--example","title":"Example","text":"<p>Using the spec from <code>AVD::Constraints::NotNil</code>:</p> <pre><code># Makes for a bit less typing when needing to reference the constraint.\nprivate alias CONSTRAINT = AVD::Constraints::NotNil\n\n# Define our test case inheriting from the abstract ConstraintValidatorTestCase.\nstruct NotNilValidatorTest &lt; AVD::Spec::ConstraintValidatorTestCase\n  @[DataProvider(\"valid_values\")]\n  def test_valid_values(value : _) : Nil\n    # Validate the value against a new instance of the constraint.\n    self.validator.validate value, self.new_constraint\n\n    # Assert no violations were added to the context.\n    self.assert_no_violation\n  end\n\n  # Use data providers to reduce duplication.\n  def valid_values : NamedTuple\n    {\n      string:       {\"\"},\n      bool_false:   {false},\n      bool_true:    {true},\n      zero:         {0},\n      null_pointer: {Pointer(Void).null},\n    }\n  end\n\n  def test_nil_is_invalid\n    # Validate an invalid value against a new instance of the constraint with a custom message.\n    self.validator.validate nil, self.new_constraint message: \"my_message\"\n\n    # Assert a violation with the expected message, code, and value parameter is added to the context.\n    self\n      .build_violation(\"my_message\", CONSTRAINT::IS_NULL_ERROR, nil)\n      .assert_violation\n  end\n\n  # Implement some abstract defs to return the validator and constraint class.\n  private def create_validator : AVD::ConstraintValidatorInterface\n    CONSTRAINT::Validator.new\n  end\n\n  private def constraint_class : AVD::Constraint.class\n    CONSTRAINT\n  end\nend\n</code></pre> <p>This type is an extension of <code>ASPEC::TestCase</code>, see that type for more information on this testing approach. This approach also allows using <code>ASPEC::TestCase::DataProvider</code>s for reducing duplication within your test.</p> Direct known subclasses <code>Athena::Validator::Spec::ComparisonConstraintValidatorTestCase</code>"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase-methods","title":"Methods","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#assert_no_violation(*,file,line)","title":"<code>#assert_no_violation(*, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts that no violations were added to the context.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#assert_violation(message,code,value)","title":"<code>#assert_violation(message : String, code : String, value : _) : Nil</code>","text":"<p>Asserts a violation with the provided message, code, and value parameter was added to the context.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#assert_violation(message,code)","title":"<code>#assert_violation(message : String, code : String) : Nil</code>","text":"<p>Asserts a violation with the provided provided message, and code was added to the context.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#assert_violation(message)","title":"<code>#assert_violation(message : String) : Nil</code>","text":"<p>Asserts a violation with the provided message was added to the context.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#build_violation(message,code,value)","title":"<code>#build_violation(message : String, code : String, value : _) : AVD::Spec::ConstraintValidatorTestCase::Assertion</code>","text":"<p>Returns an <code>AVD::Spec::ConstraintValidatorTestCase::Assertion</code> with the provided message, code, and value parameter preset.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#build_violation(message,code)","title":"<code>#build_violation(message : String, code : String) : AVD::Spec::ConstraintValidatorTestCase::Assertion</code>","text":"<p>Returns an <code>AVD::Spec::ConstraintValidatorTestCase::Assertion</code> with the provided message, and code preset.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#build_violation(message)","title":"<code>#build_violation(message : String) : AVD::Spec::ConstraintValidatorTestCase::Assertion</code>","text":"<p>Returns an <code>AVD::Spec::ConstraintValidatorTestCase::Assertion</code> with the provided message preset.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#constraint_class","title":"abstract <code>#constraint_class : AVD::Constraint.class</code>","text":"<p>Returns the class of the constraint being tested.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#context","title":"<code>#context : AVD::ExecutionContext</code>","text":"<p>Returns a reference to the context used for the current test.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#create_validator","title":"abstract <code>#create_validator : AVD::ConstraintValidatorInterface</code>","text":"<p>Returns a new validator instance for the constraint being tested.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#expect_validate_value_at(idx,property_path,value,constraints,groups)","title":"<code>#expect_validate_value_at(idx : Int32, property_path : String, value : _, constraints : Array(AVD::Constraint) | AVD::Constraint, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil)</code>","text":"<p>Asserts that a validation within a specific context occurs with the provided property_path, value, constraints, and optionally groups.</p> <p>See <code>CollectionValidatorTestCase</code> for an example.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#expect_violation_at(idx,value,constraint)","title":"<code>#expect_violation_at(idx : Int, value : _, constraint : AVD::Constraint) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Can be used to have a nested validator return the correct violations when used within another validator.</p> <p>Creates a separate validation context, validating the provided value against the provided constraint, causing the resulting violations to be returned from the inner validator as they would be in a non-test context.</p> <p>See <code>AVD::Constraints::ISIN::Validator</code>, and its related specs, for an example.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#new_constraint(**)","title":"<code>#new_constraint : AVD::Constraint</code>","text":"<p>Returns a new constraint instance based on <code>#constraint_class</code> and the provided args.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#validator","title":"<code>#validator : AVD::ConstraintValidatorInterface</code>","text":"<p>Returns the validator instance returned via <code>#create_validator</code>.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/#Athena::Validator::Spec::ConstraintValidatorTestCase#value=(value)","title":"<code>#value=(value : Array(String) | String) : Nil</code>","text":"<p>Overrides the value/node currently being validated.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/","title":"Assertion","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion","title":"struct <code>Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion</code> inherits <code>Struct</code>","text":"<p>Used to assert that a violation added via the <code>AVD::ConstraintValidatorInterface</code> was built as expected.</p> <p>Note</p> <p>This type should not be instantiated directly, use <code>AVD::Spec::ConstraintValidatorTestCase#build_violation</code> instead.</p>"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion-constructors","title":"Constructors","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion.new(context,message,constraint)","title":"<code>.new(context : AVD::ExecutionContextInterface, message : String, constraint : AVD::Constraint)</code>","text":"View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion-methods","title":"Methods","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#add_parameter(key,value)","title":"<code>#add_parameter(key : String, value : _) : self</code>","text":"<p>Adds the provided key value pair to the expected violations' <code>AVD::Violation::ConstraintViolationInterface#parameters</code>.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#assert_violation(*,file,line)","title":"<code>#assert_violation(*, file : String = __FILE__, line : Int32 = __LINE__) : Nil</code>","text":"<p>Asserts that the violation added to the context equals the violation built via <code>self</code>.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#at_path(property_path)","title":"<code>#at_path(property_path : String) : self</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#property_path</code> on the expected violation.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#cause(cause)","title":"<code>#cause(cause : String | Nil) : self</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#cause</code> on the expected violation.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#clone","title":"<code>#clone</code>","text":"View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#code(code)","title":"<code>#code(code : String | Nil) : self</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#code</code> on the expected violation.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#constraint","title":"<code>#constraint : AVD::Constraint</code>","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#context","title":"<code>#context : AVD::ExecutionContextInterface</code>","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#copy_with(context,message,constraint)","title":"<code>#copy_with(context _context = @context, message _message = @message, constraint _constraint = @constraint)</code>","text":"View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#invalid_value(value)","title":"<code>#invalid_value(value : _) : self</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#invalid_value</code> on the expected violation.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#message","title":"<code>#message : String</code>","text":""},{"location":"Validator/Spec/ConstraintValidatorTestCase/Assertion/#Athena::Validator::Spec::ConstraintValidatorTestCase::Assertion#plural(plural)","title":"<code>#plural(plural : Int32) : self</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#plural</code> on the expected violation.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Spec/EntityGroupSequenceProvider/","title":"EntityGroupSequenceProvider","text":""},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider","title":"struct <code>Athena::Validator::Spec::EntityGroupSequenceProvider</code> inherits <code>Struct</code>","text":"<p>An <code>AVD::Validatable</code> entity using an <code>AVD::Constraints::GroupSequence</code> based group sequence.</p> Included modules <code>Athena::Validator::Constraints::GroupSequence::Provider</code> <code>Athena::Validator::Validatable</code> Extended modules <code>Athena::Validator::Validatable::Class</code>"},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider-constructors","title":"Constructors","text":""},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider.new(sequence)","title":"<code>.new(sequence : AVD::Constraints::GroupSequence)</code>","text":"View source"},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider-class-methods","title":"Class methods","text":""},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider.validation_class_metadata","title":"<code>.validation_class_metadata : AVD::Metadata::ClassMetadata(self)</code>","text":""},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider-methods","title":"Methods","text":""},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider#clone","title":"<code>#clone</code>","text":"View source"},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider#copy_with(sequence)","title":"<code>#copy_with(sequence _sequence = @sequence)</code>","text":"View source"},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider#group_sequence","title":"<code>#group_sequence : Array(String | Array(String)) | AVD::Constraints::GroupSequence</code>","text":"View source"},{"location":"Validator/Spec/EntityGroupSequenceProvider/#Athena::Validator::Spec::EntityGroupSequenceProvider#sequence","title":"<code>#sequence : AVD::Constraints::GroupSequence</code>","text":""},{"location":"Validator/Spec/EntitySequenceProvider/","title":"EntitySequenceProvider","text":""},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider","title":"struct <code>Athena::Validator::Spec::EntitySequenceProvider</code> inherits <code>Struct</code>","text":"<p>An <code>AVD::Validatable</code> entity using an <code>Array</code> based group sequence.</p> Included modules <code>Athena::Validator::Constraints::GroupSequence::Provider</code> <code>Athena::Validator::Validatable</code> Extended modules <code>Athena::Validator::Validatable::Class</code>"},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider-constructors","title":"Constructors","text":""},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider.new(sequence)","title":"<code>.new(sequence : Array(String | Array(String)))</code>","text":"View source"},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider-class-methods","title":"Class methods","text":""},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider.validation_class_metadata","title":"<code>.validation_class_metadata : AVD::Metadata::ClassMetadata(self)</code>","text":""},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider-methods","title":"Methods","text":""},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider#clone","title":"<code>#clone</code>","text":"View source"},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider#copy_with(sequence)","title":"<code>#copy_with(sequence _sequence = @sequence)</code>","text":"View source"},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider#group_sequence","title":"<code>#group_sequence : Array(String | Array(String)) | AVD::Constraints::GroupSequence</code>","text":"View source"},{"location":"Validator/Spec/EntitySequenceProvider/#Athena::Validator::Spec::EntitySequenceProvider#sequence","title":"<code>#sequence : Array(String | Array(String))</code>","text":""},{"location":"Validator/Spec/FailingConstraint/","title":"FailingConstraint","text":""},{"location":"Validator/Spec/FailingConstraint/#Athena::Validator::Spec::FailingConstraint","title":"class <code>Athena::Validator::Spec::FailingConstraint</code> inherits <code>Athena::Validator::Constraint</code>","text":"<p>A constraint that always adds a violation.</p>"},{"location":"Validator/Spec/FailingConstraint/#Athena::Validator::Spec::FailingConstraint-constructors","title":"Constructors","text":""},{"location":"Validator/Spec/FailingConstraint/#Athena::Validator::Spec::FailingConstraint.new(message,groups,payload)","title":"<code>.new(message : String = \"Failed\", groups : Array(String) | String | Nil = nil, payload : Hash(String, String) | Nil = nil)</code>","text":"View source"},{"location":"Validator/Spec/FailingConstraint/#Athena::Validator::Spec::FailingConstraint-methods","title":"Methods","text":""},{"location":"Validator/Spec/FailingConstraint/#Athena::Validator::Spec::FailingConstraint#validated_by","title":"<code>#validated_by : AVD::ConstraintValidator.class</code>","text":"<p>Returns the <code>AVD::ConstraintValidator.class</code> that should handle validating <code>self</code>.</p> View source"},{"location":"Validator/Spec/FailingConstraint/Validator/","title":"Validator","text":""},{"location":"Validator/Spec/FailingConstraint/Validator/#Athena::Validator::Spec::FailingConstraint::Validator","title":"class <code>Athena::Validator::Spec::FailingConstraint::Validator</code> inherits <code>Athena::Validator::ConstraintValidator</code>","text":""},{"location":"Validator/Spec/FailingConstraint/Validator/#Athena::Validator::Spec::FailingConstraint::Validator-methods","title":"Methods","text":""},{"location":"Validator/Spec/FailingConstraint/Validator/#Athena::Validator::Spec::FailingConstraint::Validator#validate(value,constraint)","title":"<code>#validate(value : _, constraint : FailingConstraint) : Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Spec/MockContextualValidator/","title":"MockContextualValidator","text":""},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator","title":"class <code>Athena::Validator::Spec::MockContextualValidator</code> inherits <code>Reference</code>","text":"<p>A spec implementation of <code>AVD::Validator::ContextualValidatorInterface</code>.</p> <p>Allows settings the violations that should be returned, defaulting to no violations.</p> Included modules <code>Athena::Validator::Validator::ContextualValidatorInterface</code>"},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator-constructors","title":"Constructors","text":""},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator.new(violations)","title":"<code>.new(violations : AVD::Violation::ConstraintViolationListInterface = AVD::Violation::ConstraintViolationList.new)</code>","text":"View source"},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator-methods","title":"Methods","text":""},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator#at_path(path)","title":"<code>#at_path(path : String) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Appends the provided path to the current <code>AVD::ExecutionContextInterface#property_path</code>.</p> View source"},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator#validate(value,constraints,groups)","title":"<code>#validate(value : _, constraints : Array(AVD::Constraint) | AVD::Constraint | Nil = nil, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator#validate_property(object,property_name,groups)","title":"<code>#validate_property(object : AVD::Validatable, property_name : String, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator#validate_property_value(object,property_name,value,groups)","title":"<code>#validate_property_value(object : AVD::Validatable, property_name : String, value : _, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator#violations","title":"<code>#violations : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Returns any violations that have been generated so far in the context of <code>self</code>.</p> View source"},{"location":"Validator/Spec/MockContextualValidator/#Athena::Validator::Spec::MockContextualValidator#violations=(violations)","title":"<code>#violations=(violations : AVD::Violation::ConstraintViolationListInterface)</code>","text":"View source"},{"location":"Validator/Spec/MockMetadataFactory/","title":"MockMetadataFactory","text":""},{"location":"Validator/Spec/MockMetadataFactory/#Athena::Validator::Spec::MockMetadataFactory","title":"struct <code>Athena::Validator::Spec::MockMetadataFactory(T1, T2, T3, T4, T5)</code> inherits <code>Struct</code>","text":"<p>A spec implementation of <code>AVD::Metadata::MetadataFactoryInterface</code>, supporting a fixed number of additional metadatas</p> Included modules <code>Athena::Validator::Metadata::MetadataFactoryInterface</code>"},{"location":"Validator/Spec/MockMetadataFactory/#Athena::Validator::Spec::MockMetadataFactory-constructors","title":"Constructors","text":""},{"location":"Validator/Spec/MockMetadataFactory/#Athena::Validator::Spec::MockMetadataFactory.new","title":"<code>.new</code>","text":"View source"},{"location":"Validator/Spec/MockMetadataFactory/#Athena::Validator::Spec::MockMetadataFactory-methods","title":"Methods","text":""},{"location":"Validator/Spec/MockMetadataFactory/#Athena::Validator::Spec::MockMetadataFactory#add_metadata(klass,metadata)","title":"<code>#add_metadata(klass : AVD::Validatable::Class, metadata : AVD::Metadata::ClassMetadata) : Nil</code>","text":"View source"},{"location":"Validator/Spec/MockMetadataFactory/#Athena::Validator::Spec::MockMetadataFactory#initialize","title":"<code>#initialize</code>","text":"View source"},{"location":"Validator/Spec/MockMetadataFactory/#Athena::Validator::Spec::MockMetadataFactory#metadata(object)","title":"<code>#metadata(object : AVD::Validatable) : AVD::Metadata::ClassMetadata</code>","text":"<p>Returns an <code>AVD::Metadata::ClassMetadata</code> instance for the related <code>AVD::Validatable</code> object.</p> View source"},{"location":"Validator/Spec/MockValidator/","title":"MockValidator","text":""},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator","title":"class <code>Athena::Validator::Spec::MockValidator</code> inherits <code>Reference</code>","text":"<p>A spec implementation of <code>AVD::Validator::ValidatorInterface</code>.</p> <p>Allows settings the violations that should be returned, defaulting to no violations. Also allows providing a block that is called for each validated value. E.g. to allow dynamically configuring the returned violations after it is instantiated.</p> Included modules <code>Athena::Validator::Validator::ValidatorInterface</code>"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator-constructors","title":"Constructors","text":""},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator.new(violations)","title":"<code>.new(violations : AVD::Violation::ConstraintViolationListInterface = AVD::Violation::ConstraintViolationList.new) : self</code>","text":"View source"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator.new(&)","title":"<code>.new</code>","text":"View source"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator-methods","title":"Methods","text":""},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator#in_context(context)","title":"<code>#in_context(context : AVD::ExecutionContextInterface) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Returns a validator in the provided context.</p> <p>Violations generated by the returned validator are added to the provided context.</p> View source"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator#start_context(root)","title":"<code>#start_context(root = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Creates a new <code>AVD::ExecutionContextInterface</code> and returns a new validator for that context.</p> <p>Violations generated by the returned validator can be accessed via <code>AVD::Validator::ContextualValidatorInterface#violations</code>.</p> View source"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator#validate(value,constraints,groups)","title":"<code>#validate(value : _, constraints : Array(AVD::Constraint) | AVD::Constraint | Nil = nil, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator#validate_property(object,property_name,groups)","title":"<code>#validate_property(object : AVD::Validatable, property_name : String, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator#validate_property_value(object,property_name,value,groups)","title":"<code>#validate_property_value(object : AVD::Validatable, property_name : String, value : _, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Spec/MockValidator/#Athena::Validator::Spec::MockValidator#violations_callback=(violations_callback)","title":"<code>#violations_callback=(violations_callback : Proc(AVD::Violation::ConstraintViolationListInterface))</code>","text":"View source"},{"location":"Validator/Validatable/","title":"Validatable","text":""},{"location":"Validator/Validatable/#Athena::Validator::Validatable","title":"module <code>Athena::Validator::Validatable</code>","text":"<p>When included, denotes that a type (class or struct) can be validated via <code>Athena::Validator</code>.</p>"},{"location":"Validator/Validatable/#Athena::Validator::Validatable--example","title":"Example","text":"<pre><code>class Example\n  include AVD::Validatable\n\n  def initialize(@name : String); end\n\n  @[Assert::NotBlank]\n  property name : String\nend\n\nAVD.validator.validate Example.new(\"Jim\")\n</code></pre> Direct including types <code>Athena::Validator::Spec::EntityGroupSequenceProvider</code> <code>Athena::Validator::Spec::EntitySequenceProvider</code>"},{"location":"Validator/Validator/","title":"Validator","text":""},{"location":"Validator/Validator/#Athena::Validator::Validator","title":"module <code>Athena::Validator::Validator</code>","text":"<p>Contains types related to the validator itself.</p>"},{"location":"Validator/Validator/ContextualValidatorInterface/","title":"ContextualValidatorInterface","text":""},{"location":"Validator/Validator/ContextualValidatorInterface/#Athena::Validator::Validator::ContextualValidatorInterface","title":"module <code>Athena::Validator::Validator::ContextualValidatorInterface</code>","text":"<p>A validator that validates in a specific <code>AVD::ExecutionContextInterface</code> instance.</p> Direct including types <code>Athena::Validator::Spec::MockContextualValidator</code> <code>Athena::Validator::Validator::RecursiveContextualValidator</code>"},{"location":"Validator/Validator/ContextualValidatorInterface/#Athena::Validator::Validator::ContextualValidatorInterface-methods","title":"Methods","text":""},{"location":"Validator/Validator/ContextualValidatorInterface/#Athena::Validator::Validator::ContextualValidatorInterface#at_path(path)","title":"abstract <code>#at_path(path : String) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Appends the provided path to the current <code>AVD::ExecutionContextInterface#property_path</code>.</p> View source"},{"location":"Validator/Validator/ContextualValidatorInterface/#Athena::Validator::Validator::ContextualValidatorInterface#validate(value,constraints,groups)","title":"abstract <code>#validate(value : _, constraints : Array(AVD::Constraint) | AVD::Constraint | Nil = nil, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Validates the provided value, optionally against the provided constraints, optionally using the provided groups. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if no groups are provided.</p> View source"},{"location":"Validator/Validator/ContextualValidatorInterface/#Athena::Validator::Validator::ContextualValidatorInterface#validate_property(object,property_name,groups)","title":"abstract <code>#validate_property(object : AVD::Validatable, property_name : String, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Validates a property of the provided object against the constraints defined for that property, optionally using the provided groups. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if no groups are provided.</p> View source"},{"location":"Validator/Validator/ContextualValidatorInterface/#Athena::Validator::Validator::ContextualValidatorInterface#validate_property_value(object,property_name,value,groups)","title":"abstract <code>#validate_property_value(object : AVD::Validatable, property_name : String, value : _, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Validates a value against the constraints defined on the property of the provided object. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if no groups are provided.</p> View source"},{"location":"Validator/Validator/ContextualValidatorInterface/#Athena::Validator::Validator::ContextualValidatorInterface#violations","title":"abstract <code>#violations : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Returns any violations that have been generated so far in the context of <code>self</code>.</p> View source"},{"location":"Validator/Validator/RecursiveContextualValidator/","title":"RecursiveContextualValidator","text":""},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator","title":"class <code>Athena::Validator::Validator::RecursiveContextualValidator</code> inherits <code>Reference</code>","text":"<p>A recursive implementation of <code>AVD::Validator::ContextualValidatorInterface</code>.</p> <p>See <code>Athena::Validator.validator</code>.</p> Included modules <code>Athena::Validator::Validator::ContextualValidatorInterface</code>"},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator-constructors","title":"Constructors","text":""},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator.new(context,constraint_validator_factory,metadata_factory)","title":"<code>.new(context : AVD::ExecutionContextInterface, constraint_validator_factory : AVD::ConstraintValidatorFactoryInterface, metadata_factory : AVD::Metadata::MetadataFactoryInterface)</code>","text":"View source"},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator-methods","title":"Methods","text":""},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator#at_path(path)","title":"<code>#at_path(path : String) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Appends the provided path to the current <code>AVD::ExecutionContextInterface#property_path</code>.</p> View source"},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator#validate(value,constraints,groups)","title":"<code>#validate(value : _, constraints : Array(AVD::Constraint) | AVD::Constraint | Nil = nil, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator#validate_property(object,property_name,groups)","title":"<code>#validate_property(object : AVD::Validatable, property_name : String, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator#validate_property_value(object,property_name,value,groups)","title":"<code>#validate_property_value(object : AVD::Validatable, property_name : String, value : _, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Validator/RecursiveContextualValidator/#Athena::Validator::Validator::RecursiveContextualValidator#violations","title":"<code>#violations : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Returns any violations that have been generated so far in the context of <code>self</code>.</p> View source"},{"location":"Validator/Validator/RecursiveValidator/","title":"RecursiveValidator","text":""},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator","title":"class <code>Athena::Validator::Validator::RecursiveValidator</code> inherits <code>Reference</code>","text":"<p>A recursive implementation of <code>AVD::Validator::ValidatorInterface</code>.</p> <p>See <code>Athena::Validator.validator</code>.</p> Included modules <code>Athena::Validator::Validator::ValidatorInterface</code>"},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator-constructors","title":"Constructors","text":""},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator.new(validator_factory,metadata_factory)","title":"<code>.new(validator_factory : AVD::ConstraintValidatorFactoryInterface | Nil = nil, metadata_factory : AVD::Metadata::MetadataFactoryInterface | Nil = nil)</code>","text":"View source"},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator-methods","title":"Methods","text":""},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator#in_context(context)","title":"<code>#in_context(context : AVD::ExecutionContextInterface) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Returns a validator in the provided context.</p> <p>Violations generated by the returned validator are added to the provided context.</p> View source"},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator#start_context(root)","title":"<code>#start_context(root = nil) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Creates a new <code>AVD::ExecutionContextInterface</code> and returns a new validator for that context.</p> <p>Violations generated by the returned validator can be accessed via <code>AVD::Validator::ContextualValidatorInterface#violations</code>.</p> View source"},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator#validate(value,constraints,groups)","title":"<code>#validate(value : _, constraints : Array(AVD::Constraint) | AVD::Constraint | Nil = nil, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator#validate_property(object,property_name,groups)","title":"<code>#validate_property(object : AVD::Validatable, property_name : String, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Validator/RecursiveValidator/#Athena::Validator::Validator::RecursiveValidator#validate_property_value(object,property_name,value,groups)","title":"<code>#validate_property_value(object : AVD::Validatable, property_name : String, value : _, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Validator/ValidatorInterface/","title":"ValidatorInterface","text":""},{"location":"Validator/Validator/ValidatorInterface/#Athena::Validator::Validator::ValidatorInterface","title":"module <code>Athena::Validator::Validator::ValidatorInterface</code>","text":"Direct including types <code>Athena::Validator::Spec::MockValidator</code> <code>Athena::Validator::Validator::RecursiveValidator</code>"},{"location":"Validator/Validator/ValidatorInterface/#Athena::Validator::Validator::ValidatorInterface-methods","title":"Methods","text":""},{"location":"Validator/Validator/ValidatorInterface/#Athena::Validator::Validator::ValidatorInterface#in_context(context)","title":"abstract <code>#in_context(context : AVD::ExecutionContextInterface) : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Returns a validator in the provided context.</p> <p>Violations generated by the returned validator are added to the provided context.</p> View source"},{"location":"Validator/Validator/ValidatorInterface/#Athena::Validator::Validator::ValidatorInterface#start_context","title":"abstract <code>#start_context : AVD::Validator::ContextualValidatorInterface</code>","text":"<p>Creates a new <code>AVD::ExecutionContextInterface</code> and returns a new validator for that context.</p> <p>Violations generated by the returned validator can be accessed via <code>AVD::Validator::ContextualValidatorInterface#violations</code>.</p> View source"},{"location":"Validator/Validator/ValidatorInterface/#Athena::Validator::Validator::ValidatorInterface#validate(value,constraints,groups)","title":"abstract <code>#validate(value : _, constraints : Array(AVD::Constraint) | AVD::Constraint | Nil = nil, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Validates the provided value, optionally against the provided constraints, optionally using the provided groups. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if no groups are provided.</p> View source"},{"location":"Validator/Validator/ValidatorInterface/#Athena::Validator::Validator::ValidatorInterface#validate_property(object,property_name,groups)","title":"abstract <code>#validate_property(object : AVD::Validatable, property_name : String, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Validates a property of the provided object against the constraints defined for that property, optionally using the provided groups. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if no groups are provided.</p> View source"},{"location":"Validator/Validator/ValidatorInterface/#Athena::Validator::Validator::ValidatorInterface#validate_property_value(object,property_name,value,groups)","title":"abstract <code>#validate_property_value(object : AVD::Validatable, property_name : String, value : _, groups : Array(String) | String | AVD::Constraints::GroupSequence | Nil = nil) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Validates a value against the constraints defined on the property of the provided object. <code>AVD::Constraint::DEFAULT_GROUP</code> is assumed if no groups are provided.</p> View source"},{"location":"Validator/Violation/","title":"Violation","text":""},{"location":"Validator/Violation/#Athena::Validator::Violation","title":"module <code>Athena::Validator::Violation</code>","text":"<p>Contains types related to constraint violations.</p>"},{"location":"Validator/Violation/ConstraintViolation/","title":"ConstraintViolation","text":""},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation","title":"struct <code>Athena::Validator::Violation::ConstraintViolation</code> inherits <code>Struct</code>","text":"<p>Basic implementation of <code>AVD::Violation::ConstraintViolationInterface</code>.</p> Included modules <code>Athena::Validator::Violation::ConstraintViolationInterface</code>"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation-constructors","title":"Constructors","text":""},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation.new(message,message_template,parameters,root,property_path,invalid_value_container,plural,code,constraint,cause)","title":"<code>.new(message : String, message_template : String | Nil, parameters : Hash(String, String), root : _, property_path : String, invalid_value_container : AVD::Container, plural : Int32 | Nil = nil, code : String | Nil = nil, constraint : AVD::Constraint | Nil = nil, cause : String | Nil = nil)</code>","text":"View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation-methods","title":"Methods","text":""},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#==(other)","title":"<code>#==(other : AVD::Violation::ConstraintViolationInterface) : Bool</code>","text":"<p>Returns <code>true</code> if other is the same as <code>self</code>, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#cause","title":"<code>#cause : String | ::Nil</code>","text":"<p>Returns the cause of the violation.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#code","title":"<code>#code : String | ::Nil</code>","text":"<p>Returns a unique machine readable error code representing <code>self.</code> All constraints of a specific \"type\" should have the same code.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#constraint","title":"<code>#constraint : AVD::Constraint</code>","text":"<p>Returns the <code>AVD::Constraint</code> whose validation caused the violation, if any.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#constraint?","title":"<code>#constraint? : AVD::Constraint | ::Nil</code>","text":"<p>:inherit:</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#invalid_value","title":"<code>#invalid_value</code>","text":"<p>Returns the value that caused the violation.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#message","title":"<code>#message : String</code>","text":"<p>Returns the violation message.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#message_template","title":"<code>#message_template : String | ::Nil</code>","text":"<p>Returns the raw violation message.</p> <p>The message template contains placeholders for the parameters returned via <code>#parameters</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#parameters","title":"<code>#parameters : Hash(String, String)</code>","text":"<p>Returns the parameters used to render the <code>#message_template</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#plural","title":"<code>#plural : Int32 | ::Nil</code>","text":"<p>Returns a number used to pluralize the violation message.</p> <p>The returned value is used to determine the right plurlaization form.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#property_path","title":"<code>#property_path : String</code>","text":"<p>Returns the path from the root element to the violation.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#root","title":"<code>#root</code>","text":"<p>Returns the element originally passed to the validator.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#to_json(builder)","title":"<code>#to_json(builder : JSON::Builder) : Nil</code>","text":"<p>Returns a <code>JSON</code> representation of <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolation/#Athena::Validator::Violation::ConstraintViolation#to_s(io)","title":"<code>#to_s(io : IO) : Nil</code>","text":"<p>Returns a string representation of <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/","title":"ConstraintViolationBuilder","text":""},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder","title":"class <code>Athena::Validator::Violation::ConstraintViolationBuilder</code> inherits <code>Reference</code>","text":"<p>Basic implementation of <code>AVD::Violation::ConstraintViolationBuilderInterface</code>.</p> Included modules <code>Athena::Validator::Violation::ConstraintViolationBuilderInterface</code>"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder-methods","title":"Methods","text":""},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#add","title":"<code>#add : Nil</code>","text":"<p>Adds the violation to the current <code>AVD::ExecutionContextInterface</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#add_parameter(key,value)","title":"<code>#add_parameter(key : String, value : _) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Adds a parameter with the provided key and value to the violations' <code>AVD::Violation::ConstraintViolationInterface#parameters</code>. The provided value is stringified via <code>#to_s</code> before being added to the parameters.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#at_path(path)","title":"<code>#at_path(path : String) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#property_path</code>.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#cause(cause)","title":"<code>#cause(cause : String | Nil) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#cause</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#code(code)","title":"<code>#code(code : String | Nil) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#code</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#constraint(constraint)","title":"<code>#constraint(constraint : AVD::Constraint | Nil) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#constraint</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#invalid_value(value)","title":"<code>#invalid_value(value : _) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#invalid_value</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#plural(number)","title":"<code>#plural(number : Int32) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets <code>AVD::Violation::ConstraintViolationInterface#plural</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilder/#Athena::Validator::Violation::ConstraintViolationBuilder#set_parameters(parameters)","title":"<code>#set_parameters(parameters : Hash(String, String)) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Overrides the entire <code>AVD::Violation::ConstraintViolationInterface#parameters</code> hash with the provided parameters.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/","title":"ConstraintViolationBuilderInterface","text":""},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface","title":"module <code>Athena::Validator::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>A Builder Pattern type for building <code>AVD::Violation::ConstraintViolationInterface</code>s.</p> <p>Allows using the methods defined on <code>self</code> to construct the desired violation before adding it to the context.</p> Direct including types <code>Athena::Validator::Violation::ConstraintViolationBuilder</code>"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface-methods","title":"Methods","text":""},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#add","title":"abstract <code>#add : Nil</code>","text":"<p>Adds the violation to the current <code>AVD::ExecutionContextInterface</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#add_parameter(key,value)","title":"abstract <code>#add_parameter(key : String, value : _) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Adds a parameter with the provided key and value to the violations' <code>AVD::Violation::ConstraintViolationInterface#parameters</code>. The provided value is stringified via <code>#to_s</code> before being added to the parameters.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#at_path(path)","title":"abstract <code>#at_path(path : String) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#property_path</code>.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#cause(cause)","title":"abstract <code>#cause(cause : String | Nil) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#cause</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#code(code)","title":"abstract <code>#code(code : String | Nil) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#code</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#constraint(constraint)","title":"abstract <code>#constraint(constraint : AVD::Constraint | Nil) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#constraint</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#invalid_value(value)","title":"abstract <code>#invalid_value(value : _) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets the <code>AVD::Violation::ConstraintViolationInterface#invalid_value</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#plural(number)","title":"abstract <code>#plural(number : Int32) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Sets <code>AVD::Violation::ConstraintViolationInterface#plural</code></p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationBuilderInterface/#Athena::Validator::Violation::ConstraintViolationBuilderInterface#set_parameters(parameters)","title":"abstract <code>#set_parameters(parameters : Hash(String, String)) : AVD::Violation::ConstraintViolationBuilderInterface</code>","text":"<p>Overrides the entire <code>AVD::Violation::ConstraintViolationInterface#parameters</code> hash with the provided parameters.</p> <p>Returns <code>self</code> for chaining.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/","title":"ConstraintViolationInterface","text":""},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface","title":"module <code>Athena::Validator::Violation::ConstraintViolationInterface</code>","text":"<p>Represents a violation of a constraint during validation.</p> <p>Each failed constraint that fails during validation; one or more violations are created. The violations store the violation message, the path to the failing element, and the root element originally passed to the validator.</p> Direct including types <code>Athena::Validator::Violation::ConstraintViolation</code>"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface-methods","title":"Methods","text":""},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#cause","title":"abstract <code>#cause : String | ::Nil</code>","text":"<p>Returns the cause of the violation.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#code","title":"abstract <code>#code : String | ::Nil</code>","text":"<p>Returns a unique machine readable error code representing <code>self.</code> All constraints of a specific \"type\" should have the same code.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#constraint","title":"abstract <code>#constraint : AVD::Constraint | ::Nil</code>","text":"<p>Returns the <code>AVD::Constraint</code> whose validation caused the violation, if any.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#invalid_value","title":"abstract <code>#invalid_value</code>","text":"<p>Returns the value that caused the violation.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#message","title":"abstract <code>#message : String</code>","text":"<p>Returns the violation message.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#message_template","title":"abstract <code>#message_template : String | ::Nil</code>","text":"<p>Returns the raw violation message.</p> <p>The message template contains placeholders for the parameters returned via <code>#parameters</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#parameters","title":"abstract <code>#parameters : Hash(String, String)</code>","text":"<p>Returns the parameters used to render the <code>#message_template</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#plural","title":"abstract <code>#plural : Int32 | ::Nil</code>","text":"<p>Returns a number used to pluralize the violation message.</p> <p>The returned value is used to determine the right plurlaization form.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#property_path","title":"abstract <code>#property_path : String</code>","text":"<p>Returns the path from the root element to the violation.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#root","title":"abstract <code>#root</code>","text":"<p>Returns the element originally passed to the validator.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#to_json(builder)","title":"abstract <code>#to_json(builder : JSON::Builder) : Nil</code>","text":"<p>Returns a <code>JSON</code> representation of <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationInterface/#Athena::Validator::Violation::ConstraintViolationInterface#to_s(io)","title":"abstract <code>#to_s(io : IO) : Nil</code>","text":"<p>Returns a string representation of <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/","title":"ConstraintViolationList","text":""},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList","title":"struct <code>Athena::Validator::Violation::ConstraintViolationList</code> inherits <code>Struct</code>","text":"<p>Basic implementation of <code>AVD::Violation::ConstraintViolationListInterface</code>.</p> Included modules <code>Athena::Validator::Violation::ConstraintViolationListInterface</code> <code>Indexable</code>"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList-constructors","title":"Constructors","text":""},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList.new(violations)","title":"<code>.new(violations : Array(AVD::Violation::ConstraintViolationInterface) = [] of AVD::Violation::ConstraintViolationInterface)</code>","text":"View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList-methods","title":"Methods","text":""},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#add(violation)","title":"<code>#add(violation : AVD::Violation::ConstraintViolationInterface) : Nil</code>","text":"<p>Adds the provided violation to <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#add(violations)","title":"<code>#add(violations : AVD::Violation::ConstraintViolationListInterface) : Nil</code>","text":"<p>Adds each of the provided violations to <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#find_by_code(error_code)","title":"<code>#find_by_code(error_code : String) : AVD::Violation::ConstraintViolationListInterface</code>","text":"<p>Returns a new <code>AVD::Violation::ConstraintViolationInterface</code> that conists only of violations with the provided error_code.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#has?(index)","title":"<code>#has?(index : Int) : Bool</code>","text":"<p>Returns <code>true</code> if a violation exists at the provided index, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#remove(index)","title":"<code>#remove(index : Int) : Nil</code>","text":"<p>Returns the violation at the provided index.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#set(index,violation)","title":"<code>#set(index : Int, violation : AVD::Violation::ConstraintViolationInterface) : Nil</code>","text":"<p>Sets the provided violation at the provided index.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#size","title":"<code>#size : Int</code>","text":"<p>Returns the number of elements in this container.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#to_json(builder)","title":"<code>#to_json(builder : JSON::Builder) : Nil</code>","text":"<p>Returns a <code>JSON</code> representation of <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationList/#Athena::Validator::Violation::ConstraintViolationList#to_s(io)","title":"<code>#to_s(io : IO) : Nil</code>","text":"<p>Returns a string representation of <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/","title":"ConstraintViolationListInterface","text":""},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface","title":"module <code>Athena::Validator::Violation::ConstraintViolationListInterface</code>","text":"<p>A wrapper type around an <code>Array(AVD::ConstraintViolationInterface)</code>.</p> Direct including types <code>Athena::Validator::Violation::ConstraintViolationList</code>"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface-methods","title":"Methods","text":""},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#add(violation)","title":"abstract <code>#add(violation : AVD::Violation::ConstraintViolationInterface) : Nil</code>","text":"<p>Adds the provided violation to <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#add(violations)","title":"abstract <code>#add(violations : AVD::Violation::ConstraintViolationListInterface) : Nil</code>","text":"<p>Adds each of the provided violations to <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#has?(index)","title":"abstract <code>#has?(index : Int) : Bool</code>","text":"<p>Returns <code>true</code> if a violation exists at the provided index, otherwise <code>false</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#remove(index)","title":"abstract <code>#remove(index : Int) : Nil</code>","text":"<p>Returns the violation at the provided index.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#set(index,violation)","title":"abstract <code>#set(index : Int, violation : AVD::Violation::ConstraintViolationInterface) : Nil</code>","text":"<p>Sets the provided violation at the provided index.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#size","title":"abstract <code>#size : Int</code>","text":"<p>Returns the number of violations in <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#to_json(builder)","title":"abstract <code>#to_json(builder : JSON::Builder) : Nil</code>","text":"<p>Returns a <code>JSON</code> representation of <code>self</code>.</p> View source"},{"location":"Validator/Violation/ConstraintViolationListInterface/#Athena::Validator::Violation::ConstraintViolationListInterface#to_s(io)","title":"abstract <code>#to_s(io : IO) : Nil</code>","text":"<p>Returns a string representation of <code>self</code>.</p> View source"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#conventions","title":"Conventions","text":"<p>The Why Athena? page explained some of the reasoning behind the why things are the way they are. The framework also has a few conventions related to a more organizational point of view.</p>"},{"location":"architecture/#namespaces","title":"Namespaces","text":"<p>The most obvious may be how each component is organized from a namespace perspective. All component namespaces exist within a common top level Athena namespace. Each component uses additional sub namespaces for organizational reasons, and as a means to have a place for common documentation.</p>"},{"location":"architecture/#aliases","title":"Aliases","text":"<p>Due to how Athena defines its namespaces, they can require a fair amount of typing due to the longer paths. To help alleviate this, each component defines one or more top level aliases to reduce the number of characters needed to refer to a component's types. For example, a controller needs to inherit from the <code>Athena::Framework::Controller</code> type, or <code>ATH::Controller</code> if using the ATH alias. Similarly, <code>Athena::Routing::Annotations::Get</code> could be shortened to <code>ARTA::Get</code> via the ARTA alias.</p> <p>In most cases, the component alias is three or four characters abbreviating the name of the component, always starting with an <code>A</code>. Components that also define numerous annotations may have another alias dedicated to those annotations types. This alias usually is the component alias with an <code>A</code>, short for annotations, suffix. E.g. ATHA or ARTA. Each component may also define additional aliases if needed, check the <code>Aliases</code> page in each component's API docs to see specifically what each component defines.</p>"},{"location":"architecture/#framework-architecture","title":"Framework Architecture","text":"<p>At a high level the Athena Framework's job is to interpret a request and create the appropriate response based on your application logic. Conceptually this could be broken down into three steps:</p> <ol> <li>Consume the request</li> <li>Apply application logic to determine what the response should be</li> <li>Return the response</li> </ol> <p>Steps 1 and 3 are handled via Crystal's HTTP::Server, while step 2 is where Athena fits in.</p>"},{"location":"architecture/#powered-by-events","title":"Powered By Events","text":"<p>Athena Framework is an event based framework, meaning it emits various events via the Event Dispatcher component during the life-cycle of a request. These events are listened on internally in order to handle each request; custom listeners on these events can also be registered. The flow of a request, and the related events that are dispatched, is depicted below in a visual format:</p> <p></p>"},{"location":"architecture/#1-request-event","title":"1. Request Event","text":"<p>The very first event that is dispatched is the ATH::Events::Request event and can have a variety of listeners. The primary purpose of this event is to create an ATH::Response directly, or to add information to the requests' attributes; a simple key/value store tied to request instance accessible via ATH::Request#attributes.</p> <p>In some cases the listener may have enough information to return an ATH::Response immediately. An example of this would be the ATH::Listeners::CORS listener. If enabled it is able to return a <code>CORS</code> preflight response even before routing is invoked.</p> <p>Warning</p> <p>If an ATH::Response is returned at this stage, the flow of the request skips directly to the response event. Future <code>Request</code> event listeners will not be invoked either.</p> <p>Another use case for this event is populating additional data into the request's attributes; such as the locale or format of the request.</p> <p>Request event in the Athena Framework</p> <p>This is the event that ATH::Listeners::Routing listens on to determine which ATH::Controller/ATH::Action pair should handle the request.</p> <p>See ATH::Controller for more details on routing.</p>"},{"location":"architecture/#2-action-event","title":"2. Action Event","text":"<p>The next event to be dispatched is the ATH::Events::Action event, assuming a response was not already returned within the request event. This event is dispatched after the related controller/action pair is determined, but before it is executed. This event is intended to be used when a listener requires information from the related ATH::Action; such as reading custom annotations off of it via the Config component.</p> <p>Action event in the Athena Framework</p> <p>This is the event that the ATH::Listeners::ParamFetcher listens on to resolve request parameters such as ATHA::QueryParams.</p>"},{"location":"architecture/#3-invoke-the-controller-action","title":"3. Invoke the Controller Action","text":"<p>This next step is not an event, but a important concept within the Athena Framework nonetheless; executing the controller action related to the current request.</p>"},{"location":"architecture/#argument-resolution","title":"Argument Resolution","text":"<p>Before the controller action can be invoked, the arguments, if any, to pass to it need to be determined. This is achieved via an ATH::Controller::ArgumentResolverInterface that facilitates gathering all the arguments. One or more ATHR::Interface will then be used to resolve each specific argument's value.</p> <p>Checkout ATH::Controller::ValueResolvers for a summary of the built-in resolvers, and the order in which they are invoked. Custom value resolves may be created &amp; registered to extend this functionality.</p> <p>Todo</p> <p>An additional event could possibly be added after the arguments have been resolved, but before invoking the controller action.</p>"},{"location":"architecture/#execute-the-controller-action","title":"Execute the Controller Action","text":"<p>The job of a controller action is to apply business/application logic to build a response for the related request; such as an HTML page, a JSON string, or anything else. How/what exactly this should be is up to the developer creating the application.</p>"},{"location":"architecture/#handle-the-response","title":"Handle the Response","text":"<p>The type of the value returned from the controller action determines what happens next. If the value is an ATH::Response, then it is used as is, skipping directly to the response event. However, if the value is NOT an ATH::Response, then the view is dispatched (since the framework needs an ATH::Response in order to have something to send back to the client).</p>"},{"location":"architecture/#4-view-event","title":"4. View Event","text":"<p>The ATH::Events::View event is only dispatched when the controller action does NOT return an ATH::Response. The purpose of this event is to turn the controller action's return value into an ATH::Response.</p> <p>An ATH::View may be used to customize the response, e.g. setting a custom response status and/or adding additional headers; while keeping the controller action response data intact.</p> <p>This event is intended to be used as a \"View\" layer; allowing scalar values/objects to be returned while listeners convert that value to the expected format (e.g. JSON, HTML, etc.). See the negotiation component for more information on this feature.</p> <p>View event in the Athena Framework</p> <p>By default the framework will JSON serialize any non ATH::Response values.</p>"},{"location":"architecture/#5-response-event","title":"5. Response Event","text":"<p>The end goal of the Athena Framework is to return an ATH::Response back to the client; which might be created within the request event, returned from the related controller action, or set within the view event. Regardless of how the response was created, the ATH::Events::Response event is dispatched directly after.</p> <p>The intended use case for this event is to allow for modifying the response object in some manner. Common examples include: add/edit headers, add cookies, change/compress the response body.</p>"},{"location":"architecture/#6-return-the-response","title":"6. Return the Response","text":"<p>The raw HTTP::Server::Response object is never directly exposed. The reasoning for this is to allow listeners to mutate the response before it is returned as mentioned in the response event section. If the raw response object was exposed, whenever any data is written to it it'll immediately be sent to the client and the status/headers will be locked; as mentioned in the Crystal API docs:</p> <p>The response <code>#status</code> and <code>#headers</code> must be configured before writing the response body. Once response output is written, changing the <code>#status</code> and <code>#headers</code> properties has no effect.</p> <p>Each ATH::Response has a ATH::Response::Writer instance that determines how the response should be written to the raw response's IO. By default it is written directly, but can be customized via the response, such as for compression.</p>"},{"location":"architecture/#7-terminate-event","title":"7. Terminate Event","text":"<p>The final event to be dispatched is the ATH::Events::Terminate event. This is event is dispatched after the response has been sent to the user.</p> <p>The intended use case for this event is to perform some \"heavy\" action after the user has received the response; as to not affect the response time of the request. E.x. queuing up emails or logs to be sent/written after a successful request.</p>"},{"location":"architecture/#8-exception-handling","title":"8. Exception Handling","text":"<p>If an exception is raised at anytime while a request is being handled, the ATH::Events::Exception is dispatched. The purpose of this event is to convert the exception into an ATH::Response. This is globally handled via an ATH::ErrorRendererInterface, with the default being to JSON serialize the exception.</p> <p>It is also possible to handle specific error states differently by registering multiple exception listeners to handle each case. An example of this could be to invoke some special logic only if the exception is of a specific type.</p> <p>See the error handling section in the getting started docs for more details on how error handling works in the Athena Framework.</p>"},{"location":"architecture/#further-reading","title":"Further Reading","text":"<p>The Athena Framework also more tightly integrates the rest of the components into itself. This section of the documentation includes sub-pages for each applicable component to describe how that component was integrated into the framework.</p>"},{"location":"architecture/config/","title":"Config","text":"<p>Athena includes the Athena::Config component as a means to configure an Athena application, which consists of two main aspects: ACF::Base and ACF::Parameters. <code>ACF::Base</code> relates to how a specific feature/component functions, e.g. the CORS Listener. <code>ACF::Parameters</code> represent reusable configuration values, e.g. a partner API URL for the current environment.</p>"},{"location":"architecture/config/#basics","title":"Basics","text":"<p>Both configuration and parameters make use of the same high level implementation. A type is used to \"model\" the structure and type of each value, whether it's a scalar value like a <code>String</code>, or another object. These types are then added into the base types provided by <code>Athena::Config</code>. This approach provides full compile time type safety both in the structure of the configuration/parameters, but also the type of each value. It also allows for plenty of flexibility in how each object is constructed.</p> <p>Tip</p> <p>Structs are the preferred type to use, especially for parameters.</p> <p>From an organizational standpoint, it is up to the user to determine how they wish to define/organize these configuration/parameter types. However, the suggested way is to use a central file that should require the individual custom types, for example:</p> <pre><code># config/config_one.cr\nrecord NestedParameters, id : Int32 = 1  \n\n# Define a struct to store some parameters;\n# a scalar value, and a nested object.\nstruct ConfigOne\n  getter do_something : Bool = true\n  getter nested_config : NestedConfig = NestedConfig.new\n\n  getter special_value : Float64\n\n  # Using getters with default values is the suggested way to handle simple/static types.\n  # An argless constructor can also be used to apply more custom logic to what the values should be.\n  def initialize\n    @special_value = # ...\n  end\nend\n\n# config/config_two.cr\nrecord ConfigTwo, keys : Array(String) = [\"a\", \"b\", \"c\"]\n\n# config.cr\nrequire \"./config/config_one\"\nrequire \"./config/config_two\"\n# ...\n\n# It is suggested to define custom parameter/configuration types within a dedicated namespace\n# e.g. `app`, in order to avoid conflicts with built in types and/or third party shards.\nstruct MyApp\n  getter config_one : ConfigOne = ConfigOne.new\n  getter config_two : ConfigTwo = ConfigTwo.new\nend\n\n# Add our configuration type into the base type.\nclass ACF::Base\n  getter app : MyApp = MyApp.new\nend\n</code></pre> <p>The parameters and configuration can be accessed directly via <code>ACF.parameters</code> and <code>ACF.config</code> respectively. However there are better ways; direct access is (mostly) discouraged.</p> <p>By default both <code>ACF::Base</code> and <code>ACF::Parameters</code> types are instantiated by calling <code>.new</code> on them without any arguments. However, <code>ACF.load_configuration</code> and/or <code>ACF.load_parameters</code> methods can be redefined to change how each object is created. An example of this could be deserializing a <code>YAML</code>, or other configuration type, file into the type itself.</p> <pre><code># Overload the method that supplies the `ACF::Base` object to create it from a configuration file.\n# NOTE: This of course assumes each configuration type includes `JSON::Serializable` or some other deserialization implementation.\ndef ACF.load_configuration : ACF::Base\n  # Use `File.read`, `File.open` could also have been used.\n  # NOTE: Both of these require the file be present with the built binary.\n  ACF::Base.from_json File.read \"./config.json\"\n\n  # Macro method `read_file` could also be used to embed the file contents in the binary.\n  ACF::Base.from_json {{read_file \"./config.json\"}}\nend\n</code></pre>"},{"location":"architecture/config/#customizing-built-in-types","title":"Customizing Built-in Types","text":"<p>While the process for defining/using custom configuration/parameter types is straightforward enough, an extra step is required to customize types owned by a third party shard, or Athena itself. The suggested approach is that customizable types expose a <code>self.configure</code> method that: returns <code>nil</code> (if the feature is optional), some preconfigured object (as an alias to <code>.new</code> with defaults), or not define one at all (if it should require the user implement it). This method would then be used in place of <code>.new</code>.</p> <pre><code>struct ThirdPartyParameters\n  # Alias to `.new` for default values, but allow them to be customized.\n  def self.configure : self\n    new\n  end\n\n  getter email : String\n\n  def initialize(@email : String = \"george@dietrich.app\")\nend\n\nclass Athena::Config::Parameters\n  getter some_extension : ThirdPartyParameters = ThirdPartyParameters.configure\nend\n</code></pre> <p>By default the <code>some_extension.email</code> parameter would be <code>george@dietrich.app</code>. However if the user wanted to customize this value they could redefine the <code>.configure</code> method and supply their own values. Having a dedicated method to override allows the type to retain custom initializer logic without forcing the user to determine if they need to use <code>previous_def</code>.</p> <pre><code>def ThirdPartyParameters.configure\n  new \"custom@email.com\"\nend\n</code></pre> <p>The user is free to use environmental variables or whatever other type of logic they wish to provide the custom values. The initializer of the type can also be referenced, such as to see what the configurable values are, their types, and any extra documentation provided by the owner.</p>"},{"location":"architecture/config/#using-parent-values","title":"Using Parent Values","text":"<p>Due to the nature of how the configuration and parameter types are constructed, values defined elsewhere in the same base type cannot be access directly, e.g. having something like this would result in an infinite recursion error.</p> <pre><code>struct MyParameters\n  getter admin_email : String = \"george@dietrich.app\"\n  getter nested_params : NestedParameters = NestedParameters.new\nend\n\nrecord NestedParameters, name : String = ACF.parameters.my_params.admin_email\n\nclass ACF::Parameters\n  getter my_params : MyParameters = MyParameters.new\nend \n</code></pre> <p>The workaround to this is to pass the values down through the types, e.g.</p> <pre><code>struct MyParameters\n  getter admin_email : String = \"george@dietrich.app\"\n\n  def initialize\n    @nested_params = NestedParameters.new self\n  end\nend\n\nstruct NestedParameters\n  @name : String\n\n  def initialize(my_parameters : MyParameters)\n    @name = my_parameters.admin_email\n  end\nend\n\nclass ACF::Parameters\n  getter my_params : MyParameters = MyParameters.new\nend\n</code></pre> <p>However, the recommended approach is to structure the types in such a way so that this is not required; such as by namespacing things less.</p>"},{"location":"architecture/config/#configuration","title":"Configuration","text":"<p>Configuration in Athena is mainly focused on \"configuring\" how specific features/components provided by Athena itself, or third parties, function at runtime. A more concrete example of the earlier section would be how ATH::Config::CORS can be used to control ATH::Listeners::CORS. Say we want to enable CORS for our application from our app URL, expose some custom headers, and allow credentials to be sent. To do this we would want to redefine the configuration type's <code>self.configure</code> method. This method should return an instance of <code>self</code>, configured how we wish. Alternatively, it could return <code>nil</code> to disable the listener, which is the default.</p> <pre><code>def ATH::Config::CORS.configure\n  new(\n    allow_credentials: true,\n    allow_origin: %(https://app.example.com),\n    expose_headers: %w(X-Transaction-ID X-Some-Custom-Header),\n  )\nend\n</code></pre> <p>Configuration objects may also be injected as you would any other service. This can be especially helpful for Athena extensions created by third parties whom services should be configurable by the end use. See the Configuration section in the DI component API documentation for details.</p>"},{"location":"architecture/config/#parameters","title":"Parameters","text":"<p>Parameters represent reusable values that are used to control the application's behavior, e.g. used within its configuration, or directly within the application's services. For example, the URL of the application is a common piece of information, used both in configuration and other services for redirects. This URl could be defined as a parameter to allow its definition to be centralized and reused.</p> <p>Parameters should NOT be used for values that rarely change, such as the max amount of items to return per page. These types of values are better suited to being a constant within the related type. Similarly, infrastructure related values that change from one machine to another, e.g. development machine to production server, should be defined using environmental variables. However, these values may still be exposed as parameters.</p> <p>Parameters are intended for values that do not change between machines, and control the application's behavior, e.g. the sender of notification emails, what features are enabled, or other high level application level values.</p> <pre><code># Assume we added our `AppParams` type to the base `ACF::Parameters` type\n# within our centralized configuration file, as mentioned in the \"Basics\" section.\nstruct AppParams\n  # Define a getter for our app's URL, fetching the value of it from `ENV`.\n  getter app_url : String = ENV[\"APP_URL\"]\n\n  # Define another parameter to represent if some_feature should be enabled.\n  getter some_feature_enable : Bool = Athena.environment != \"development\"\nend\n</code></pre> <p>We could now update the configuration from the earlier example to use this parameter.</p> <pre><code>def ATH::Config::CORS.configure : ATH::Config::CORS?\n  new(\n    allow_credentials: true,\n    allow_origin: [ACF.parameters.app.app_url],\n    expose_headers: %w(X-Transaction-ID X-Some-Custom-Header),\n  )\nend\n</code></pre> <p>With this change, the configuration is now decoupled from the current environment/location where the application is running. Common parameters could also be defined in their own shard in order to share the values between multiple applications. </p> <p>It is also possible to access the same parameter directly within a service via a feature of the Dependency Injection component. See the Parameters section for details.</p> <pre><code># Tell ADI what parameter we wish to inject as the `app_url` argument.\n# The value between the `%` represents the \"path\" to the value from the base `ACF::Parameters` type.\n# ADI.bind may also be used to more easily share commonly injected parameters.\n@[ADI::Register(_app_url: \"%app.app_url%\")]\nclass SomeService\n  def initialize(@app_url : String); end\nend\n</code></pre> <p>To reiterate, the primary benefit of parameters is to centralize and decouple their values from the types that actually use them. Another benefit is they offer full compile time safety, if for example, the type of <code>app_url</code> was mistakenly set to <code>Int32</code> or if the parameter's name was typo'd, e.g. <code>\"%app.ap_url%\"</code>; both would result in compile time errors.</p> <p>Note</p> <p>The only valid usecases for accessing parameters directly via <code>ACF.parameters</code> is within a configuration type, or a type outside of Athena's control/DI framework.</p>"},{"location":"architecture/config/#custom-annotations","title":"Custom Annotations","text":"<p>Athena integrates the <code>Config</code> component's ability to define custom annotation configurations. This feature allows developers to define custom annotations, and the data that should be read off of them, then apply/access the annotations on ATH::Controller and/or ATH::Actions.</p> <p>This is a powerful feature that allows for almost limitless flexibility/customization. Some ideas include: storing some value in the request attributes, raise an exception, invoke some external service; all based on the presence/absence of it, a value read off of it, or either/both of those in-conjunction with an external service.</p> <pre><code>require \"athena\"\n\n# Define our configuration annotation with an optional `name` argument.\n# A default value can also be provided, or made not nilable to be considered required.\nACF.configuration_annotation MyAnnotation, name : String? = nil\n\n# Define and register our listener that will do something based on our annotation.\n@[ADI::Register]\nclass MyAnnotationListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def on_view(event : ATH::Events::View) : Nil\n    # Represents all custom annotations applied to the current ATH::Action.\n    ann_configs = event.request.action.annotation_configurations\n\n    # Check if this action has the annotation\n    unless ann_configs.has? MyAnnotation\n      # Do something based on presence/absence of it.\n      # Would be executed for `ExampleController#one` since it does not have the annotation applied.\n    end\n\n    my_ann = ann_configs[MyAnnotation]\n\n    # Access data off the annotation.\n    if my_ann.name == \"Fred\"\n      # Do something if the provided name is/is not some value.\n      # Would be executed for `ExampleController#two` since it has the annotation applied, and name value equal to \"Fred\".\n    end\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"one\")]\n  def one : Int32\n    1\n  end\n\n  @[ARTA::Get(\"two\")]\n  @[MyAnnotation(name: \"Fred\")]\n  def two : Int32\n    2\n  end\nend\n\nATH.run\n</code></pre>"},{"location":"architecture/config/#pagination","title":"Pagination","text":"<p>A good example use case for custom annotations is the creation of a <code>Paginated</code> annotation that can be applied to controller actions to have them be paginated via the listener. Generic pagination can be implemented via listening on the view event which exposes the value returned via the related controller action.</p> <pre><code># Define our configuration annotation with the default pagination values.\n# These values can be overridden on a per endpoint basis.\nACF.configuration_annotation Paginated, page : Int32 = 1, per_page : Int32 = 100, max_per_page : Int32 = 1000\n\n# Define and register our listener that will handle paginating the response.\n@[ADI::Register]\nstruct PaginationListener\n  include AED::EventListenerInterface\n\n  private PAGE_QUERY_PARAM     = \"page\"\n  private PER_PAGE_QUERY_PARAM = \"per_page\"\n\n  # Use a high priority to ensure future listeners are working with the paginated data\n  @[AEDA::AsEventListener(priority: 255)]\n  def on_view(event : ATH::Events::View) : Nil\n    # Return if the endpoint is not paginated.\n    return unless (pagination = event.request.action.annotation_configurations[Paginated]?)\n\n    # Return if the action result is not able to be paginated.\n    return unless (action_result = event.action_result).is_a? Indexable\n\n    request = event.request\n\n    # Determine pagination values; first checking the request's query parameters,\n    # using the default values in the `Paginated` object if not provided.\n    page = request.query_params[PAGE_QUERY_PARAM]?.try &amp;.to_i || pagination.page\n    per_page = request.query_params[PER_PAGE_QUERY_PARAM]?.try &amp;.to_i || pagination.per_page\n\n    # Raise an exception if `per_page` is higher than the max.\n    raise ATH::Exceptions::BadRequest.new \"Query param 'per_page' should be '#{pagination.max_per_page}' or less.\" if per_page &gt; pagination.max_per_page\n\n    # Paginate the resulting data.\n    # In the future a more robust pagination service could be injected\n    # that could handle types other than `Indexable`, such as\n    # ORM `Collection` objects.\n    end_index = page * per_page\n    start_index = end_index - per_page\n\n    # Paginate and set the action's result.\n    event.action_result = action_result[start_index...end_index]\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"values\")]\n  @[Paginated(per_page: 2)]\n  def get_values : Array(Int32)\n    (1..10).to_a\n  end\nend\n\nATH.run\n\n# GET /values # =&gt; [1, 2]\n# GET /values?page=2 # =&gt; [3, 4]\n# GET /values?per_page=3 # =&gt; [1, 2, 3]\n# GET /values?per_page=3&amp;page=2 # =&gt; [4, 5, 6]\n</code></pre>"},{"location":"architecture/console/","title":"Console","text":"<p>The Athena Framework comes with a built-in integration with the Athena::Console component. This integration can be a way to define alternate entry points into your business logic, such as for use with scheduled jobs (Cron, Airflow, etc), or one-off internal/administrative things (running migrations, creating users, etc) all the while sharing the same dependencies due to it also leveraging dependency injection.</p>"},{"location":"architecture/console/#basic-usage","title":"Basic Usage","text":"<p>Similar to event listeners, console commands can simply be registered as a service to be automatically registered. If using the preferred ACONA::AsCommand annotation, they are registered in a lazy fashion, meaning only the command(s) you execute will actually be instantiated.</p> <pre><code>@[ADI::Register]\n@[ACONA::AsCommand(\"admin:create-user\", description: \"Creates a new internal user\")]\nclass AdminCreateUser &lt; ACON::Command\n  # A constructor can be defined to leverage existing services if applicable\n  #def initialize(\n  #  @some_serive : MyService\n  #)\n  #  # Just be sure to call `super()`!\n  #  super()\n  #end\n\n  # Configure the command by adding arguments, options, aliases, etc.\n  protected def configure : Nil\n    self\n      .argument(\"id\", :required, \"The employee's ID\")\n      .argument(\"name\", :required, \"The user's name\")\n      .argument(\"email\", :optional, \"The user's email. Assumed to be first.last if not provided\")\n      .option(\"admin\", nil, :none, \"If the user should be created as an internal admin\")\n  end\n\n  protected def execute(input : ACON::Input::Interface, output : ACON::Output::Interface) : ACON::Command::Status\n    # Provides a standardized format for how to display text in the terminal\n    style = ACON::Style::Athena.new input, output\n\n    input.argument \"id\", Int32   # =&gt; 12\n    name = input.argument \"name\" # =&gt; \"George Dietrich\"\n    input.argument \"email\"       # =&gt; nil\n    input.option \"admin\", Bool   # =&gt; true\n\n    # Implement your business logic\n\n    style.success \"Successfully created a user for #{name}!\"\n\n    # Note the command executed successfully\n    Status::SUCCESS\n  end\nend\n</code></pre> <p>From here, if the application was created using the skeleton, commands can be executed via <code>shards run console -- admin:create-user 12 \"George Dietrich\" --admin</code>. Otherwise see Athena::Console for how to setup your CLI entry point.</p> <p>Note</p> <p>During development the console needs to re-build the application in order to have access to the changes made since last execution. When deploying a production console binary, or if not doing any new console command dev, build it with the <code>--release</code> flag for increased performance locally.</p>"},{"location":"architecture/console/#built-in-commands","title":"Built-in Commands","text":"<p>The framework also comes with some helpful built-in commands to either help with debugging, or provide framework specific features. See each command within the ATH::Commands namespace for more information.</p>"},{"location":"architecture/dependency_injection/","title":"Dependency Injection","text":"<p>As mentioned in the Why Athena? page, dependency injection and dependency inversion play a major part in the overall design of the framework. In the context of the Athena Framework, each request has its own container instance that allows using services to share state without having to worry about it leaking between requests.</p> <p>The DI portion of the Athena Framework is quite powerful, checkout ADI::Register for more information on all its feature, or stop by the Discord for any questions.</p>"},{"location":"architecture/event_dispatcher/","title":"Event Dispatcher","text":"<p>As mentioned in the architecture section, Athena Framework is an event based framework utilizing the Event Dispatcher component as its form of middleware.</p>"},{"location":"architecture/event_dispatcher/#basic-usage","title":"Basic Usage","text":"<p>The primary use case for event listeners is to tap into the life-cycle of the request, such as adding common headers, setting state extracted from the request, or whatever else the application requires. Custom events may also be defined, but more on this soon.</p> <pre><code>require \"athena\"\n\n@[ADI::Register]\nclass CustomListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def on_response(event : ATH::Events::Response) : Nil\n    event.response.headers[\"FOO\"] = \"BAR\"\n  end\nend\n\nclass ExampleController &lt; ATH::Controller\n  get \"/\" do\n    \"Hello World\"\n  end\nend\n\nATH.run\n\n# GET / # =&gt; Hello World (with `FOO =&gt; BAR` header)\n</code></pre> <p>See AEDA::AsEventListener for more information.</p> <p>Tip</p> <p>A single event listener may listen on multiple events. Instance variables can be used to share state between the events.</p> <p>Warning</p> <p>The \"type\" of the listener has an effect on its behavior! When a <code>struct</code> service is retrieved or injected into a type, it will be a copy of the one in the SC (passed by value). This means that changes made to it in one type, will NOT be reflected in other types. A <code>class</code> service on the other hand will be a reference to the one in the SC. This allows it to share state between services.</p>"},{"location":"architecture/event_dispatcher/#custom-events","title":"Custom Events","text":"<p>Using events can be a helpful design pattern to allow for code that is easily extensible. An event represents something has happened where nobody may be interested in it, or in other words there may be zero or more listeners listening on a given event. A more concrete example is an event could be dispatched after some core piece of application logic. From here it would be easy to tap into when this logic is executed to perform some other follow up action, without increasing the complexity of the type that performs the core action. This also adheres to the single responsibility principle.</p> <pre><code>require \"athena\"\n\n# Define a custom event\nclass MyEvent &lt; AED::Event\n  property value : Int32\n\n  def initialize(@value : Int32); end\nend\n\n# Define a listener that listens our the custom event.\n@[ADI::Register]\nclass CustomEventListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def call(event : MyEvent) : Nil\n    event.value *= 10\n  end\nend\n\n# Register a controller as a service,\n# injecting the event dispatcher to handle processing our value.\n@[ADI::Register]\nclass ExampleController &lt; ATH::Controller\n  def initialize(@event_dispatcher : AED::EventDispatcherInterface); end\n\n  @[ARTA::Get(\"/{value}\")]\n  def get_value(value : Int32) : Int32\n    event = MyEvent.new value\n\n    @event_dispatcher.dispatch event\n\n    event.value\n  end\nend\n\nATH.run\n\n# GET /10 # =&gt; 100\n</code></pre>"},{"location":"architecture/negotiation/","title":"Negotiation","text":"<p>As mentioned in the view event documentation; this event is emitted whenever a controller action does NOT return an ATH::Response, with this value being JSON serialized by default. The Negotiation component enhances the view layer of the Athena Framework by enabling content negotiation support; making it possible to write format agnostic controllers by placing a layer of abstraction between the controller and generation of the final response content. Or in other words allow having the same controller action be rendered based on the request's Accept <code>HTTP</code> header and the format priority configuration.</p>"},{"location":"architecture/negotiation/#configuration","title":"Configuration","text":"<p>See the config component documentation for an overview on how configuration is handled in Athena Framework.</p>"},{"location":"architecture/negotiation/#negotiation","title":"Negotiation","text":"<p>The content negotiation logic is disabled by default, but can be easily enabled by redefining ATH::Config::ContentNegotiation.configure with the desired configuration. Content negotiation configuration is represented by an array of Rules used to describe allowed formats, their priorities, and how things should function if a unsupported format is requested.</p> <p>For example, say we configured things like:</p> <pre><code>def ATH::Config::ContentNegotiation.configure\n  new(\n    # Setting fallback_format to json means that instead of considering\n    # the next rule in case of a priority mismatch, json will be used.\n    Rule.new(priorities: [\"json\", \"xml\"], host: \"api.example.com\", fallback_format: \"json\"),\n    # Setting fallback_format to false means that instead of considering\n    # the next rule in case of a priority mismatch, a 406 will be returned.\n    Rule.new(path: /^\\/image/, priorities: [\"jpeg\", \"gif\"], fallback_format: false),\n    # Setting fallback_format to nil (or not including it) means that\n    # in case of a priority mismatch the next rule will be considered.\n    Rule.new(path: /^\\/admin/, priorities: [\"xml\", \"html\"]),\n    # Setting a priority to */* basically means any format will be matched.\n    Rule.new(priorities: [\"text/html\", \"*/*\"], fallback_format: \"html\"),\n  )\nend\n</code></pre> <p>Assuming an <code>accept</code> header with the value <code>text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8,application/json</code>: a request made to <code>/foo</code> from the <code>api.example.com</code> hostname; the request format would be <code>json</code>. If the request was not made from that hostname; the request format would be <code>html</code>. The rules can be as complex or as simple as needed depending on the use case of your application.</p>"},{"location":"architecture/negotiation/#view-handler","title":"View Handler","text":"<p>The ATH::View::ViewHandler is responsible for generating an ATH::Response in the format determined by the ATH::Listeners::Format, otherwise falling back on the request's format, defaulting to <code>json</code>. The view handler has a few configurable options that can be customized if so desired. This can be achieved via redefining Athena::Framework::Config::ViewHandler.configure.</p> <pre><code>def ATH::Config::ViewHandler.configure : ATH::Config::ViewHandler\n  new(\n    # The HTTP::Status to use if there is no response body, defaults to 204.\n    empty_content_status: :im_a_teapot,\n    # If `nil` values should be serialized, defaults to false.\n    emit_nil: true    \n  )\nend\n</code></pre>"},{"location":"architecture/negotiation/#usage","title":"Usage","text":""},{"location":"architecture/negotiation/#views","title":"Views","text":"<p>An ATH::View is intended to act as an in between returning raw data and an ATH::Response. In other words, it still invokes the view event, but allows customizing the response's status and headers. Convenience methods are defined in the base controller type to make creating views easier. E.g. ATH::Controller#view.</p>"},{"location":"architecture/negotiation/#view-format-handlers","title":"View Format Handlers","text":"<p>By default the Athena Framework uses <code>json</code> as the default response format. However it is possible to extend the ATH::View::ViewHandler to support additional, and even custom, formats. This is achieved by creating an ATH::View::FormatHandlerInterface instance that defines the logic needed to turn an ATH::View into an ATH::Response.</p> <p>The implementation can be as simple/complex as needed for the given format. Official handlers could be provided in the future for common formats such as <code>html</code>, probably via an integration with some form of tempting engine utilizing custom annotations to specify the format.</p>"},{"location":"architecture/negotiation/#addingcustomizing-formats","title":"Adding/Customizing Formats","text":"<p>ATH::Request::FORMATS represents the formats supported by default. However this list is not exhaustive and may need altered application to application; such as registering new formats.</p>"},{"location":"architecture/negotiation/#example","title":"Example","text":"<p>The following is a demonstration of how the various negotiation features can be used in conjunction. The example includes:</p> <ol> <li>Defining a custom ATH::View::ViewHandler for the <code>csv</code> format.</li> <li>Enabling content negotiation, supporting <code>json</code> and <code>csv</code> formats, falling back to <code>json</code>.</li> <li>An endpoint returning an ATH::View that sets a custom HTTP status.</li> </ol> <pre><code>require \"athena\"\nrequire \"csv\"\n\n# An interface to denote a type can provide its data in CSV format.\n#\n# An easier/more robust implementation can probably be thought of,\n# however this is mainly for demonstration purposes.\nmodule CSVRenderable\n  abstract def to_csv(builder : CSV::Builder) : Nil\nend\n\n# Define an example entity type.\nrecord User, id : Int64, name : String, email : String do\n  include CSVRenderable\n  include JSON::Serializable\n\n  # Define the headers this type has.\n  def self.headers : Enumerable(String)\n    {\n      \"id\",\n      \"name\",\n      \"email\",\n    }\n  end\n\n  def to_csv(builder : CSV::Builder) : Nil\n    # Add the related values based on `self.`\n    builder.row @id, @name, @email\n  end\nend\n\n# Register our handler as a service.\n@[ADI::Register]\nclass CSVFormatHandler\n  # Implement the interface.\n  include ATH::View::FormatHandlerInterface\n\n  # :inherit:\n  def call(view_handler : ATH::View::ViewHandlerInterface, view : ATH::ViewBase, request : ATH::Request, format : String) : ATH::Response\n    view_data = view.data\n\n    headers = if view_data.is_a? Enumerable\n                typeof(view_data.first).headers\n              else\n                view_data.class.headers\n              end\n\n    data = if view_data.is_a? Enumerable\n             view_data\n           else\n             {view_data}\n           end\n\n    # Assume each item has the same headers.\n    content = CSV.build do |csv|\n      csv.row headers\n\n      data.each do |r|\n        r.to_csv csv\n      end\n    end\n\n    # Return an ATH::Response with the rendered CSV content.\n    # Athena handles setting the proper content-type header based on the format.\n    # But could be overridden here if so desired.\n    ATH::Response.new content\n  end\n\n  # :inherit:\n  def format : String\n    \"csv\"\n  end\nend\n\n# Configure the format listener.\ndef ATH::Config::ContentNegotiation.configure\n  new(\n    # Allow json and csv formats, falling back on json if an unsupported format is requested.\n    Rule.new(priorities: [\"json\", \"csv\"], fallback_format: \"json\"),\n  )\nend\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/users\")]\n  def get_users : ATH::View(Array(User))\n    self.view([\n      User.new(1, \"Jim\", \"jim@example.com\"),\n      User.new(2, \"Bob\", \"bob@example.com\"),\n      User.new(3, \"Sally\", \"sally@example.com\"),\n    ], status: :im_a_teapot)\n  end\nend\n\nATH.run\n</code></pre>"},{"location":"architecture/routing/","title":"Routing","text":"<p>The Athena::Routing component is used to determine which ATH::Action should be handled via the incoming ART::Request. It provides a robust, performant router without the limitations of other Crystal routers, such as allowing multiple routes with the same path, using parameter validation and/or sub-domain routing to determine which one should be used. See ART::Route for more general information on the available features.</p> <p>Athena::Framework makes use of the routing component's annotations to configure its routes. All of the fields listed on ARTA::Route are supported and are applied to the underlying ART::Route. Some of them could be further integrated into the framework.</p>"},{"location":"architecture/routing/#url-generation","title":"URL Generation","text":"<p>The documentation mentioned in the getting started documentation is specific to usages within the context of a request. In this case, the scheme and hostname of a ART::Generator::ReferenceType::ABSOLUTE_URL defaults to <code>http</code> and <code>localhost</code> respectively, if they could not be extracted from the request. However, in cases where there is no request to use, such as within an ACON::Command, <code>http://localhost/</code> would always be the scheme and hostname of the generated URL. ATH::Parameters.configure can be used to customize this, as well as define a global path prefix when generating the URLs.</p>"},{"location":"architecture/serializer/","title":"Serializer","text":"<p>The Serializer component adds enhanced (de)serialization features. This component is mostly optional, but is integrated into the default view layer of the Athena Framework.</p> <p>When an ASR::Serializable is returned from a controller action, that object will be serialized via the serializer component, as opposed to Crystal's standard libraries' <code>#to_json</code> method.</p> <p>Info</p> <p>If an object implements both <code>ASR::Serializable</code> and <code>JSON::Serializable</code>, the serializer component takes priority.</p> <p>The ATHA::View annotation can be used to configure serialization related options on a per route basis.</p> <pre><code>require \"athena\"\n\nclass Article\n  include ASR::Serializable\n\n  # Assume this is defined via an ORM\n  def self.find(id : Int32)\n    new id, \"Crystal Lang 101\"\n  end\n\n  # These properties are exposed since they are either implicitly or expliticly a part of the `default` group.\n  getter id : Int32\n  getter name : String\n\n  @[ASRA::Groups(\"default\")]\n  property? published : Bool = false\n\n  # This property is not exposed since it is not part of the `default` group.\n  @[ASRA::Groups(\"detailed\")]\n  getter body : String = \"BODY\"\n\n  def initialize(@id : Int32, @name : String); end\nend\n\nclass ArticleController &lt; ATH::Controller\n  @[ARTA::Post(path: \"/publish/{id}\")]\n  @[ATHA::View(status: :accepted, serialization_groups: [\"default\"])]\n  def publish(id : Int32) : Article\n    article = Article.find id\n    article.published = true\n    article\n  end\nend\n\nATH.run\n\n# POST /publish/10 # =&gt; {\"id\":10,\"name\":\"Crystal Lang 101\",\"published\":true} - 202\n</code></pre> <p>See the API Docs for more detailed information, or this forum post for a quick overview.</p>"},{"location":"architecture/spec/","title":"Spec","text":"<p>As mentioned in the Why Athena? page, Athena strongly suggests following the SOLID design principles; especially the Dependency inversion principle in order to create types that are easy to test.</p> <p>If these principles are followed then any controller/service can easily be unit tested on their own as you would any Crystal type, possibly utilizing ASPEC::TestCase to provide helpful abstractions around common testing/helper logic for sets of common types.</p> <p>However, the framework also comes bundled with ATH::Spec::APITestCase to allow for easily creating integration tests for ATH::Controllers; which is the more ideal way to test a controller. Many helpful <code>HTTP</code> related expectations are also provided.</p> <pre><code>require \"athena\"\nrequire \"athena/spec\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ATHA::QueryParam(\"negative\")]\n  @[ARTA::Get(\"/add/{value1}/{value2}\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false) : Int32\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\nend\n\nstruct ExampleControllerTest &lt; ATH::Spec::APITestCase\n  def test_add_positive : Nil\n    self.get(\"/add/5/3\").body.should eq \"8\"\n  end\n\n  def test_add_negative : Nil\n    self.get(\"/add/5/3?negative=true\").body.should eq \"-8\"\n  end\nend\n\n# Run all test case tests.\nASPEC.run_all\n</code></pre> <p>Integration tests allow testing the full system, including event listeners, param converters, etc at once. These tests do not utilize an HTTP::Server which results in more performant specs.</p>"},{"location":"architecture/validator/","title":"Validator","text":"<p>The Validator component adds a robust/flexible validation framework. This component is also mostly optional, but is leveraged for the super useful ATHR::RequestBody resolver type to ensure only valid data make it into the system. This component can also be used to define validation requirements for ATH::Params::ParamInterfaces.</p>"},{"location":"architecture/validator/#custom-constraints","title":"Custom Constraints","text":"<p>In addition to the general information for defining Custom Constraints, the validator component defines a specific type for defining service based constraint validators: <code>AVD::ServiceConstraintValidator</code>. This type should be inherited from instead of <code>AVD::ConstraintValidator</code> IF the validator for your custom constraint needs to be a service, E.x.</p> <pre><code>class Athena::Validator::Constraints::CustomConstraint &lt; AVD::Constraint\n  # ...\n\n  @[ADI::Register]\n  struct Validator &lt; AVD::ServiceConstraintValidator\n    def initialize(...); end\n\n    # :inherit:\n    def validate(value : _, constraint : AVD::Constraints::CustomConstraint) : Nil\n      # ...\n    end\n  end\nend\n</code></pre> <p>See the API Docs documentation for more detailed information, or this forum post for a quick overview.</p>"},{"location":"getting_started/","title":"Getting Started","text":"<p>Athena does not have any other dependencies outside of Crystal and Shards. It is designed in such a way to be non-intrusive and not require a strict organizational convention in regards to how a project is setup; this allows it to use a minimal amount of setup boilerplate while not preventing it for more complex projects.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Add the dependency to your <code>shard.yml</code>:</p> <pre><code>dependencies:\n  athena:\n    github: athena-framework/framework\n    version: ~&gt; 0.18.0\n</code></pre> <p>Run <code>shards install</code>. This will install the framework component and its required component dependencies.</p> <p>Tip</p> <p>Check out the skeleton template repository to get up and running quickly.</p>"},{"location":"getting_started/#usage","title":"Usage","text":"<p>Athena Framework has a goal of being easy to start using for simple use cases, while still allowing flexibility/customizability for larger more complex use cases.</p>"},{"location":"getting_started/#routing","title":"Routing","text":"<p>The Athena Framework is a MVC based framework, as such, the logic to handle a given route is defined in an ATH::Controller class.</p> <pre><code>require \"athena\"\n\n# Define a controller\nclass ExampleController &lt; ATH::Controller\n  # Define an action to handle the related route\n  @[ARTA::Get(\"/\")]\n  def index : String\n    \"Hello World\"\n  end\n\n  # The macro DSL can also be used\n  get \"/\" do\n    \"Hello World\"\n  end\nend\n\n# Run the server\nATH.run\n\n# GET / # =&gt; Hello World\n</code></pre> <p>Routing is handled via the Athena::Routing component. It provides a flexible and robust foundation for handling determining which route should match a given request. It includes regex based requirements, host name restrictions, and priorities to allow defining routes with parameters at the same location among others. See the routing documentation for more information.</p> <p>Controllers are simply classes and routes are simply methods. Controllers and actions can be documented/tested as you would any Crystal class/method.</p>"},{"location":"getting_started/#route-parameters","title":"Route Parameters","text":"<p>Arguments are converted to their expected types if possible, otherwise an error response is automatically returned. The values are provided directly as method arguments, thus preventing the need for <code>env.params.url[\"name\"]</code> and any boilerplate related to it. Just like normal method arguments, default values can be defined. The method's return type adds some type safety to ensure the expected value is being returned.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/add/{value1}/{value2}\")]\n  @[ATHA::QueryParam(\"negative\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false) : Int32\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\nend\n\nATH.run\n\n# GET /add/2/3               # =&gt; 5\n# GET /add/5/5?negative=true # =&gt; -10\n# GET /add/foo/12            # =&gt; {\"code\":400,\"message\":\"Required parameter 'value1' with value 'foo' could not be converted into a valid 'Int32'\"}\n</code></pre> <p>Tip</p> <p>For more complex conversions, consider creating a Value Resolver to encapsulate the logic.</p> <p>ATHA::QueryParam and ATHA::RequestParams are defined via annotations and map directly to the method's arguments. See the related annotation docs for more information.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/\")]\n  @[ATHA::QueryParam(\"page\", requirements: /\\d{2}/)]\n  def index(page : Int32) : Int32\n    page\n  end\nend\n\nATH.run\n\n# GET /          # =&gt; {\"code\":422,\"message\":\"Parameter 'page' of value '' violated a constraint: 'This value should not be null.'\\n\"}\n# GET /?page=10  # =&gt; 10\n# GET /?page=bar # =&gt; {\"code\":400,\"message\":\"Required parameter 'page' with value 'bar' could not be converted into a valid 'Int32'.\"}\n# GET /?page=5   # =&gt; {\"code\":422,\"message\":\"Parameter 'page' of value '5' violated a constraint: 'Parameter 'page' value does not match requirements: (?-imsx:^(?-imsx:\\\\d{2})$)'\\n\"}\n</code></pre>"},{"location":"getting_started/#request-parameter","title":"Request Parameter","text":"<p>Restricting an action argument to ATH::Request will provide the raw request object. This can be useful to access data directly off the request object, such as consuming the request's body. This approach is fine for simple or one-off endpoints.</p> <p>Tip</p> <p>Check out ATHR::RequestBody for a better way to handle this.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Post(\"/data\")]\n  def data(request : ATH::Request) : String\n    raise ATH::Exceptions::BadRequest.new \"Request body is empty.\" unless body = request.body\n\n    JSON.parse(body).as_h[\"name\"].as_s\n  end\nend\n\nATH.run\n\n# POST /data body: {\"id\":1,\"name\":\"Jim\"} # =&gt; Jim\n</code></pre>"},{"location":"getting_started/#returning-raw-data","title":"Returning Raw Data","text":"<p>An ATH::Response can be used to fully customize the response; such as returning a specific status code, or adding some one-off headers.</p> <pre><code>require \"athena\"\nrequire \"mime\"\n\nclass ExampleController &lt; ATH::Controller\n  # A GET endpoint returning an `ATH::Response`.\n  # Can be used to return raw data, such as HTML or CSS etc, in a one-off manner.\n  @[ARTA::Get(\"/index\")]\n  def index : ATH::Response\n    ATH::Response.new(\n      \"&lt;h1&gt;Welcome to my website!&lt;/h1&gt;\",\n      headers: HTTP::Headers{\"content-type\" =&gt; MIME.from_extension(\".html\")}\n    )\n  end\nend\n\nATH.run\n\n# GET /index # =&gt; \"&lt;h1&gt;Welcome to my website!&lt;/h1&gt;\"\n</code></pre> <p>An ATH::Events::View is emitted if the returned value is NOT an ATH::Response. By default, non ATH::Responses are JSON serialized. However, this event can be listened on to customize how the value is serialized.</p>"},{"location":"getting_started/#streaming-response","title":"Streaming Response","text":"<p>By default <code>ATH::Response</code> content is written all at once to the response's <code>IO</code>. However in some cases the content may be too large to fit into memory. In this case an ATH::StreamedResponse may be used to stream the content back to the client.</p> <pre><code>require \"athena\"\nrequire \"mime\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(path: \"/users\")]\n  def users : ATH::Response\n    ATH::StreamedResponse.new headers: HTTP::Headers{\"content-type\" =&gt; \"application/json; charset=UTF-8\"} do |io|\n      User.all.to_json io\n    end\n  end\nend\n\nATH.run\n\n# GET /athena/users\" # =&gt; [{\"id\":1,...},...]\n</code></pre>"},{"location":"getting_started/#returning-files","title":"Returning Files","text":"<p>An ATH::BinaryFileResponse may be used to return static files/content. This response type handles caching, partial requests, and setting the relevant headers. The Athena Framework also supports downloading of dynamically generated content by using an ATH::Response with the content-disposition header. ATH::HeaderUtils.make_disposition can be used to easily build the header.</p> <pre><code>require \"athena\"\nrequire \"mime\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(path: \"/data/export\")]\n  def data_export : ATH::Response\n    # ...\n\n    ATH::Response.new(\n      content,\n      headers: HTTP::Headers{\n        \"content-disposition\" =&gt; ATH::HeaderUtils.make_disposition(:attachment, \"data.csv\"),\n        \"content-type\" =&gt; MIME.from_extension(\".csv\")\n      }\n    )\n  end\nend\n\nATH.run\n</code></pre>"},{"location":"getting_started/#static-files","title":"Static Files","text":"<p>Static files can also be served from an Athena application. This can be achieved by combining an ATH::BinaryFileResponse with the request event; checking if the request's path represents a file/directory within the application's public directory and returning the file if so.</p> <pre><code># Register a request event listener to handle returning static files.\n@[ADI::Register]\nstruct StaticFileListener\n  include AED::EventListenerInterface\n\n  # This could be parameter if the directory changes between environments.\n  private PUBLIC_DIR = Path.new(\"public\").expand\n\n  # Run this listener with a very high priority so it is invoked before any application logic.\n  @[AEDA::AsEventListener(priority: 256)]\n  def on_request(event : ATH::Events::Request) : Nil\n    # Fallback if the request method isn't intended for files.\n    # Alternatively, a 405 could be thrown if the server is dedicated to serving files.\n    return unless event.request.method.in? \"GET\", \"HEAD\"\n\n    original_path = event.request.path\n    request_path = URI.decode original_path\n\n    # File path cannot contains '\\0' (NUL).\n    if request_path.includes? '\\0'\n      raise ATH::Exceptions::BadRequest.new \"File path cannot contain NUL bytes.\"\n    end\n\n    request_path = Path.posix request_path\n    expanded_path = request_path.expand \"/\"\n\n    file_path = PUBLIC_DIR.join expanded_path.to_kind Path::Kind.native\n\n    is_dir = Dir.exists? file_path\n    is_dir_path = original_path.ends_with? '/'\n\n    event.response = if request_path != expanded_path || is_dir &amp;&amp; !is_dir_path\n                       redirect_path = expanded_path\n                       if is_dir &amp;&amp; !is_dir_path\n                         redirect_path = expanded_path.join \"\"\n                       end\n\n                       # Request is a directory but acting as a file,\n                       # redirect to the actual directory URL.\n                       ATH::RedirectResponse.new redirect_path\n                     elsif File.file? file_path\n                       ATH::BinaryFileResponse.new file_path\n                     else\n                       # Nothing to do.\n                       return\n                     end\n  end\nend\n</code></pre>"},{"location":"getting_started/#url-generation","title":"URL Generation","text":"<p>A common use case, especially when rendering <code>HTML</code>, is generating links to other routes based on a set of provided parameters.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  # Define a route to redirect to, explicitly naming this route `add`.\n  # The default route name is controller + method down snake-cased; e.x. `example_controller_add`.\n  @[ARTA::Get(\"/add/{value1}/{value2}\", name: \"add\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false) : Int32\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\n\n  # Define a route that redirects to the `add` route with fixed parameters.\n  @[ARTA::Get(\"/\")]\n  def redirect : ATH::RedirectResponse\n    # Generate a link to the other route.\n    url = self.generate_url \"add\", value1: 8, value2: 2\n\n    url # =&gt; /add/8/2\n\n    # Redirect to the user to the generated url.\n    self.redirect url\n\n    # Or could have used a method that does both\n    self.redirect_to_route \"add\", value1: 8, value2: 2\n  end\nend\n\nATH.run\n\n# GET / # =&gt; 10\n</code></pre> <p>Note</p> <p>URL generation has some gotchas when used outside of a request context. See the routing documentation for more information.</p> <p>See ART::Generator::Interface in the API Docs for more details.</p>"},{"location":"getting_started/#error-handling","title":"Error Handling","text":"<p>Exception handling in the Athena Framework is similar to exception handling in any Crystal program, with the addition of a new unique exception type, ATH::Exceptions::HTTPException. Custom <code>HTTP</code> errors can also be defined by inheriting from ATH::Exceptions::HTTPException or a child type. A use case for this could be allowing additional data/context to be included within the exception.</p> <p>Non ATH::Exceptions::HTTPException exceptions are represented as a <code>500 Internal Server Error</code>.</p> <p>When an exception is raised, the framework emits the ATH::Events::Exception event to allow an opportunity for it to be handled. By default these exceptions will return a <code>JSON</code> serialized version of the exception, via ATH::ErrorRenderer, that includes the message and code; with the proper response status set. If the exception goes unhandled, i.e. no listener sets an ATH::Response on the event, then the request is finished and the exception is re-raised.</p> <pre><code>require \"athena\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ARTA::Get(\"/divide/{num1}/{num2}\")]\n  def divide(num1 : Int32, num2 : Int32) : Int32\n    num1 // num2\n  end\n\n  @[ARTA::Get(\"/divide_rescued/{num1}/{num2}\")]\n  def divide_rescued(num1 : Int32, num2 : Int32) : Int32\n    num1 // num2\n    # Rescue a non `ATH::Exceptions::HTTPException`\n  rescue ex : DivisionByZeroError\n    # in order to raise an `ATH::Exceptions::HTTPException` to provide a better error message to the client.\n    raise ATH::Exceptions::BadRequest.new \"Invalid num2:  Cannot divide by zero\"\n  end\nend\n\nATH.run\n\n# GET /divide/10/0          # =&gt; {\"code\":500,\"message\":\"Internal Server Error\"}\n# GET /divide_rescued/10/0  # =&gt; {\"code\":400,\"message\":\"Invalid num2:  Cannot divide by zero\"}\n# GET /divide_rescued/10/10 # =&gt; 1\n</code></pre>"},{"location":"getting_started/#logging","title":"Logging","text":"<p>Logging is handled via Crystal's Log module. Athena Framework logs when a request matches a controller action, as well as any exception. This of course can be augmented with additional application specific messages.</p> <pre><code>2022-01-08T20:44:18.134423Z   INFO - athena.routing: Server has started and is listening at http://0.0.0.0:3000\n2022-01-08T20:44:19.773376Z   INFO - athena.routing: Matched route 'example_controller_divide' -- route: \"example_controller_divide\", route_parameters: {\"_route\" =&gt; \"example_controller_divide\", \"_controller\" =&gt; \"ExampleController#divide\", \"num1\" =&gt; \"10\", \"num2\" =&gt; \"0\"}, request_uri: \"/divide/10/0\", method: \"GET\"\n2022-01-08T20:44:19.892748Z  ERROR - athena.routing: Uncaught exception #&lt;DivisionByZeroError:Division by 0&gt; at /usr/lib/crystal/int.cr:141:7 in 'check_div_argument'\nDivision by 0 (DivisionByZeroError)\n  from /usr/lib/crystal/int.cr:141:7 in 'check_div_argument'\n  from /usr/lib/crystal/int.cr:105:5 in '//'\n  from src/components/framework/src/athena.cr:206:5 in 'divide'\n  from src/components/framework/src/ext/routing/annotation_route_loader.cr:8:5 in '-&gt;'\n  from /usr/lib/crystal/primitives.cr:266:3 in 'execute'\n  from src/components/framework/src/route_handler.cr:76:16 in 'handle_raw'\n  from src/components/framework/src/route_handler.cr:19:5 in 'handle'\n  from src/components/framework/src/athena.cr:161:27 in '-&gt;'\n  from /usr/lib/crystal/primitives.cr:266:3 in 'process'\n  from /usr/lib/crystal/http/server.cr:515:5 in 'handle_client'\n  from /usr/lib/crystal/http/server.cr:468:13 in '-&gt;'\n  from /usr/lib/crystal/primitives.cr:266:3 in 'run'\n  from /usr/lib/crystal/fiber.cr:98:34 in '-&gt;'\n  from ???\n\n2022-01-08T20:45:10.803001Z   INFO - athena.routing: Matched route 'example_controller_divide_rescued' -- route: \"example_controller_divide_rescued\", route_parameters: {\"_route\" =&gt; \"example_controller_divide_rescued\", \"_controller\" =&gt; \"ExampleController#divide_rescued\", \"num1\" =&gt; \"10\", \"num2\" =&gt; \"0\"}, request_uri: \"/divide_rescued/10/0\", method: \"GET\"\n2022-01-08T20:45:10.923945Z   WARN - athena.routing: Uncaught exception #&lt;Athena::Framework::Exceptions::BadRequest:Invalid num2:  Cannot divide by zero&gt; at src/components/framework/src/athena.cr:215:5 in 'divide_rescued'\nInvalid num2:  Cannot divide by zero (Athena::Framework::Exceptions::BadRequest)\n  from src/components/framework/src/athena.cr:215:5 in 'divide_rescued'\n  from src/components/framework/src/ext/routing/annotation_route_loader.cr:8:5 in '-&gt;'\n  from /usr/lib/crystal/primitives.cr:266:3 in 'execute'\n  from src/components/framework/src/route_handler.cr:76:16 in 'handle_raw'\n  from src/components/framework/src/route_handler.cr:19:5 in 'handle'\n  from src/components/framework/src/athena.cr:161:27 in '-&gt;'\n  from /usr/lib/crystal/primitives.cr:266:3 in 'process'\n  from /usr/lib/crystal/http/server.cr:515:5 in 'handle_client'\n  from /usr/lib/crystal/http/server.cr:468:13 in '-&gt;'\n  from /usr/lib/crystal/primitives.cr:266:3 in 'run'\n  from /usr/lib/crystal/fiber.cr:98:34 in '-&gt;'\n  from ???\n\n2022-01-08T20:45:14.132652Z   INFO - athena.routing: Matched route 'example_controller_divide_rescued' -- route: \"example_controller_divide_rescued\", route_parameters: {\"_route\" =&gt; \"example_controller_divide_rescued\", \"_controller\" =&gt; \"ExampleController#divide_rescued\", \"num1\" =&gt; \"10\", \"num2\" =&gt; \"10\"}, request_uri: \"/divide_rescued/10/10\", method: \"GET\"\n</code></pre>"},{"location":"getting_started/#customization","title":"Customization","text":"<p>By default the Athena Framework utilizes the default Log::Formatter and Log::Backends Crystal defines. This of course can be customized via interacting with Crystal's Log module. It is also possible to control what exceptions, and with what severity, will be logged by redefining the <code>log_exception</code> method within ATH::Listeners::Error.</p>"},{"location":"getting_started/#middleware","title":"Middleware","text":"<p>Unlike other frameworks, Athena Framework leverages event based middleware instead of a pipeline based approach. This enables a lot of flexibility in that there is nothing extra that needs to be done to register the listener other than creating a service for it:</p> <pre><code>@[ADI::Register]\nclass CustomListener\n  include AED::EventListenerInterface\n\n  @[AEDA::AsEventListener]\n  def on_response(event : ATH::Events::Response) : Nil\n    event.response.headers[\"FOO\"] = \"BAR\"\n  end\nend\n</code></pre> <p>Similarly, the framework itself is implemented using the same features available to the users. Thus it is very easy to run specific listeners before/after the built-in ones if so desired.</p> <p>Tip</p> <p>Check out the <code>debug:event-dispatcher</code> command for an easy way to see all the listeners and the order in which they are executed.</p>"},{"location":"getting_started/#testing","title":"Testing","text":"<p>Many Athena components include a <code>Spec</code> module that includes common/helpful testing utilities/types for testing that specific component. The framework itself defines some of its own testing types, mainly to allow for easily integration testing ATH::Controllers via ATH::Spec::APITestCase and also provides many helpful <code>HTTP</code> related expectations.</p> <pre><code>require \"athena\"\nrequire \"athena/spec\"\n\nclass ExampleController &lt; ATH::Controller\n  @[ATHA::QueryParam(\"negative\")]\n  @[ARTA::Get(\"/add/{value1}/{value2}\")]\n  def add(value1 : Int32, value2 : Int32, negative : Bool = false) : Int32\n    sum = value1 + value2\n    negative ? -sum : sum\n  end\nend\n\nstruct ExampleControllerTest &lt; ATH::Spec::APITestCase\n  def test_add_positive : Nil\n    self.get(\"/add/5/3\").body.should eq \"8\"\n  end\n\n  def test_add_negative : Nil\n    self.get(\"/add/5/3?negative=true\").body.should eq \"-8\"\n  end\nend\n\n# Run all test case tests.\nASPEC.run_all\n</code></pre> <p>See the Spec component for more information.</p>"},{"location":"getting_started/#websockets","title":"WebSockets","text":"<p>Currently due to Athena Framework's architecture, WebSockets are not directly supported. However the framework does allow prepending HTTP::Handler to the internal server. This could be used to leverage the standard library's HTTP::WebSocketHandler handler or a third party library such as https://github.com/cable-cr/cable.</p> <pre><code>require \"athena\"\n\n# ...\n\nws_handler = HTTP::WebSocketHandler.new do |ws, ctx|\n  ws.on_ping { ws.pong ctx.request.path }\nend\n\nATH.run prepend_handlers: [ws_handler]\n</code></pre> <p>In the future, a goal is to have an integration with https://mercure.rocks/, which would allow for the majority of WebSocket use cases in a way that better fits into the Athena ecosystem.</p>"}]}